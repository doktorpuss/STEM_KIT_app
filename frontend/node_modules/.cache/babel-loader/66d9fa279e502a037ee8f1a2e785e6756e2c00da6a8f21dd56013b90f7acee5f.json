{"ast":null,"code":"import Blockly from'blockly/core';import'blockly/blocks';import{pythonGenerator}from'blockly/python';// Define LED blocks\nconst LEDs_blocks={'LEDs_update':{init:function(){const input=this.appendDummyInput();input.appendField(new Blockly.FieldDropdown([['LED 1','0'],['LED 2','1'],['LED 3','2'],['LED 4','3'],['LED 5','4'],['LED 6','5'],['LED 7','6'],['LED 8','7']]),'LED_ID');input.appendField('state');input.appendField(new Blockly.FieldDropdown([['ON','True'],['OFF','False']]),'state');this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(230);this.setTooltip('Update LED state');}},'LEDs_update_by_number':{init:function(){this.appendValueInput('LED_NUMBER').setCheck('Number').appendField('LED');this.appendValueInput('state').setCheck('Boolean').appendField('state');this.setInputsInline(true);this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(230);this.setTooltip('Update LED state by number');}},'LEDs_clear':{init:function(){this.appendDummyInput().appendField('clear all LEDs');this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(230);this.setTooltip('Clear all LEDs');}}};// Register blocks\nObject.keys(LEDs_blocks).forEach(blockType=>{Blockly.Blocks[blockType]=LEDs_blocks[blockType];});// Register Python generators using the new forBlock API\npythonGenerator.forBlock['LEDs_update']=function(block){// Add import LEDs to definitions\npythonGenerator.definitions_['import_LEDs']='import LEDs';const led_id=block.getFieldValue('LED_ID');const state=block.getFieldValue('state');return`LEDs.update(${led_id},${state})\\n`;};pythonGenerator.forBlock['LEDs_update_by_number']=function(block){// Add import LEDs to definitions\npythonGenerator.definitions_['import_LEDs']='import LEDs';const led_number=pythonGenerator.valueToCode(block,'LED_NUMBER',pythonGenerator.ORDER_ATOMIC)||'0';const state=pythonGenerator.valueToCode(block,'state',pythonGenerator.ORDER_ATOMIC)||'False';return`LEDs.update(${led_number},${state})\\n`;};pythonGenerator.forBlock['LEDs_clear']=function(block){// Add import LEDs to definitions\npythonGenerator.definitions_['import_LEDs']='import LEDs';return`LEDs.clear()\\n`;};","map":{"version":3,"names":["Blockly","pythonGenerator","LEDs_blocks","init","input","appendDummyInput","appendField","FieldDropdown","setPreviousStatement","setNextStatement","setColour","setTooltip","appendValueInput","setCheck","setInputsInline","Object","keys","forEach","blockType","Blocks","forBlock","block","definitions_","led_id","getFieldValue","state","led_number","valueToCode","ORDER_ATOMIC"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/src/blocks/LED_blocks.js"],"sourcesContent":["import Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\n// Define LED blocks\r\nconst LEDs_blocks = {\r\n  'LEDs_update': {\r\n    init: function() {\r\n      const input = this.appendDummyInput();\r\n      input.appendField(new Blockly.FieldDropdown([\r\n        ['LED 1', '0'],\r\n        ['LED 2', '1'],\r\n        ['LED 3', '2'],\r\n        ['LED 4', '3'],\r\n        ['LED 5', '4'],\r\n        ['LED 6', '5'],\r\n        ['LED 7', '6'],\r\n        ['LED 8', '7']\r\n      ]), 'LED_ID');\r\n      input.appendField('state');\r\n      input.appendField(new Blockly.FieldDropdown([\r\n        ['ON', 'True'],\r\n        ['OFF', 'False']\r\n      ]), 'state');\r\n      \r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('Update LED state');\r\n    }\r\n  },\r\n  'LEDs_update_by_number': {\r\n    init: function() {\r\n      this.appendValueInput('LED_NUMBER')\r\n          .setCheck('Number')\r\n          .appendField('LED');\r\n      this.appendValueInput('state')\r\n          .setCheck('Boolean')\r\n          .appendField('state');\r\n      this.setInputsInline(true);\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('Update LED state by number');\r\n    }\r\n  },\r\n  'LEDs_clear': {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField('clear all LEDs');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('Clear all LEDs');\r\n    }\r\n  }\r\n};\r\n\r\n// Register blocks\r\nObject.keys(LEDs_blocks).forEach(blockType => {\r\n  Blockly.Blocks[blockType] = LEDs_blocks[blockType];\r\n});\r\n\r\n// Register Python generators using the new forBlock API\r\npythonGenerator.forBlock['LEDs_update'] = function(block) {\r\n  // Add import LEDs to definitions\r\n  pythonGenerator.definitions_['import_LEDs'] = 'import LEDs';\r\n  \r\n  const led_id = block.getFieldValue('LED_ID');\r\n  const state = block.getFieldValue('state');\r\n  return `LEDs.update(${led_id},${state})\\n`;\r\n};\r\n\r\npythonGenerator.forBlock['LEDs_update_by_number'] = function(block) {\r\n  // Add import LEDs to definitions\r\n  pythonGenerator.definitions_['import_LEDs'] = 'import LEDs';\r\n  \r\n  const led_number = pythonGenerator.valueToCode(block, 'LED_NUMBER', pythonGenerator.ORDER_ATOMIC) || '0';\r\n  const state = pythonGenerator.valueToCode(block, 'state', pythonGenerator.ORDER_ATOMIC) || 'False';\r\n  return `LEDs.update(${led_number},${state})\\n`;\r\n};\r\n\r\npythonGenerator.forBlock['LEDs_clear'] = function(block) {\r\n  // Add import LEDs to definitions\r\n  pythonGenerator.definitions_['import_LEDs'] = 'import LEDs';\r\n  \r\n  return `LEDs.clear()\\n`;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}