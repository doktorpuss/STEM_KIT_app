{"ast":null,"code":"import Blockly from'blockly/core';import'blockly/blocks';import{pythonGenerator}from'blockly/python';const structMutator={mutationToDom:function(){var container=Blockly.utils.xml.createElement('mutation');container.setAttribute('items',this.itemCount_);return container;},domToMutation:function(xmlElement){this.itemCount_=parseInt(xmlElement.getAttribute('items'),10);this.updateShape_();},decompose:function(workspace){var containerBlock=workspace.newBlock('struct_create_container');containerBlock.initSvg();var connection=containerBlock.getInput('STACK').connection;for(var i=0;i<this.itemCount_;i++){var itemBlock=workspace.newBlock('struct_create_field');itemBlock.initSvg();connection.connect(itemBlock.previousConnection);connection=itemBlock.nextConnection;}return containerBlock;},compose:function(containerBlock){var itemBlock=containerBlock.getInputTargetBlock('STACK');var connections=[];var nameConnections=[];while(itemBlock&&!itemBlock.isInsertionMarker()){connections.push(itemBlock.valueConnection_);nameConnections.push(itemBlock.nameConnection_);itemBlock=itemBlock.nextConnection&&itemBlock.nextConnection.targetBlock();}this.itemCount_=connections.length;this.updateShape_();for(var i=0;i<this.itemCount_;i++){if(nameConnections[i]){this.getInput('NAME'+i).connection.connect(nameConnections[i]);}if(connections[i]){this.getInput('VALUE'+i).connection.connect(connections[i]);}}},saveConnections:function(containerBlock){var itemBlock=containerBlock.getInputTargetBlock('STACK');var i=0;while(itemBlock){var nameInput=this.getInput('NAME'+i);var valueInput=this.getInput('VALUE'+i);itemBlock.nameConnection_=nameInput&&nameInput.connection.targetConnection;itemBlock.valueConnection_=valueInput&&valueInput.connection.targetConnection;i++;itemBlock=itemBlock.nextConnection&&itemBlock.nextConnection.targetBlock();}}};Blockly.Blocks['struct_create']={init:function(){this.setHelpUrl('');this.setColour(330);this.itemCount_=3;this.updateShape_();this.setOutput(true,'Struct');this.setTooltip('Create a struct with any number of fields');},updateShape_:function(){if(this.itemCount_&&this.getInput('EMPTY')){this.removeInput('EMPTY');}else if(!this.itemCount_&&!this.getInput('EMPTY')){this.appendDummyInput('EMPTY').appendField('create empty struct');}// Add new inputs.\nfor(var i=0;i<this.itemCount_;i++){if(!this.getInput('NAME'+i)){this.appendValueInput('NAME'+i).setCheck('String').setAlign(Blockly.ALIGN_RIGHT).appendField(i===0?'create struct with field':'and field');this.appendValueInput('VALUE'+i).setCheck(null).setAlign(Blockly.ALIGN_RIGHT).appendField('=');}}// Remove deleted inputs.\nwhile(this.getInput('NAME'+i)){this.removeInput('NAME'+i);this.removeInput('VALUE'+i);i++;}}};Object.assign(Blockly.Blocks['struct_create'],structMutator);Blockly.Blocks['struct_create_container']={init:function(){this.setColour(330);this.appendDummyInput().appendField('struct');this.appendStatementInput('STACK');this.setTooltip('Add, remove, or reorder fields to reconfigure this struct');this.contextMenu=false;}};Blockly.Blocks['struct_create_field']={init:function(){this.setColour(330);this.appendDummyInput().appendField('field');this.setPreviousStatement(true);this.setNextStatement(true);this.setTooltip('Add a field to the struct');this.contextMenu=false;}};pythonGenerator.forBlock['struct_create']=function(block){var fields=[];for(var i=0;i<block.itemCount_;i++){var name=pythonGenerator.valueToCode(block,'NAME'+i,pythonGenerator.ORDER_NONE)||'\"field'+i+'\"';var value=pythonGenerator.valueToCode(block,'VALUE'+i,pythonGenerator.ORDER_NONE)||'None';fields.push(name+': '+value);}var code='type(\"Struct\", (), {'+fields.join(', ')+'})()';return[code,pythonGenerator.ORDER_FUNCTION_CALL];};Blockly.Blocks['struct_get']={init:function(){this.appendValueInput('STRUCT').setCheck(null).appendField('get field');this.appendValueInput('FIELD').setCheck('String').appendField('from struct');this.setOutput(true,null);this.setColour(160);this.setTooltip('Get a field value from a struct');}};pythonGenerator.forBlock['struct_get']=function(block){const struct=pythonGenerator.valueToCode(block,'STRUCT',pythonGenerator.ORDER_MEMBER)||'struct';const field=pythonGenerator.valueToCode(block,'FIELD',pythonGenerator.ORDER_ATOMIC)||\"'field'\";return[`${struct}.${field}`,pythonGenerator.ORDER_MEMBER];};Blockly.Blocks['struct_set']={init:function(){this.appendValueInput('STRUCT').setCheck(null).appendField('set field');this.appendValueInput('FIELD').setCheck('String').appendField('in struct');this.appendValueInput('VALUE').setCheck(null).appendField('to');this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(160);this.setTooltip('Set a field value in a struct');}};pythonGenerator.forBlock['struct_set']=function(block){const struct=pythonGenerator.valueToCode(block,'STRUCT',pythonGenerator.ORDER_MEMBER)||'struct';const field=pythonGenerator.valueToCode(block,'FIELD',pythonGenerator.ORDER_ATOMIC)||\"'field'\";const value=pythonGenerator.valueToCode(block,'VALUE',pythonGenerator.ORDER_ATOMIC)||'None';return`${struct}.${field} = ${value}\\n`;};","map":{"version":3,"names":["Blockly","pythonGenerator","structMutator","mutationToDom","container","utils","xml","createElement","setAttribute","itemCount_","domToMutation","xmlElement","parseInt","getAttribute","updateShape_","decompose","workspace","containerBlock","newBlock","initSvg","connection","getInput","i","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","nameConnections","isInsertionMarker","push","valueConnection_","nameConnection_","targetBlock","length","saveConnections","nameInput","valueInput","targetConnection","Blocks","init","setHelpUrl","setColour","setOutput","setTooltip","removeInput","appendDummyInput","appendField","appendValueInput","setCheck","setAlign","ALIGN_RIGHT","Object","assign","appendStatementInput","contextMenu","setPreviousStatement","setNextStatement","forBlock","block","fields","name","valueToCode","ORDER_NONE","value","code","join","ORDER_FUNCTION_CALL","struct","ORDER_MEMBER","field","ORDER_ATOMIC"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/src/blocks/struct_blocks.js"],"sourcesContent":["import Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nconst structMutator = {\r\n  mutationToDom: function() {\r\n    var container = Blockly.utils.xml.createElement('mutation');\r\n    container.setAttribute('items', this.itemCount_);\r\n    return container;\r\n  },\r\n\r\n  domToMutation: function(xmlElement) {\r\n    this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);\r\n    this.updateShape_();\r\n  },\r\n\r\n  decompose: function(workspace) {\r\n    var containerBlock = workspace.newBlock('struct_create_container');\r\n    containerBlock.initSvg();\r\n    var connection = containerBlock.getInput('STACK').connection;\r\n    for (var i = 0; i < this.itemCount_; i++) {\r\n      var itemBlock = workspace.newBlock('struct_create_field');\r\n      itemBlock.initSvg();\r\n      connection.connect(itemBlock.previousConnection);\r\n      connection = itemBlock.nextConnection;\r\n    }\r\n    return containerBlock;\r\n  },\r\n\r\n  compose: function(containerBlock) {\r\n    var itemBlock = containerBlock.getInputTargetBlock('STACK');\r\n    var connections = [];\r\n    var nameConnections = [];\r\n    while (itemBlock && !itemBlock.isInsertionMarker()) {\r\n      connections.push(itemBlock.valueConnection_);\r\n      nameConnections.push(itemBlock.nameConnection_);\r\n      itemBlock = itemBlock.nextConnection &&\r\n          itemBlock.nextConnection.targetBlock();\r\n    }\r\n    this.itemCount_ = connections.length;\r\n    this.updateShape_();\r\n    for (var i = 0; i < this.itemCount_; i++) {\r\n      if (nameConnections[i]) {\r\n        this.getInput('NAME' + i).connection.connect(nameConnections[i]);\r\n      }\r\n      if (connections[i]) {\r\n        this.getInput('VALUE' + i).connection.connect(connections[i]);\r\n      }\r\n    }\r\n  },\r\n\r\n  saveConnections: function(containerBlock) {\r\n    var itemBlock = containerBlock.getInputTargetBlock('STACK');\r\n    var i = 0;\r\n    while (itemBlock) {\r\n      var nameInput = this.getInput('NAME' + i);\r\n      var valueInput = this.getInput('VALUE' + i);\r\n      itemBlock.nameConnection_ = nameInput && nameInput.connection.targetConnection;\r\n      itemBlock.valueConnection_ = valueInput && valueInput.connection.targetConnection;\r\n      i++;\r\n      itemBlock = itemBlock.nextConnection &&\r\n          itemBlock.nextConnection.targetBlock();\r\n    }\r\n  }\r\n};\r\n\r\nBlockly.Blocks['struct_create'] = {\r\n  init: function() {\r\n    this.setHelpUrl('');\r\n    this.setColour(330);\r\n    this.itemCount_ = 3;\r\n    this.updateShape_();\r\n    this.setOutput(true, 'Struct');\r\n    this.setTooltip('Create a struct with any number of fields');\r\n  },\r\n\r\n  updateShape_: function() {\r\n    if (this.itemCount_ && this.getInput('EMPTY')) {\r\n      this.removeInput('EMPTY');\r\n    } else if (!this.itemCount_ && !this.getInput('EMPTY')) {\r\n      this.appendDummyInput('EMPTY')\r\n          .appendField('create empty struct');\r\n    }\r\n    // Add new inputs.\r\n    for (var i = 0; i < this.itemCount_; i++) {\r\n      if (!this.getInput('NAME' + i)) {\r\n        this.appendValueInput('NAME' + i)\r\n            .setCheck('String')\r\n            .setAlign(Blockly.ALIGN_RIGHT)\r\n            .appendField(i === 0 ? 'create struct with field' : 'and field');\r\n        this.appendValueInput('VALUE' + i)\r\n            .setCheck(null)\r\n            .setAlign(Blockly.ALIGN_RIGHT)\r\n            .appendField('=');\r\n      }\r\n    }\r\n    // Remove deleted inputs.\r\n    while (this.getInput('NAME' + i)) {\r\n      this.removeInput('NAME' + i);\r\n      this.removeInput('VALUE' + i);\r\n      i++;\r\n    }\r\n  }\r\n};\r\n\r\nObject.assign(Blockly.Blocks['struct_create'], structMutator);\r\n\r\nBlockly.Blocks['struct_create_container'] = {\r\n  init: function() {\r\n    this.setColour(330);\r\n    this.appendDummyInput()\r\n        .appendField('struct');\r\n    this.appendStatementInput('STACK');\r\n    this.setTooltip('Add, remove, or reorder fields to reconfigure this struct');\r\n    this.contextMenu = false;\r\n  }\r\n};\r\n\r\nBlockly.Blocks['struct_create_field'] = {\r\n  init: function() {\r\n    this.setColour(330);\r\n    this.appendDummyInput()\r\n        .appendField('field');\r\n    this.setPreviousStatement(true);\r\n    this.setNextStatement(true);\r\n    this.setTooltip('Add a field to the struct');\r\n    this.contextMenu = false;\r\n  }\r\n};\r\n\r\npythonGenerator.forBlock['struct_create'] = function(block) {\r\n  var fields = [];\r\n  for (var i = 0; i < block.itemCount_; i++) {\r\n    var name = pythonGenerator.valueToCode(block, 'NAME' + i,\r\n        pythonGenerator.ORDER_NONE) || '\"field' + i + '\"';\r\n    var value = pythonGenerator.valueToCode(block, 'VALUE' + i,\r\n        pythonGenerator.ORDER_NONE) || 'None';\r\n    fields.push(name + ': ' + value);\r\n  }\r\n  var code = 'type(\"Struct\", (), {' + fields.join(', ') + '})()';\r\n  return [code, pythonGenerator.ORDER_FUNCTION_CALL];\r\n};\r\n\r\nBlockly.Blocks['struct_get'] = {\r\n  init: function() {\r\n    this.appendValueInput('STRUCT')\r\n        .setCheck(null)\r\n        .appendField('get field');\r\n    this.appendValueInput('FIELD')\r\n        .setCheck('String')\r\n        .appendField('from struct');\r\n    this.setOutput(true, null);\r\n    this.setColour(160);\r\n    this.setTooltip('Get a field value from a struct');\r\n  }\r\n};\r\n\r\npythonGenerator.forBlock['struct_get'] = function(block) {\r\n  const struct = pythonGenerator.valueToCode(block, 'STRUCT', pythonGenerator.ORDER_MEMBER) || 'struct';\r\n  const field = pythonGenerator.valueToCode(block, 'FIELD', pythonGenerator.ORDER_ATOMIC) || \"'field'\";\r\n  return [`${struct}.${field}`, pythonGenerator.ORDER_MEMBER];\r\n};\r\n\r\nBlockly.Blocks['struct_set'] = {\r\n  init: function() {\r\n    this.appendValueInput('STRUCT')\r\n        .setCheck(null)\r\n        .appendField('set field');\r\n    this.appendValueInput('FIELD')\r\n        .setCheck('String')\r\n        .appendField('in struct');\r\n    this.appendValueInput('VALUE')\r\n        .setCheck(null)\r\n        .appendField('to');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(160);\r\n    this.setTooltip('Set a field value in a struct');\r\n  }\r\n};\r\n\r\npythonGenerator.forBlock['struct_set'] = function(block) {\r\n  const struct = pythonGenerator.valueToCode(block, 'STRUCT', pythonGenerator.ORDER_MEMBER) || 'struct';\r\n  const field = pythonGenerator.valueToCode(block, 'FIELD', pythonGenerator.ORDER_ATOMIC) || \"'field'\";\r\n  const value = pythonGenerator.valueToCode(block, 'VALUE', pythonGenerator.ORDER_ATOMIC) || 'None';\r\n  return `${struct}.${field} = ${value}\\n`;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}