{"ast":null,"code":"import Blockly from'blockly/core';import'blockly/blocks';import{pythonGenerator}from'blockly/python';// Define time blocks\nconst Potentiometer_blocks={'Potentiometer_read':{init:function(){this.appendDummyInput().appendField('Read Potentiometer');this.appendField(new Blockly.FieldDropdown([['1','0'],['2','1'],['3','2']]),'Pot_ID');this.setOutput(true,'Number');this.setColour(230);this.setTooltip('Read potentiometer value');}}};// Register blocks\nObject.keys(Potentiometer_blocks).forEach(blockType=>{Blockly.Blocks[blockType]=Potentiometer_blocks[blockType];});// Register Python generators\npythonGenerator['Potentiometer_read']=function(block){// Add import time to definitions\npythonGenerator.definitions_['import_ADC']='import ADC';const Pot_ID=pythonGenerator.valueToCode(block,'Pot_ID',pythonGenerator.ORDER_ATOMIC)||'0';return`ADC_read(${Pot_ID})\\n`;};","map":{"version":3,"names":["Blockly","pythonGenerator","Potentiometer_blocks","init","appendDummyInput","appendField","FieldDropdown","setOutput","setColour","setTooltip","Object","keys","forEach","blockType","Blocks","block","definitions_","Pot_ID","valueToCode","ORDER_ATOMIC"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/src/blocks/ADC_blocks.js"],"sourcesContent":["import Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\n// Define time blocks\r\nconst Potentiometer_blocks = {\r\n  'Potentiometer_read': {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField('Read Potentiometer');\r\n      this.appendField(new Blockly.FieldDropdown([\r\n        ['1', '0'],\r\n        ['2', '1'],\r\n        ['3', '2'],\r\n      ]), 'Pot_ID')\r\n      this.setOutput(true, 'Number');\r\n      this.setColour(230);\r\n      this.setTooltip('Read potentiometer value');\r\n    }\r\n  }\r\n};\r\n\r\n// Register blocks\r\nObject.keys(Potentiometer_blocks).forEach(blockType => {\r\n  Blockly.Blocks[blockType] = Potentiometer_blocks[blockType];\r\n});\r\n\r\n// Register Python generators\r\npythonGenerator['Potentiometer_read'] = function(block) {\r\n  // Add import time to definitions\r\n  pythonGenerator.definitions_['import_ADC'] = 'import ADC';\r\n  \r\n  const Pot_ID = pythonGenerator.valueToCode(block, 'Pot_ID', pythonGenerator.ORDER_ATOMIC) || '0';\r\n  return `ADC_read(${Pot_ID})\\n`;\r\n};"],"mappings":"AAAA,MAAO,CAAAA,OAAO,KAAM,cAAc,CAClC,MAAO,gBAAgB,CACvB,OAASC,eAAe,KAAQ,gBAAgB,CAEhD;AACA,KAAM,CAAAC,oBAAoB,CAAG,CAC3B,oBAAoB,CAAE,CACpBC,IAAI,CAAE,QAAAA,CAAA,CAAW,CACf,IAAI,CAACC,gBAAgB,CAAC,CAAC,CAClBC,WAAW,CAAC,oBAAoB,CAAC,CACtC,IAAI,CAACA,WAAW,CAAC,GAAI,CAAAL,OAAO,CAACM,aAAa,CAAC,CACzC,CAAC,GAAG,CAAE,GAAG,CAAC,CACV,CAAC,GAAG,CAAE,GAAG,CAAC,CACV,CAAC,GAAG,CAAE,GAAG,CAAC,CACX,CAAC,CAAE,QAAQ,CAAC,CACb,IAAI,CAACC,SAAS,CAAC,IAAI,CAAE,QAAQ,CAAC,CAC9B,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,0BAA0B,CAAC,CAC7C,CACF,CACF,CAAC,CAED;AACAC,MAAM,CAACC,IAAI,CAACT,oBAAoB,CAAC,CAACU,OAAO,CAACC,SAAS,EAAI,CACrDb,OAAO,CAACc,MAAM,CAACD,SAAS,CAAC,CAAGX,oBAAoB,CAACW,SAAS,CAAC,CAC7D,CAAC,CAAC,CAEF;AACAZ,eAAe,CAAC,oBAAoB,CAAC,CAAG,SAASc,KAAK,CAAE,CACtD;AACAd,eAAe,CAACe,YAAY,CAAC,YAAY,CAAC,CAAG,YAAY,CAEzD,KAAM,CAAAC,MAAM,CAAGhB,eAAe,CAACiB,WAAW,CAACH,KAAK,CAAE,QAAQ,CAAEd,eAAe,CAACkB,YAAY,CAAC,EAAI,GAAG,CAChG,MAAO,YAAYF,MAAM,KAAK,CAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}