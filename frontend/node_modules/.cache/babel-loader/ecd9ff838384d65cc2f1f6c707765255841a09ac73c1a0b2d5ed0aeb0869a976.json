{"ast":null,"code":"import Blockly from'blockly/core';import'blockly/blocks';import{pythonGenerator}from'blockly/python';// Define time blocks\nconst LEDs_blocks={'LEDs_update':{init:function(){const ledInput=this.appendValueInput('LED_ID');ledInput.setCheck('Number');ledInput.appendField('LED ID');const stateInput=this.appendValueInput('state');stateInput.setCheck('Boolean');stateInput.appendField('state');this.setPreviousStatement(true,null);this.setColour(230);this.setTooltip('Update LED state');}},'LEDs_clear':{init:function(){this.appendDummyInput().appendField('clear all LEDs');this.setPreviousStatement(true,null);this.setColour(230);this.setTooltip('Clear all LEDs');}}};// Register blocks\nObject.keys(LEDs_blocks).forEach(blockType=>{Blockly.Blocks[blockType]=LEDs_blocks[blockType];});// Register Python generators\npythonGenerator['LEDs_update']=function(block){// Add import time to definitions\npythonGenerator.definitions_['import_LEDs']='import LEDs';const led_id=pythonGenerator.valueToCode(block,'LED_ID',pythonGenerator.ORDER_ATOMIC)||'0';const state=pythonGenerator.valueToCode(block,'state',pythonGenerator.ORDER_ATOMIC)||'0';return`LEDs.update(${led_id},${state})\\n`;};pythonGenerator['LEDs_clear']=function(block){// Add import time to definitions\npythonGenerator.definitions_['import_LEDs']='import LEDs';return['LEDs.clear()',pythonGenerator.ORDER_FUNCTION_CALL];};","map":{"version":3,"names":["Blockly","pythonGenerator","LEDs_blocks","init","ledInput","appendValueInput","setCheck","appendField","stateInput","setPreviousStatement","setColour","setTooltip","appendDummyInput","Object","keys","forEach","blockType","Blocks","block","definitions_","led_id","valueToCode","ORDER_ATOMIC","state","ORDER_FUNCTION_CALL"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/src/blocks/LED_blocks.js"],"sourcesContent":["import Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\n// Define time blocks\r\nconst LEDs_blocks = {\r\n  'LEDs_update': {\r\n    init: function() {\r\n      const ledInput = this.appendValueInput('LED_ID');\r\n      ledInput.setCheck('Number');\r\n      ledInput.appendField('LED ID');\r\n      \r\n      const stateInput = this.appendValueInput('state');\r\n      stateInput.setCheck('Boolean');\r\n      stateInput.appendField('state');\r\n      \r\n      this.setPreviousStatement(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('Update LED state');\r\n    }\r\n  },\r\n  'LEDs_clear': {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField('clear all LEDs');\r\n      this.setPreviousStatement(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('Clear all LEDs');\r\n    }\r\n  }\r\n};\r\n\r\n// Register blocks\r\nObject.keys(LEDs_blocks).forEach(blockType => {\r\n  Blockly.Blocks[blockType] = LEDs_blocks[blockType];\r\n});\r\n\r\n// Register Python generators\r\npythonGenerator['LEDs_update'] = function(block) {\r\n  // Add import time to definitions\r\n  pythonGenerator.definitions_['import_LEDs'] = 'import LEDs';\r\n  \r\n  const led_id = pythonGenerator.valueToCode(block, 'LED_ID', pythonGenerator.ORDER_ATOMIC) || '0';\r\n  const state = pythonGenerator.valueToCode(block, 'state', pythonGenerator.ORDER_ATOMIC) || '0';\r\n  return `LEDs.update(${led_id},${state})\\n`;\r\n};\r\n\r\npythonGenerator['LEDs_clear'] = function(block) {\r\n  // Add import time to definitions\r\n  pythonGenerator.definitions_['import_LEDs'] = 'import LEDs';\r\n  \r\n  return ['LEDs.clear()', pythonGenerator.ORDER_FUNCTION_CALL];\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,OAAO,KAAM,cAAc,CAClC,MAAO,gBAAgB,CACvB,OAASC,eAAe,KAAQ,gBAAgB,CAEhD;AACA,KAAM,CAAAC,WAAW,CAAG,CAClB,aAAa,CAAE,CACbC,IAAI,CAAE,QAAAA,CAAA,CAAW,CACf,KAAM,CAAAC,QAAQ,CAAG,IAAI,CAACC,gBAAgB,CAAC,QAAQ,CAAC,CAChDD,QAAQ,CAACE,QAAQ,CAAC,QAAQ,CAAC,CAC3BF,QAAQ,CAACG,WAAW,CAAC,QAAQ,CAAC,CAE9B,KAAM,CAAAC,UAAU,CAAG,IAAI,CAACH,gBAAgB,CAAC,OAAO,CAAC,CACjDG,UAAU,CAACF,QAAQ,CAAC,SAAS,CAAC,CAC9BE,UAAU,CAACD,WAAW,CAAC,OAAO,CAAC,CAE/B,IAAI,CAACE,oBAAoB,CAAC,IAAI,CAAE,IAAI,CAAC,CACrC,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,kBAAkB,CAAC,CACrC,CACF,CAAC,CACD,YAAY,CAAE,CACZR,IAAI,CAAE,QAAAA,CAAA,CAAW,CACf,IAAI,CAACS,gBAAgB,CAAC,CAAC,CAClBL,WAAW,CAAC,gBAAgB,CAAC,CAClC,IAAI,CAACE,oBAAoB,CAAC,IAAI,CAAE,IAAI,CAAC,CACrC,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,gBAAgB,CAAC,CACnC,CACF,CACF,CAAC,CAED;AACAE,MAAM,CAACC,IAAI,CAACZ,WAAW,CAAC,CAACa,OAAO,CAACC,SAAS,EAAI,CAC5ChB,OAAO,CAACiB,MAAM,CAACD,SAAS,CAAC,CAAGd,WAAW,CAACc,SAAS,CAAC,CACpD,CAAC,CAAC,CAEF;AACAf,eAAe,CAAC,aAAa,CAAC,CAAG,SAASiB,KAAK,CAAE,CAC/C;AACAjB,eAAe,CAACkB,YAAY,CAAC,aAAa,CAAC,CAAG,aAAa,CAE3D,KAAM,CAAAC,MAAM,CAAGnB,eAAe,CAACoB,WAAW,CAACH,KAAK,CAAE,QAAQ,CAAEjB,eAAe,CAACqB,YAAY,CAAC,EAAI,GAAG,CAChG,KAAM,CAAAC,KAAK,CAAGtB,eAAe,CAACoB,WAAW,CAACH,KAAK,CAAE,OAAO,CAAEjB,eAAe,CAACqB,YAAY,CAAC,EAAI,GAAG,CAC9F,MAAO,eAAeF,MAAM,IAAIG,KAAK,KAAK,CAC5C,CAAC,CAEDtB,eAAe,CAAC,YAAY,CAAC,CAAG,SAASiB,KAAK,CAAE,CAC9C;AACAjB,eAAe,CAACkB,YAAY,CAAC,aAAa,CAAC,CAAG,aAAa,CAE3D,MAAO,CAAC,cAAc,CAAElB,eAAe,CAACuB,mBAAmB,CAAC,CAC9D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}