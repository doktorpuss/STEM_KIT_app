{"ast":null,"code":"import Blockly from'blockly/core';import'blockly/blocks';import{pythonGenerator}from'blockly/python';// Define time blocks\nconst LEDs_blocks={'LED_update':{init:function(){this.appendValueInput('LED_ID').setCheck('Number').appendField('LED ID').appendValueInput('state').setCheck('Boolean').appendField('state');this.setPreviousStatement(true,null);this.setColour(230);this.setTooltip('Pause execution for specified number of seconds');}},'LEDs_clear':{init:function(){this.appendDummyInput().appendField('current time');this.setOutput(true,'Number');this.setColour(230);this.setTooltip('Get current time in seconds since epoch');}}};// Register blocks\nObject.keys(LEDs_blocks).forEach(blockType=>{Blockly.Blocks[blockType]=LEDs_blocks[blockType];});// Register Python generators\npythonGenerator['LEDs_update']=function(block){// Add import time to definitions\npythonGenerator.definitions_['import_LEDs']='import LEDs';const led_id=pythonGenerator.valueToCode(block,'LED_ID',pythonGenerator.ORDER_ATOMIC)||'0';const state=pythonGenerator.valueToCode(block,'state',pythonGenerator.ORDER_ATOMIC)||'0';return`LEDs.update(${led_id},${state})\\n`;};pythonGenerator['LEDs_clear']=function(block){// Add import time to definitions\npythonGenerator.definitions_['import_LEDs']='import LEDs';return['LEDs.clear()',pythonGenerator.ORDER_FUNCTION_CALL];};","map":{"version":3,"names":["Blockly","pythonGenerator","LEDs_blocks","init","appendValueInput","setCheck","appendField","setPreviousStatement","setColour","setTooltip","appendDummyInput","setOutput","Object","keys","forEach","blockType","Blocks","block","definitions_","led_id","valueToCode","ORDER_ATOMIC","state","ORDER_FUNCTION_CALL"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/src/blocks/LED_blocks.js"],"sourcesContent":["import Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\n// Define time blocks\r\nconst LEDs_blocks = {\r\n  'LED_update': {\r\n    init: function() {\r\n      this.appendValueInput('LED_ID')\r\n          .setCheck('Number')\r\n          .appendField('LED ID')\r\n          .appendValueInput('state')\r\n          .setCheck('Boolean')\r\n          .appendField('state');\r\n      this.setPreviousStatement(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('Pause execution for specified number of seconds');\r\n    }\r\n  },\r\n  'LEDs_clear': {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField('current time');\r\n      this.setOutput(true, 'Number');\r\n      this.setColour(230);\r\n      this.setTooltip('Get current time in seconds since epoch');\r\n    }\r\n  }\r\n};\r\n\r\n// Register blocks\r\nObject.keys(LEDs_blocks).forEach(blockType => {\r\n  Blockly.Blocks[blockType] = LEDs_blocks[blockType];\r\n});\r\n\r\n// Register Python generators\r\npythonGenerator['LEDs_update'] = function(block) {\r\n  // Add import time to definitions\r\n  pythonGenerator.definitions_['import_LEDs'] = 'import LEDs';\r\n  \r\n  const led_id = pythonGenerator.valueToCode(block, 'LED_ID', pythonGenerator.ORDER_ATOMIC) || '0';\r\n  const state = pythonGenerator.valueToCode(block, 'state', pythonGenerator.ORDER_ATOMIC) || '0';\r\n  return `LEDs.update(${led_id},${state})\\n`;\r\n};\r\n\r\npythonGenerator['LEDs_clear'] = function(block) {\r\n  // Add import time to definitions\r\n  pythonGenerator.definitions_['import_LEDs'] = 'import LEDs';\r\n  \r\n  return ['LEDs.clear()', pythonGenerator.ORDER_FUNCTION_CALL];\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,OAAO,KAAM,cAAc,CAClC,MAAO,gBAAgB,CACvB,OAASC,eAAe,KAAQ,gBAAgB,CAEhD;AACA,KAAM,CAAAC,WAAW,CAAG,CAClB,YAAY,CAAE,CACZC,IAAI,CAAE,QAAAA,CAAA,CAAW,CACf,IAAI,CAACC,gBAAgB,CAAC,QAAQ,CAAC,CAC1BC,QAAQ,CAAC,QAAQ,CAAC,CAClBC,WAAW,CAAC,QAAQ,CAAC,CACrBF,gBAAgB,CAAC,OAAO,CAAC,CACzBC,QAAQ,CAAC,SAAS,CAAC,CACnBC,WAAW,CAAC,OAAO,CAAC,CACzB,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAAE,IAAI,CAAC,CACrC,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,iDAAiD,CAAC,CACpE,CACF,CAAC,CACD,YAAY,CAAE,CACZN,IAAI,CAAE,QAAAA,CAAA,CAAW,CACf,IAAI,CAACO,gBAAgB,CAAC,CAAC,CAClBJ,WAAW,CAAC,cAAc,CAAC,CAChC,IAAI,CAACK,SAAS,CAAC,IAAI,CAAE,QAAQ,CAAC,CAC9B,IAAI,CAACH,SAAS,CAAC,GAAG,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,yCAAyC,CAAC,CAC5D,CACF,CACF,CAAC,CAED;AACAG,MAAM,CAACC,IAAI,CAACX,WAAW,CAAC,CAACY,OAAO,CAACC,SAAS,EAAI,CAC5Cf,OAAO,CAACgB,MAAM,CAACD,SAAS,CAAC,CAAGb,WAAW,CAACa,SAAS,CAAC,CACpD,CAAC,CAAC,CAEF;AACAd,eAAe,CAAC,aAAa,CAAC,CAAG,SAASgB,KAAK,CAAE,CAC/C;AACAhB,eAAe,CAACiB,YAAY,CAAC,aAAa,CAAC,CAAG,aAAa,CAE3D,KAAM,CAAAC,MAAM,CAAGlB,eAAe,CAACmB,WAAW,CAACH,KAAK,CAAE,QAAQ,CAAEhB,eAAe,CAACoB,YAAY,CAAC,EAAI,GAAG,CAChG,KAAM,CAAAC,KAAK,CAAGrB,eAAe,CAACmB,WAAW,CAACH,KAAK,CAAE,OAAO,CAAEhB,eAAe,CAACoB,YAAY,CAAC,EAAI,GAAG,CAC9F,MAAO,eAAeF,MAAM,IAAIG,KAAK,KAAK,CAC5C,CAAC,CAEDrB,eAAe,CAAC,YAAY,CAAC,CAAG,SAASgB,KAAK,CAAE,CAC9C;AACAhB,eAAe,CAACiB,YAAY,CAAC,aAAa,CAAC,CAAG,aAAa,CAE3D,MAAO,CAAC,cAAc,CAAEjB,eAAe,CAACsB,mBAAmB,CAAC,CAC9D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}