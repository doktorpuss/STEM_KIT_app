{"ast":null,"code":"import Blockly from'blockly/core';import'blockly/blocks';import{pythonGenerator}from'blockly/python';const Mutator=Blockly.Extensions.getMutator;Blockly.Blocks['dictionaries_create']={init:function(){this.setHelpUrl('');this.setColour(160);this.itemCount_=3;this.updateShape_();this.setOutput(true,'Dictionary');this.setMutator(new Mutator(['dictionaries_create_item']));this.setTooltip('Create a dictionary with any number of key-value pairs');},mutationToDom:function(){var container=Blockly.utils.xml.createElement('mutation');container.setAttribute('items',this.itemCount_);return container;},domToMutation:function(xmlElement){this.itemCount_=parseInt(xmlElement.getAttribute('items'),10);this.updateShape_();},decompose:function(workspace){var containerBlock=workspace.newBlock('dictionaries_create_container');containerBlock.initSvg();var connection=containerBlock.getInput('STACK').connection;for(var i=0;i<this.itemCount_;i++){var itemBlock=workspace.newBlock('dictionaries_create_item');itemBlock.initSvg();connection.connect(itemBlock.previousConnection);connection=itemBlock.nextConnection;}return containerBlock;},compose:function(containerBlock){var itemBlock=containerBlock.getInputTargetBlock('STACK');var connections=[];var keyConnections=[];while(itemBlock&&!itemBlock.isInsertionMarker()){connections.push(itemBlock.valueConnection_);keyConnections.push(itemBlock.keyConnection_);itemBlock=itemBlock.nextConnection&&itemBlock.nextConnection.targetBlock();}this.itemCount_=connections.length;this.updateShape_();for(var i=0;i<this.itemCount_;i++){if(keyConnections[i]){this.getInput('KEY'+i).connection.connect(keyConnections[i]);}if(connections[i]){this.getInput('VALUE'+i).connection.connect(connections[i]);}}},saveConnections:function(containerBlock){var itemBlock=containerBlock.getInputTargetBlock('STACK');var i=0;while(itemBlock){var keyInput=this.getInput('KEY'+i);var valueInput=this.getInput('VALUE'+i);itemBlock.keyConnection_=keyInput&&keyInput.connection.targetConnection;itemBlock.valueConnection_=valueInput&&valueInput.connection.targetConnection;i++;itemBlock=itemBlock.nextConnection&&itemBlock.nextConnection.targetBlock();}},updateShape_:function(){if(this.itemCount_&&this.getInput('EMPTY')){this.removeInput('EMPTY');}else if(!this.itemCount_&&!this.getInput('EMPTY')){this.appendDummyInput('EMPTY').appendField('create empty dictionary');}// Add new inputs.\nfor(var i=0;i<this.itemCount_;i++){if(!this.getInput('KEY'+i)){var row=this.appendValueInput('KEY'+i).setCheck('String').setAlign(Blockly.ALIGN_RIGHT).appendField(i===0?'create dictionary with key':'and key');this.appendValueInput('VALUE'+i).setCheck(null).setAlign(Blockly.ALIGN_RIGHT).appendField('value');}}// Remove deleted inputs.\nwhile(this.getInput('KEY'+i)){this.removeInput('KEY'+i);this.removeInput('VALUE'+i);i++;}}};Blockly.Blocks['dictionaries_create_container']={init:function(){this.setColour(160);this.appendDummyInput().appendField('dictionary');this.appendStatementInput('STACK');this.setTooltip('Add, remove, or reorder sections to reconfigure this dictionary block');this.contextMenu=false;}};Blockly.Blocks['dictionaries_create_item']={init:function(){this.setColour(160);this.appendDummyInput().appendField('item');this.setPreviousStatement(true);this.setNextStatement(true);this.setTooltip('Add a key-value pair to the dictionary');this.contextMenu=false;}};pythonGenerator.forBlock['dictionaries_create']=function(block){var elements=[];for(var i=0;i<block.itemCount_;i++){var key=pythonGenerator.valueToCode(block,'KEY'+i,pythonGenerator.ORDER_NONE)||'\"\"';var value=pythonGenerator.valueToCode(block,'VALUE'+i,pythonGenerator.ORDER_NONE)||'None';elements.push(key+': '+value);}var code='{'+elements.join(', ')+'}';return[code,pythonGenerator.ORDER_ATOMIC];};Blockly.Blocks['dictionaries_get']={init:function(){this.appendValueInput('DICT').setCheck(null).appendField('get value for key');this.appendValueInput('KEY').setCheck('String');this.setOutput(true,null);this.setColour(160);this.setTooltip('Get a value from the dictionary using the specified key');}};pythonGenerator.forBlock['dictionaries_get']=function(block){const dict=pythonGenerator.valueToCode(block,'DICT',pythonGenerator.ORDER_MEMBER)||'{}';const key=pythonGenerator.valueToCode(block,'KEY',pythonGenerator.ORDER_ATOMIC)||'\"\"';return[`${dict}[${key}]`,pythonGenerator.ORDER_MEMBER];};Blockly.Blocks['dictionaries_set']={init:function(){this.appendValueInput('DICT').setCheck(null).appendField('set value for key');this.appendValueInput('KEY').setCheck('String');this.appendValueInput('VALUE').setCheck(null).appendField('to');this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(160);this.setTooltip('Set a value in the dictionary for the specified key');}};pythonGenerator.forBlock['dictionaries_set']=function(block){const dict=pythonGenerator.valueToCode(block,'DICT',pythonGenerator.ORDER_MEMBER)||'{}';const key=pythonGenerator.valueToCode(block,'KEY',pythonGenerator.ORDER_ATOMIC)||'\"\"';const value=pythonGenerator.valueToCode(block,'VALUE',pythonGenerator.ORDER_ATOMIC)||'None';return`${dict}[${key}] = ${value}\\n`;};","map":{"version":3,"names":["Blockly","pythonGenerator","Mutator","Extensions","getMutator","Blocks","init","setHelpUrl","setColour","itemCount_","updateShape_","setOutput","setMutator","setTooltip","mutationToDom","container","utils","xml","createElement","setAttribute","domToMutation","xmlElement","parseInt","getAttribute","decompose","workspace","containerBlock","newBlock","initSvg","connection","getInput","i","itemBlock","connect","previousConnection","nextConnection","compose","getInputTargetBlock","connections","keyConnections","isInsertionMarker","push","valueConnection_","keyConnection_","targetBlock","length","saveConnections","keyInput","valueInput","targetConnection","removeInput","appendDummyInput","appendField","row","appendValueInput","setCheck","setAlign","ALIGN_RIGHT","appendStatementInput","contextMenu","setPreviousStatement","setNextStatement","forBlock","block","elements","key","valueToCode","ORDER_NONE","value","code","join","ORDER_ATOMIC","dict","ORDER_MEMBER"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/src/blocks/dictionaries_blocks.js"],"sourcesContent":["import Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nconst Mutator = Blockly.Extensions.getMutator;\r\n\r\nBlockly.Blocks['dictionaries_create'] = {\r\n  init: function() {\r\n    this.setHelpUrl('');\r\n    this.setColour(160);\r\n    this.itemCount_ = 3;\r\n    this.updateShape_();\r\n    this.setOutput(true, 'Dictionary');\r\n    this.setMutator(new Mutator(['dictionaries_create_item']));\r\n    this.setTooltip('Create a dictionary with any number of key-value pairs');\r\n  },\r\n\r\n  mutationToDom: function() {\r\n    var container = Blockly.utils.xml.createElement('mutation');\r\n    container.setAttribute('items', this.itemCount_);\r\n    return container;\r\n  },\r\n\r\n  domToMutation: function(xmlElement) {\r\n    this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);\r\n    this.updateShape_();\r\n  },\r\n\r\n  decompose: function(workspace) {\r\n    var containerBlock = workspace.newBlock('dictionaries_create_container');\r\n    containerBlock.initSvg();\r\n    var connection = containerBlock.getInput('STACK').connection;\r\n    for (var i = 0; i < this.itemCount_; i++) {\r\n      var itemBlock = workspace.newBlock('dictionaries_create_item');\r\n      itemBlock.initSvg();\r\n      connection.connect(itemBlock.previousConnection);\r\n      connection = itemBlock.nextConnection;\r\n    }\r\n    return containerBlock;\r\n  },\r\n\r\n  compose: function(containerBlock) {\r\n    var itemBlock = containerBlock.getInputTargetBlock('STACK');\r\n    var connections = [];\r\n    var keyConnections = [];\r\n    while (itemBlock && !itemBlock.isInsertionMarker()) {\r\n      connections.push(itemBlock.valueConnection_);\r\n      keyConnections.push(itemBlock.keyConnection_);\r\n      itemBlock = itemBlock.nextConnection &&\r\n          itemBlock.nextConnection.targetBlock();\r\n    }\r\n    this.itemCount_ = connections.length;\r\n    this.updateShape_();\r\n    for (var i = 0; i < this.itemCount_; i++) {\r\n      if (keyConnections[i]) {\r\n        this.getInput('KEY' + i).connection.connect(keyConnections[i]);\r\n      }\r\n      if (connections[i]) {\r\n        this.getInput('VALUE' + i).connection.connect(connections[i]);\r\n      }\r\n    }\r\n  },\r\n\r\n  saveConnections: function(containerBlock) {\r\n    var itemBlock = containerBlock.getInputTargetBlock('STACK');\r\n    var i = 0;\r\n    while (itemBlock) {\r\n      var keyInput = this.getInput('KEY' + i);\r\n      var valueInput = this.getInput('VALUE' + i);\r\n      itemBlock.keyConnection_ = keyInput && keyInput.connection.targetConnection;\r\n      itemBlock.valueConnection_ = valueInput && valueInput.connection.targetConnection;\r\n      i++;\r\n      itemBlock = itemBlock.nextConnection &&\r\n          itemBlock.nextConnection.targetBlock();\r\n    }\r\n  },\r\n\r\n  updateShape_: function() {\r\n    if (this.itemCount_ && this.getInput('EMPTY')) {\r\n      this.removeInput('EMPTY');\r\n    } else if (!this.itemCount_ && !this.getInput('EMPTY')) {\r\n      this.appendDummyInput('EMPTY')\r\n          .appendField('create empty dictionary');\r\n    }\r\n    // Add new inputs.\r\n    for (var i = 0; i < this.itemCount_; i++) {\r\n      if (!this.getInput('KEY' + i)) {\r\n        var row = this.appendValueInput('KEY' + i)\r\n            .setCheck('String')\r\n            .setAlign(Blockly.ALIGN_RIGHT)\r\n            .appendField(i === 0 ? 'create dictionary with key' : 'and key');\r\n        this.appendValueInput('VALUE' + i)\r\n            .setCheck(null)\r\n            .setAlign(Blockly.ALIGN_RIGHT)\r\n            .appendField('value');\r\n      }\r\n    }\r\n    // Remove deleted inputs.\r\n    while (this.getInput('KEY' + i)) {\r\n      this.removeInput('KEY' + i);\r\n      this.removeInput('VALUE' + i);\r\n      i++;\r\n    }\r\n  }\r\n};\r\n\r\nBlockly.Blocks['dictionaries_create_container'] = {\r\n  init: function() {\r\n    this.setColour(160);\r\n    this.appendDummyInput()\r\n        .appendField('dictionary');\r\n    this.appendStatementInput('STACK');\r\n    this.setTooltip('Add, remove, or reorder sections to reconfigure this dictionary block');\r\n    this.contextMenu = false;\r\n  }\r\n};\r\n\r\nBlockly.Blocks['dictionaries_create_item'] = {\r\n  init: function() {\r\n    this.setColour(160);\r\n    this.appendDummyInput()\r\n        .appendField('item');\r\n    this.setPreviousStatement(true);\r\n    this.setNextStatement(true);\r\n    this.setTooltip('Add a key-value pair to the dictionary');\r\n    this.contextMenu = false;\r\n  }\r\n};\r\n\r\npythonGenerator.forBlock['dictionaries_create'] = function(block) {\r\n  var elements = [];\r\n  for (var i = 0; i < block.itemCount_; i++) {\r\n    var key = pythonGenerator.valueToCode(block, 'KEY' + i,\r\n        pythonGenerator.ORDER_NONE) || '\"\"';\r\n    var value = pythonGenerator.valueToCode(block, 'VALUE' + i,\r\n        pythonGenerator.ORDER_NONE) || 'None';\r\n    elements.push(key + ': ' + value);\r\n  }\r\n  var code = '{' + elements.join(', ') + '}';\r\n  return [code, pythonGenerator.ORDER_ATOMIC];\r\n};\r\n\r\nBlockly.Blocks['dictionaries_get'] = {\r\n  init: function() {\r\n    this.appendValueInput('DICT')\r\n        .setCheck(null)\r\n        .appendField('get value for key');\r\n    this.appendValueInput('KEY')\r\n        .setCheck('String');\r\n    this.setOutput(true, null);\r\n    this.setColour(160);\r\n    this.setTooltip('Get a value from the dictionary using the specified key');\r\n  }\r\n};\r\n\r\npythonGenerator.forBlock['dictionaries_get'] = function(block) {\r\n  const dict = pythonGenerator.valueToCode(block, 'DICT', pythonGenerator.ORDER_MEMBER) || '{}';\r\n  const key = pythonGenerator.valueToCode(block, 'KEY', pythonGenerator.ORDER_ATOMIC) || '\"\"';\r\n  return [`${dict}[${key}]`, pythonGenerator.ORDER_MEMBER];\r\n};\r\n\r\nBlockly.Blocks['dictionaries_set'] = {\r\n  init: function() {\r\n    this.appendValueInput('DICT')\r\n        .setCheck(null)\r\n        .appendField('set value for key');\r\n    this.appendValueInput('KEY')\r\n        .setCheck('String');\r\n    this.appendValueInput('VALUE')\r\n        .setCheck(null)\r\n        .appendField('to');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(160);\r\n    this.setTooltip('Set a value in the dictionary for the specified key');\r\n  }\r\n};\r\n\r\npythonGenerator.forBlock['dictionaries_set'] = function(block) {\r\n  const dict = pythonGenerator.valueToCode(block, 'DICT', pythonGenerator.ORDER_MEMBER) || '{}';\r\n  const key = pythonGenerator.valueToCode(block, 'KEY', pythonGenerator.ORDER_ATOMIC) || '\"\"';\r\n  const value = pythonGenerator.valueToCode(block, 'VALUE', pythonGenerator.ORDER_ATOMIC) || 'None';\r\n  return `${dict}[${key}] = ${value}\\n`;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}