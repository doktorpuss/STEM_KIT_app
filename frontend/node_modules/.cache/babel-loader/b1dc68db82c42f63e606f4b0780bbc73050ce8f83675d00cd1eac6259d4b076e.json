{"ast":null,"code":"import Blockly from'blockly/core';import'blockly/blocks';import{pythonGenerator}from'blockly/python';// Define time blocks\nconst LEDs_blocks={'LEDs_update':{init:function(){this.appendDummyInput().appendField(new Blockly.FieldDropdown([['LED 1','0'],['LED 2','1'],['LED 3','2'],['LED 4','3'],['LED 5','4'],['LED 6','5'],['LED 7','6'],['LED 8','7']]),'LED_ID').appendField('state').appendField(new Blockly.FieldDropdown([['ON','True'],['OFF','False']]),'state');this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(230);this.setTooltip('Update LED state');}},'LEDs_clear':{init:function(){this.appendField('clear all LEDs');this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(230);this.setTooltip('Clear all LEDs');}}};// Register blocks\nObject.keys(LEDs_blocks).forEach(blockType=>{Blockly.Blocks[blockType]=LEDs_blocks[blockType];});// Register Python generators\npythonGenerator['LEDs_update']=function(block){// Add import time to definitions\npythonGenerator.definitions_['import_LEDs']='import LEDs';const led_id=block.getFieldValue('LED_ID');const state=block.getFieldValue('state');return`LEDs.update(${led_id},${state})\\n`;};pythonGenerator['LEDs_clear']=function(block){// Add import time to definitions\npythonGenerator.definitions_['import_LEDs']='import LEDs';return['LEDs.clear()',pythonGenerator.ORDER_FUNCTION_CALL];};","map":{"version":3,"names":["Blockly","pythonGenerator","LEDs_blocks","init","appendDummyInput","appendField","FieldDropdown","setPreviousStatement","setNextStatement","setColour","setTooltip","Object","keys","forEach","blockType","Blocks","block","definitions_","led_id","getFieldValue","state","ORDER_FUNCTION_CALL"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/src/blocks/LED_blocks.js"],"sourcesContent":["import Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\n// Define time blocks\r\nconst LEDs_blocks = {\r\n  'LEDs_update': {\r\n    init: function() {\r\n      this.appendDummyInput()\r\n          .appendField(new Blockly.FieldDropdown([\r\n            ['LED 1', '0'],\r\n            ['LED 2', '1'],\r\n            ['LED 3', '2'],\r\n            ['LED 4', '3'],\r\n            ['LED 5', '4'],\r\n            ['LED 6', '5'],\r\n            ['LED 7', '6'],\r\n            ['LED 8', '7']\r\n          ]), 'LED_ID')\r\n          .appendField('state')\r\n          .appendField(new Blockly.FieldDropdown([\r\n            ['ON', 'True'],\r\n            ['OFF', 'False']\r\n          ]), 'state');\r\n      \r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('Update LED state');\r\n    }\r\n  },\r\n  'LEDs_clear': {\r\n    init: function() {\r\n      this.appendField('clear all LEDs');\r\n      this.setPreviousStatement(true, null);\r\n      this.setNextStatement(true, null);\r\n      this.setColour(230);\r\n      this.setTooltip('Clear all LEDs');\r\n    }\r\n  }\r\n};\r\n\r\n// Register blocks\r\nObject.keys(LEDs_blocks).forEach(blockType => {\r\n  Blockly.Blocks[blockType] = LEDs_blocks[blockType];\r\n});\r\n\r\n// Register Python generators\r\npythonGenerator['LEDs_update'] = function(block) {\r\n  // Add import time to definitions\r\n  pythonGenerator.definitions_['import_LEDs'] = 'import LEDs';\r\n  \r\n  const led_id = block.getFieldValue('LED_ID');\r\n  const state = block.getFieldValue('state');\r\n  return `LEDs.update(${led_id},${state})\\n`;\r\n};\r\n\r\npythonGenerator['LEDs_clear'] = function(block) {\r\n  // Add import time to definitions\r\n  pythonGenerator.definitions_['import_LEDs'] = 'import LEDs';\r\n  \r\n  return ['LEDs.clear()', pythonGenerator.ORDER_FUNCTION_CALL];\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,OAAO,KAAM,cAAc,CAClC,MAAO,gBAAgB,CACvB,OAASC,eAAe,KAAQ,gBAAgB,CAEhD;AACA,KAAM,CAAAC,WAAW,CAAG,CAClB,aAAa,CAAE,CACbC,IAAI,CAAE,QAAAA,CAAA,CAAW,CACf,IAAI,CAACC,gBAAgB,CAAC,CAAC,CAClBC,WAAW,CAAC,GAAI,CAAAL,OAAO,CAACM,aAAa,CAAC,CACrC,CAAC,OAAO,CAAE,GAAG,CAAC,CACd,CAAC,OAAO,CAAE,GAAG,CAAC,CACd,CAAC,OAAO,CAAE,GAAG,CAAC,CACd,CAAC,OAAO,CAAE,GAAG,CAAC,CACd,CAAC,OAAO,CAAE,GAAG,CAAC,CACd,CAAC,OAAO,CAAE,GAAG,CAAC,CACd,CAAC,OAAO,CAAE,GAAG,CAAC,CACd,CAAC,OAAO,CAAE,GAAG,CAAC,CACf,CAAC,CAAE,QAAQ,CAAC,CACZD,WAAW,CAAC,OAAO,CAAC,CACpBA,WAAW,CAAC,GAAI,CAAAL,OAAO,CAACM,aAAa,CAAC,CACrC,CAAC,IAAI,CAAE,MAAM,CAAC,CACd,CAAC,KAAK,CAAE,OAAO,CAAC,CACjB,CAAC,CAAE,OAAO,CAAC,CAEhB,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAAE,IAAI,CAAC,CACrC,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAC,CACjC,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,kBAAkB,CAAC,CACrC,CACF,CAAC,CACD,YAAY,CAAE,CACZP,IAAI,CAAE,QAAAA,CAAA,CAAW,CACf,IAAI,CAACE,WAAW,CAAC,gBAAgB,CAAC,CAClC,IAAI,CAACE,oBAAoB,CAAC,IAAI,CAAE,IAAI,CAAC,CACrC,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAC,CACjC,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,gBAAgB,CAAC,CACnC,CACF,CACF,CAAC,CAED;AACAC,MAAM,CAACC,IAAI,CAACV,WAAW,CAAC,CAACW,OAAO,CAACC,SAAS,EAAI,CAC5Cd,OAAO,CAACe,MAAM,CAACD,SAAS,CAAC,CAAGZ,WAAW,CAACY,SAAS,CAAC,CACpD,CAAC,CAAC,CAEF;AACAb,eAAe,CAAC,aAAa,CAAC,CAAG,SAASe,KAAK,CAAE,CAC/C;AACAf,eAAe,CAACgB,YAAY,CAAC,aAAa,CAAC,CAAG,aAAa,CAE3D,KAAM,CAAAC,MAAM,CAAGF,KAAK,CAACG,aAAa,CAAC,QAAQ,CAAC,CAC5C,KAAM,CAAAC,KAAK,CAAGJ,KAAK,CAACG,aAAa,CAAC,OAAO,CAAC,CAC1C,MAAO,eAAeD,MAAM,IAAIE,KAAK,KAAK,CAC5C,CAAC,CAEDnB,eAAe,CAAC,YAAY,CAAC,CAAG,SAASe,KAAK,CAAE,CAC9C;AACAf,eAAe,CAACgB,YAAY,CAAC,aAAa,CAAC,CAAG,aAAa,CAE3D,MAAO,CAAC,cAAc,CAAEhB,eAAe,CAACoB,mBAAmB,CAAC,CAC9D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}