{"ast":null,"code":"import Blockly from'blockly/core';import'blockly/blocks';import{pythonGenerator}from'blockly/python';Blockly.Blocks['SEG7_ss']={init:function(){this.appendDummyInput().appendField('7 Segment Display');const input=this.appendDummyInput();input.appendField(new Blockly.FieldDropdown([['START','START'],['STOP','STOP']]),'STATE');this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(Blockly.Msg['LOGIC_HUE']);this.setTooltip(\"Start/Stop 7-segment display\");}};Blockly.Blocks['SEG7_clear']={init:function(){this.appendDummyInput().appendField(\"Clear 7-Segment Display\");this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(Blockly.Msg['LOGIC_HUE']);this.setTooltip(\"Clear all segments\");}};Blockly.Blocks['SEG7_update']={init:function(){this.appendValueInput('LED').setCheck('Number').appendField(\"Digit\");this.appendValueInput('LED').setCheck('Number').appendField(\"play number\");this.appendDummyInput().appendField(\")\");this.setInputsInline(true);this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(Blockly.Msg['LOGIC_HUE']);this.setTooltip(\"Play number (0-9) on digit (1-4)\");}};Blockly.Blocks['SEG7_dot']={init:function(){this.appendValueInput('LED').setCheck('Number').appendField(\"Dot on digit\");this.appendValueInput('MODE').setCheck('Number').appendField(\"state:\");this.setInputsInline(true);this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(Blockly.Msg['LOGIC_HUE']);this.setTooltip(\"Set dot state\");}};pythonGenerator.forBlock['SEG7_ss']=function(block){// Add import SEG7 to definitions\npythonGenerator.definitions_['import_SEG7']='import SEG7';var value=block.getFieldValue('STATE');if(value==='START'){return`SEG7.start()\\n`;}else if(value==='STOP'){return`SEG7.stop()\\n`;}};pythonGenerator.forBlock['SEG7_clear']=function(block){// Add import SEG7 to definitions\npythonGenerator.definitions_['import_SEG7']='import SEG7';return`SEG7.clear()\\n`;};pythonGenerator.forBlock['SEG7_update']=function(block){// Add import SEG7 to definitions\npythonGenerator.definitions_['import_SEG7']='import SEG7';var value=pythonGenerator.valueToCode(block,'VALUE',pythonGenerator.ORDER_ATOMIC)||'0';var led=block.getFieldValue('LED');return`SEG7.update(${value}, ${led})\\n`;};pythonGenerator.forBlock['SEG7_dot']=function(block){// Add import SEG7 to definitions\npythonGenerator.definitions_['import_SEG7']='import SEG7';var led=block.getFieldValue('LED');var mode=block.getFieldValue('MODE');return`SEG7.dot_update(${led}, ${mode})\\n`;};","map":{"version":3,"names":["Blockly","pythonGenerator","Blocks","init","appendDummyInput","appendField","input","FieldDropdown","setPreviousStatement","setNextStatement","setColour","Msg","setTooltip","appendValueInput","setCheck","setInputsInline","forBlock","block","definitions_","value","getFieldValue","valueToCode","ORDER_ATOMIC","led","mode"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/src/blocks/SEG7_blocks.js"],"sourcesContent":["import Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nBlockly.Blocks['SEG7_ss'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('7 Segment Display')\r\n    const input = this.appendDummyInput()\r\n    input.appendField(new Blockly.FieldDropdown([\r\n      ['START','START'],\r\n      ['STOP','STOP']\r\n    ]),'STATE');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(Blockly.Msg['LOGIC_HUE']);\r\n    this.setTooltip(\"Start/Stop 7-segment display\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['SEG7_clear'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Clear 7-Segment Display\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(Blockly.Msg['LOGIC_HUE']);\r\n    this.setTooltip(\"Clear all segments\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['SEG7_update'] = {\r\n  init: function() {\r\n    this.appendValueInput('LED')\r\n        .setCheck('Number')\r\n        .appendField(\"Digit\");\r\n    this.appendValueInput('LED')\r\n        .setCheck('Number')\r\n        .appendField(\"play number\");\r\n    this.appendDummyInput()\r\n        .appendField(\")\");\r\n    this.setInputsInline(true);\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(Blockly.Msg['LOGIC_HUE']);\r\n    this.setTooltip(\"Play number (0-9) on digit (1-4)\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['SEG7_dot'] = {\r\n  init: function() {\r\n    this.appendValueInput('LED')\r\n        .setCheck('Number')\r\n        .appendField(\"Dot on digit\")\r\n    this.appendValueInput('MODE')\r\n        .setCheck('Number')\r\n        .appendField(\"state:\");\r\n    this.setInputsInline(true);\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(Blockly.Msg['LOGIC_HUE']);\r\n    this.setTooltip(\"Set dot state\");\r\n  }\r\n};\r\n\r\npythonGenerator.forBlock['SEG7_ss'] = function(block) {\r\n  // Add import SEG7 to definitions\r\n  pythonGenerator.definitions_['import_SEG7'] = 'import SEG7';\r\n\r\n  var value = block.getFieldValue('STATE');\r\n  if (value === 'START') {\r\n    return `SEG7.start()\\n`;\r\n  } else if (value === 'STOP') {\r\n    return `SEG7.stop()\\n`;\r\n  }\r\n};\r\n\r\n\r\n\r\npythonGenerator.forBlock['SEG7_clear'] = function(block) {\r\n  // Add import SEG7 to definitions\r\n  pythonGenerator.definitions_['import_SEG7'] = 'import SEG7';\r\n  return `SEG7.clear()\\n`;\r\n};\r\n\r\npythonGenerator.forBlock['SEG7_update'] = function(block) {\r\n  // Add import SEG7 to definitions\r\n  pythonGenerator.definitions_['import_SEG7'] = 'import SEG7';\r\n  var value = pythonGenerator.valueToCode(block, 'VALUE', pythonGenerator.ORDER_ATOMIC) || '0';\r\n  var led = block.getFieldValue('LED');\r\n  return `SEG7.update(${value}, ${led})\\n`;\r\n};\r\n\r\npythonGenerator.forBlock['SEG7_dot'] = function(block) {\r\n  // Add import SEG7 to definitions\r\n  pythonGenerator.definitions_['import_SEG7'] = 'import SEG7';\r\n  var led = block.getFieldValue('LED');\r\n  var mode = block.getFieldValue('MODE');\r\n  return `SEG7.dot_update(${led}, ${mode})\\n`;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}