{"ast":null,"code":"// Do not edit this file; automatically generated.\n\n/* eslint-disable */\n;\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([\"./blockly_compressed.js\"], factory);\n  } else if (typeof exports === 'object') {\n    // Node.js\n    module.exports = factory(require(\"./blockly_compressed.js\"));\n  } else {\n    // Script\n    root.python = factory(root.Blockly);\n    root.Blockly.Python = root.python.pythonGenerator;\n  }\n})(this, function (__parent__) {\n  var $ = __parent__.__namespace__;\n  var colour_picker$$module$build$src$generators$python$colour = function (a, b) {\n      return [b.quote_(a.getFieldValue(\"COLOUR\")), Order$$module$build$src$generators$python$python_generator.ATOMIC];\n    },\n    colour_random$$module$build$src$generators$python$colour = function (a, b) {\n      b.definitions_.import_random = \"import random\";\n      return [\"'#%06x' % random.randint(0, 2**24 - 1)\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    colour_rgb$$module$build$src$generators$python$colour = function (a, b) {\n      const c = b.provideFunction_(\"colour_rgb\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(r, g, b):\n  r = round(min(100, max(0, r)) * 2.55)\n  g = round(min(100, max(0, g)) * 2.55)\n  b = round(min(100, max(0, b)) * 2.55)\n  return '#%02x%02x%02x' % (r, g, b)\n`),\n        d = b.valueToCode(a, \"RED\", Order$$module$build$src$generators$python$python_generator.NONE) || 0,\n        e = b.valueToCode(a, \"GREEN\", Order$$module$build$src$generators$python$python_generator.NONE) || 0;\n      a = b.valueToCode(a, \"BLUE\", Order$$module$build$src$generators$python$python_generator.NONE) || 0;\n      return [c + \"(\" + d + \", \" + e + \", \" + a + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    colour_blend$$module$build$src$generators$python$colour = function (a, b) {\n      const c = b.provideFunction_(\"colour_blend\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio):\n  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\n  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\n  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\n  ratio = min(1, max(0, ratio))\n  r = round(r1 * (1 - ratio) + r2 * ratio)\n  g = round(g1 * (1 - ratio) + g2 * ratio)\n  b = round(b1 * (1 - ratio) + b2 * ratio)\n  return '#%02x%02x%02x' % (r, g, b)\n`),\n        d = b.valueToCode(a, \"COLOUR1\", Order$$module$build$src$generators$python$python_generator.NONE) || \"'#000000'\",\n        e = b.valueToCode(a, \"COLOUR2\", Order$$module$build$src$generators$python$python_generator.NONE) || \"'#000000'\";\n      a = b.valueToCode(a, \"RATIO\", Order$$module$build$src$generators$python$python_generator.NONE) || 0;\n      return [c + \"(\" + d + \", \" + e + \", \" + a + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    lists_create_empty$$module$build$src$generators$python$lists = function (a, b) {\n      return [\"[]\", Order$$module$build$src$generators$python$python_generator.ATOMIC];\n    },\n    lists_create_with$$module$build$src$generators$python$lists = function (a, b) {\n      const c = Array(a.itemCount_);\n      for (let d = 0; d < a.itemCount_; d++) c[d] = b.valueToCode(a, \"ADD\" + d, Order$$module$build$src$generators$python$python_generator.NONE) || \"None\";\n      return [\"[\" + c.join(\", \") + \"]\", Order$$module$build$src$generators$python$python_generator.ATOMIC];\n    },\n    lists_repeat$$module$build$src$generators$python$lists = function (a, b) {\n      const c = b.valueToCode(a, \"ITEM\", Order$$module$build$src$generators$python$python_generator.NONE) || \"None\";\n      a = b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE) || \"0\";\n      return [\"[\" + c + \"] * \" + a, Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE];\n    },\n    lists_length$$module$build$src$generators$python$lists = function (a, b) {\n      return [\"len(\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$python$python_generator.NONE) || \"[]\") + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    lists_isEmpty$$module$build$src$generators$python$lists = function (a, b) {\n      return [\"not len(\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$python$python_generator.NONE) || \"[]\") + \")\", Order$$module$build$src$generators$python$python_generator.LOGICAL_NOT];\n    },\n    lists_indexOf$$module$build$src$generators$python$lists = function (a, b) {\n      const c = b.valueToCode(a, \"FIND\", Order$$module$build$src$generators$python$python_generator.NONE) || \"[]\",\n        d = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n      let e = \" -1\",\n        f = \"\",\n        g = \" - 1\";\n      a.workspace.options.oneBasedIndex && (e = \" 0\", f = \" + 1\", g = \"\");\n      return [(\"FIRST\" === a.getFieldValue(\"END\") ? b.provideFunction_(\"first_index\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = my_list.index(elem)${f}\n  except: index =${e}\n  return index\n`) : b.provideFunction_(\"last_index\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = len(my_list) - my_list[::-1].index(elem)${g}\n  except: index =${e}\n  return index\n`)) + \"(\" + d + \", \" + c + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    lists_getIndex$$module$build$src$generators$python$lists = function (a, b) {\n      const c = a.getFieldValue(\"MODE\") || \"GET\",\n        d = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n      var e = b.valueToCode(a, \"VALUE\", \"RANDOM\" === d ? Order$$module$build$src$generators$python$python_generator.NONE : Order$$module$build$src$generators$python$python_generator.MEMBER) || \"[]\";\n      switch (d) {\n        case \"FIRST\":\n          if (\"GET\" === c) return [e + \"[0]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".pop(0)\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".pop(0)\\n\";\n          break;\n        case \"LAST\":\n          if (\"GET\" === c) return [e + \"[-1]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".pop()\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".pop()\\n\";\n          break;\n        case \"FROM_START\":\n          a = b.getAdjustedInt(a, \"AT\");\n          if (\"GET\" === c) return [e + \"[\" + a + \"]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".pop(\" + a + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".pop(\" + a + \")\\n\";\n          break;\n        case \"FROM_END\":\n          a = b.getAdjustedInt(a, \"AT\", 1, !0);\n          if (\"GET\" === c) return [e + \"[\" + a + \"]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".pop(\" + a + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".pop(\" + a + \")\\n\";\n          break;\n        case \"RANDOM\":\n          b.definitions_.import_random = \"import random\";\n          if (\"GET\" === c) return [\"random.choice(\" + e + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n          e = b.provideFunction_(\"lists_remove_random_item\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  x = int(random.random() * len(myList))\n  return myList.pop(x)\n`) + \"(\" + e + \")\";\n          if (\"GET_REMOVE\" === c) return [e, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \"\\n\";\n      }\n      throw Error(\"Unhandled combination (lists_getIndex).\");\n    },\n    lists_setIndex$$module$build$src$generators$python$lists = function (a, b) {\n      let c = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"[]\";\n      const d = a.getFieldValue(\"MODE\") || \"GET\";\n      var e = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n      const f = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$python$python_generator.NONE) || \"None\";\n      switch (e) {\n        case \"FIRST\":\n          if (\"SET\" === d) return c + \"[0] = \" + f + \"\\n\";\n          if (\"INSERT\" === d) return c + \".insert(0, \" + f + \")\\n\";\n          break;\n        case \"LAST\":\n          if (\"SET\" === d) return c + \"[-1] = \" + f + \"\\n\";\n          if (\"INSERT\" === d) return c + \".append(\" + f + \")\\n\";\n          break;\n        case \"FROM_START\":\n          b = b.getAdjustedInt(a, \"AT\");\n          if (\"SET\" === d) return c + \"[\" + b + \"] = \" + f + \"\\n\";\n          if (\"INSERT\" === d) return c + \".insert(\" + b + \", \" + f + \")\\n\";\n          break;\n        case \"FROM_END\":\n          b = b.getAdjustedInt(a, \"AT\", 1, !0);\n          if (\"SET\" === d) return c + \"[\" + b + \"] = \" + f + \"\\n\";\n          if (\"INSERT\" === d) return c + \".insert(\" + b + \", \" + f + \")\\n\";\n          break;\n        case \"RANDOM\":\n          b.definitions_.import_random = \"import random\";\n          c.match(/^\\w+$/) ? a = \"\" : (a = b.nameDB_.getDistinctName(\"tmp_list\", $.NameType$$module$build$src$core$names.VARIABLE), e = a + \" = \" + c + \"\\n\", c = a, a = e);\n          b = b.nameDB_.getDistinctName(\"tmp_x\", $.NameType$$module$build$src$core$names.VARIABLE);\n          a += b + \" = int(random.random() * len(\" + c + \"))\\n\";\n          if (\"SET\" === d) return a + (c + \"[\" + b + \"] = \" + f + \"\\n\");\n          if (\"INSERT\" === d) return a + (c + \".insert(\" + b + \", \" + f + \")\\n\");\n      }\n      throw Error(\"Unhandled combination (lists_setIndex).\");\n    },\n    lists_getSublist$$module$build$src$generators$python$lists = function (a, b) {\n      const c = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"[]\";\n      var d = a.getFieldValue(\"WHERE1\");\n      const e = a.getFieldValue(\"WHERE2\");\n      switch (d) {\n        case \"FROM_START\":\n          d = b.getAdjustedInt(a, \"AT1\");\n          0 === d && (d = \"\");\n          break;\n        case \"FROM_END\":\n          d = b.getAdjustedInt(a, \"AT1\", 1, !0);\n          break;\n        case \"FIRST\":\n          d = \"\";\n          break;\n        default:\n          throw Error(\"Unhandled option (lists_getSublist)\");\n      }\n      switch (e) {\n        case \"FROM_START\":\n          a = b.getAdjustedInt(a, \"AT2\", 1);\n          break;\n        case \"FROM_END\":\n          a = b.getAdjustedInt(a, \"AT2\", 0, !0);\n          $.isNumber$$module$build$src$core$utils$string(String(a)) ? 0 === a && (a = \"\") : (b.definitions_.import_sys = \"import sys\", a += \" or sys.maxsize\");\n          break;\n        case \"LAST\":\n          a = \"\";\n          break;\n        default:\n          throw Error(\"Unhandled option (lists_getSublist)\");\n      }\n      return [c + \"[\" + d + \" : \" + a + \"]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n    },\n    lists_sort$$module$build$src$generators$python$lists = function (a, b) {\n      const c = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$python$python_generator.NONE) || \"[]\",\n        d = a.getFieldValue(\"TYPE\");\n      a = \"1\" === a.getFieldValue(\"DIRECTION\") ? \"False\" : \"True\";\n      return [b.provideFunction_(\"lists_sort\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(my_list, type, reverse):\n  def try_float(s):\n    try:\n      return float(s)\n    except:\n      return 0\n  key_funcs = {\n    \"NUMERIC\": try_float,\n    \"TEXT\": str,\n    \"IGNORE_CASE\": lambda s: str(s).lower()\n  }\n  key_func = key_funcs[type]\n  list_cpy = list(my_list)\n  return sorted(list_cpy, key=key_func, reverse=reverse)\n`) + \"(\" + c + ', \"' + d + '\", ' + a + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    lists_split$$module$build$src$generators$python$lists = function (a, b) {\n      var c = a.getFieldValue(\"MODE\");\n      if (\"SPLIT\" === c) c = b.valueToCode(a, \"INPUT\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\", a = b.valueToCode(a, \"DELIM\", Order$$module$build$src$generators$python$python_generator.NONE), a = c + \".split(\" + a + \")\";else if (\"JOIN\" === c) c = b.valueToCode(a, \"INPUT\", Order$$module$build$src$generators$python$python_generator.NONE) || \"[]\", a = (b.valueToCode(a, \"DELIM\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\") + \".join(\" + c + \")\";else throw Error(\"Unknown mode: \" + c);\n      return [a, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    lists_reverse$$module$build$src$generators$python$lists = function (a, b) {\n      return [\"list(reversed(\" + (b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$python$python_generator.NONE) || \"[]\") + \"))\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    controls_if$$module$build$src$generators$python$logic = function (a, b) {\n      let c = 0,\n        d = \"\",\n        e,\n        f;\n      b.STATEMENT_PREFIX && (d += b.injectId(b.STATEMENT_PREFIX, a));\n      do f = b.valueToCode(a, \"IF\" + c, Order$$module$build$src$generators$python$python_generator.NONE) || \"False\", e = b.statementToCode(a, \"DO\" + c) || b.PASS, b.STATEMENT_SUFFIX && (e = b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT) + e), d += (0 === c ? \"if \" : \"elif \") + f + \":\\n\" + e, c++; while (a.getInput(\"IF\" + c));\n      if (a.getInput(\"ELSE\") || b.STATEMENT_SUFFIX) e = b.statementToCode(a, \"ELSE\") || b.PASS, b.STATEMENT_SUFFIX && (e = b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT) + e), d += \"else:\\n\" + e;\n      return d;\n    },\n    logic_compare$$module$build$src$generators$python$logic = function (a, b) {\n      const c = {\n          EQ: \"==\",\n          NEQ: \"!=\",\n          LT: \"<\",\n          LTE: \"<=\",\n          GT: \">\",\n          GTE: \">=\"\n        }[a.getFieldValue(\"OP\")],\n        d = Order$$module$build$src$generators$python$python_generator.RELATIONAL,\n        e = b.valueToCode(a, \"A\", d) || \"0\";\n      a = b.valueToCode(a, \"B\", d) || \"0\";\n      return [e + \" \" + c + \" \" + a, d];\n    },\n    logic_operation$$module$build$src$generators$python$logic = function (a, b) {\n      const c = \"AND\" === a.getFieldValue(\"OP\") ? \"and\" : \"or\",\n        d = \"and\" === c ? Order$$module$build$src$generators$python$python_generator.LOGICAL_AND : Order$$module$build$src$generators$python$python_generator.LOGICAL_OR;\n      let e = b.valueToCode(a, \"A\", d);\n      a = b.valueToCode(a, \"B\", d);\n      e || a ? (b = \"and\" === c ? \"True\" : \"False\", e || (e = b), a || (a = b)) : a = e = \"False\";\n      return [e + \" \" + c + \" \" + a, d];\n    },\n    logic_negate$$module$build$src$generators$python$logic = function (a, b) {\n      return [\"not \" + (b.valueToCode(a, \"BOOL\", Order$$module$build$src$generators$python$python_generator.LOGICAL_NOT) || \"True\"), Order$$module$build$src$generators$python$python_generator.LOGICAL_NOT];\n    },\n    logic_boolean$$module$build$src$generators$python$logic = function (a, b) {\n      return [\"TRUE\" === a.getFieldValue(\"BOOL\") ? \"True\" : \"False\", Order$$module$build$src$generators$python$python_generator.ATOMIC];\n    },\n    logic_null$$module$build$src$generators$python$logic = function (a, b) {\n      return [\"None\", Order$$module$build$src$generators$python$python_generator.ATOMIC];\n    },\n    logic_ternary$$module$build$src$generators$python$logic = function (a, b) {\n      const c = b.valueToCode(a, \"IF\", Order$$module$build$src$generators$python$python_generator.CONDITIONAL) || \"False\",\n        d = b.valueToCode(a, \"THEN\", Order$$module$build$src$generators$python$python_generator.CONDITIONAL) || \"None\";\n      a = b.valueToCode(a, \"ELSE\", Order$$module$build$src$generators$python$python_generator.CONDITIONAL) || \"None\";\n      return [d + \" if \" + c + \" else \" + a, Order$$module$build$src$generators$python$python_generator.CONDITIONAL];\n    },\n    controls_repeat_ext$$module$build$src$generators$python$loops = function (a, b) {\n      let c;\n      c = a.getField(\"TIMES\") ? String(parseInt(a.getFieldValue(\"TIMES\"), 10)) : b.valueToCode(a, \"TIMES\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\";\n      c = $.isNumber$$module$build$src$core$utils$string(c) ? parseInt(c, 10) : \"int(\" + c + \")\";\n      let d = b.statementToCode(a, \"DO\");\n      d = b.addLoopTrap(d, a) || b.PASS;\n      return \"for \" + b.nameDB_.getDistinctName(\"count\", $.NameType$$module$build$src$core$names.VARIABLE) + \" in range(\" + c + \"):\\n\" + d;\n    },\n    controls_whileUntil$$module$build$src$generators$python$loops = function (a, b) {\n      const c = \"UNTIL\" === a.getFieldValue(\"MODE\");\n      let d = b.valueToCode(a, \"BOOL\", c ? Order$$module$build$src$generators$python$python_generator.LOGICAL_NOT : Order$$module$build$src$generators$python$python_generator.NONE) || \"False\",\n        e = b.statementToCode(a, \"DO\");\n      e = b.addLoopTrap(e, a) || b.PASS;\n      c && (d = \"not \" + d);\n      return \"while \" + d + \":\\n\" + e;\n    },\n    controls_for$$module$build$src$generators$python$loops = function (a, b) {\n      const c = b.getVariableName(a.getFieldValue(\"VAR\"));\n      var d = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\",\n        e = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\",\n        f = b.valueToCode(a, \"BY\", Order$$module$build$src$generators$python$python_generator.NONE) || \"1\";\n      let g = b.statementToCode(a, \"DO\");\n      g = b.addLoopTrap(g, a) || b.PASS;\n      let h = \"\";\n      a = function () {\n        return b.provideFunction_(\"upRange\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start <= stop:\n    yield start\n    start += abs(step)\n`);\n      };\n      const k = function () {\n        return b.provideFunction_(\"downRange\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start >= stop:\n    yield start\n    start -= abs(step)\n`);\n      };\n      if ($.isNumber$$module$build$src$core$utils$string(d) && $.isNumber$$module$build$src$core$utils$string(e) && $.isNumber$$module$build$src$core$utils$string(f)) d = Number(d), e = Number(e), f = Math.abs(Number(f)), 0 === d % 1 && 0 === e % 1 && 0 === f % 1 ? (d <= e ? (e++, a = 0 === d && 1 === f ? e : d + \", \" + e, 1 !== f && (a += \", \" + f)) : (e--, a = d + \", \" + e + \", -\" + f), a = \"range(\" + a + \")\") : (a = d < e ? a() : k(), a += \"(\" + d + \", \" + e + \", \" + f + \")\");else {\n        const l = function (m, n) {\n          $.isNumber$$module$build$src$core$utils$string(m) ? m = String(Number(m)) : m.match(/^\\w+$/) || (n = b.nameDB_.getDistinctName(c + n, $.NameType$$module$build$src$core$names.VARIABLE), h += n + \" = \" + m + \"\\n\", m = n);\n          return m;\n        };\n        d = l(d, \"_start\");\n        e = l(e, \"_end\");\n        f = l(f, \"_inc\");\n        \"number\" === typeof d && \"number\" === typeof e ? (a = d < e ? a() : k(), a += \"(\" + d + \", \" + e + \", \" + f + \")\") : a = \"(\" + d + \" <= \" + e + \") and \" + a() + \"(\" + d + \", \" + e + \", \" + f + \") or \" + k() + \"(\" + d + \", \" + e + \", \" + f + \")\";\n      }\n      return h += \"for \" + c + \" in \" + a + \":\\n\" + g;\n    },\n    controls_forEach$$module$build$src$generators$python$loops = function (a, b) {\n      const c = b.getVariableName(a.getFieldValue(\"VAR\")),\n        d = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$python$python_generator.RELATIONAL) || \"[]\";\n      let e = b.statementToCode(a, \"DO\");\n      e = b.addLoopTrap(e, a) || b.PASS;\n      return \"for \" + c + \" in \" + d + \":\\n\" + e;\n    },\n    controls_flow_statements$$module$build$src$generators$python$loops = function (a, b) {\n      let c = \"\";\n      b.STATEMENT_PREFIX && (c += b.injectId(b.STATEMENT_PREFIX, a));\n      b.STATEMENT_SUFFIX && (c += b.injectId(b.STATEMENT_SUFFIX, a));\n      if (b.STATEMENT_PREFIX) {\n        const d = a.getSurroundLoop();\n        d && !d.suppressPrefixSuffix && (c += b.injectId(b.STATEMENT_PREFIX, d));\n      }\n      switch (a.getFieldValue(\"FLOW\")) {\n        case \"BREAK\":\n          return c + \"break\\n\";\n        case \"CONTINUE\":\n          return c + \"continue\\n\";\n      }\n      throw Error(\"Unknown flow statement.\");\n    },\n    math_number$$module$build$src$generators$python$math = function (a, b) {\n      a = Number(a.getFieldValue(\"NUM\"));\n      return Infinity === a ? ['float(\"inf\")', Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL] : -Infinity === a ? ['-float(\"inf\")', Order$$module$build$src$generators$python$python_generator.UNARY_SIGN] : [String(a), 0 > a ? Order$$module$build$src$generators$python$python_generator.UNARY_SIGN : Order$$module$build$src$generators$python$python_generator.ATOMIC];\n    },\n    math_arithmetic$$module$build$src$generators$python$math = function (a, b) {\n      var c = {\n        ADD: [\" + \", Order$$module$build$src$generators$python$python_generator.ADDITIVE],\n        MINUS: [\" - \", Order$$module$build$src$generators$python$python_generator.ADDITIVE],\n        MULTIPLY: [\" * \", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE],\n        DIVIDE: [\" / \", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE],\n        POWER: [\" ** \", Order$$module$build$src$generators$python$python_generator.EXPONENTIATION]\n      }[a.getFieldValue(\"OP\")];\n      const d = c[0];\n      c = c[1];\n      const e = b.valueToCode(a, \"A\", c) || \"0\";\n      a = b.valueToCode(a, \"B\", c) || \"0\";\n      return [e + d + a, c];\n    },\n    math_single$$module$build$src$generators$python$math = function (a, b) {\n      const c = a.getFieldValue(\"OP\");\n      let d;\n      if (\"NEG\" === c) return d = b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$python$python_generator.UNARY_SIGN) || \"0\", [\"-\" + d, Order$$module$build$src$generators$python$python_generator.UNARY_SIGN];\n      b.definitions_.import_math = \"import math\";\n      a = \"SIN\" === c || \"COS\" === c || \"TAN\" === c ? b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE) || \"0\" : b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\";\n      switch (c) {\n        case \"ABS\":\n          d = \"math.fabs(\" + a + \")\";\n          break;\n        case \"ROOT\":\n          d = \"math.sqrt(\" + a + \")\";\n          break;\n        case \"LN\":\n          d = \"math.log(\" + a + \")\";\n          break;\n        case \"LOG10\":\n          d = \"math.log10(\" + a + \")\";\n          break;\n        case \"EXP\":\n          d = \"math.exp(\" + a + \")\";\n          break;\n        case \"POW10\":\n          d = \"math.pow(10,\" + a + \")\";\n          break;\n        case \"ROUND\":\n          d = \"round(\" + a + \")\";\n          break;\n        case \"ROUNDUP\":\n          d = \"math.ceil(\" + a + \")\";\n          break;\n        case \"ROUNDDOWN\":\n          d = \"math.floor(\" + a + \")\";\n          break;\n        case \"SIN\":\n          d = \"math.sin(\" + a + \" / 180.0 * math.pi)\";\n          break;\n        case \"COS\":\n          d = \"math.cos(\" + a + \" / 180.0 * math.pi)\";\n          break;\n        case \"TAN\":\n          d = \"math.tan(\" + a + \" / 180.0 * math.pi)\";\n      }\n      if (d) return [d, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n      switch (c) {\n        case \"ASIN\":\n          d = \"math.asin(\" + a + \") / math.pi * 180\";\n          break;\n        case \"ACOS\":\n          d = \"math.acos(\" + a + \") / math.pi * 180\";\n          break;\n        case \"ATAN\":\n          d = \"math.atan(\" + a + \") / math.pi * 180\";\n          break;\n        default:\n          throw Error(\"Unknown math operator: \" + c);\n      }\n      return [d, Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE];\n    },\n    math_constant$$module$build$src$generators$python$math = function (a, b) {\n      const c = {\n        PI: [\"math.pi\", Order$$module$build$src$generators$python$python_generator.MEMBER],\n        E: [\"math.e\", Order$$module$build$src$generators$python$python_generator.MEMBER],\n        GOLDEN_RATIO: [\"(1 + math.sqrt(5)) / 2\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE],\n        SQRT2: [\"math.sqrt(2)\", Order$$module$build$src$generators$python$python_generator.MEMBER],\n        SQRT1_2: [\"math.sqrt(1.0 / 2)\", Order$$module$build$src$generators$python$python_generator.MEMBER],\n        INFINITY: [\"float('inf')\", Order$$module$build$src$generators$python$python_generator.ATOMIC]\n      };\n      a = a.getFieldValue(\"CONSTANT\");\n      \"INFINITY\" !== a && (b.definitions_.import_math = \"import math\");\n      return c[a];\n    },\n    math_number_property$$module$build$src$generators$python$math = function (a, b) {\n      var c = {\n        EVEN: [\" % 2 == 0\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE, Order$$module$build$src$generators$python$python_generator.RELATIONAL],\n        ODD: [\" % 2 == 1\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE, Order$$module$build$src$generators$python$python_generator.RELATIONAL],\n        WHOLE: [\" % 1 == 0\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE, Order$$module$build$src$generators$python$python_generator.RELATIONAL],\n        POSITIVE: [\" > 0\", Order$$module$build$src$generators$python$python_generator.RELATIONAL, Order$$module$build$src$generators$python$python_generator.RELATIONAL],\n        NEGATIVE: [\" < 0\", Order$$module$build$src$generators$python$python_generator.RELATIONAL, Order$$module$build$src$generators$python$python_generator.RELATIONAL],\n        DIVISIBLE_BY: [null, Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE, Order$$module$build$src$generators$python$python_generator.RELATIONAL],\n        PRIME: [null, Order$$module$build$src$generators$python$python_generator.NONE, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL]\n      };\n      const d = a.getFieldValue(\"PROPERTY\"),\n        [e, f, g] = c[d];\n      c = b.valueToCode(a, \"NUMBER_TO_CHECK\", f) || \"0\";\n      if (\"PRIME\" === d) b.definitions_.import_math = \"import math\", b.definitions_.from_numbers_import_Number = \"from numbers import Number\", a = b.provideFunction_(\"math_isPrime\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(n):\n  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  # If n is not a number but a string, try parsing it.\n  if not isinstance(n, Number):\n    try:\n      n = float(n)\n    except:\n      return False\n  if n == 2 or n == 3:\n    return True\n  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\n  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\n    return False\n  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for x in range(6, int(math.sqrt(n)) + 2, 6):\n    if n % (x - 1) == 0 or n % (x + 1) == 0:\n      return False\n  return True\n`) + \"(\" + c + \")\";else if (\"DIVISIBLE_BY\" === d) {\n        a = b.valueToCode(a, \"DIVISOR\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE) || \"0\";\n        if (\"0\" === a) return [\"False\", Order$$module$build$src$generators$python$python_generator.ATOMIC];\n        a = c + \" % \" + a + \" == 0\";\n      } else a = c + e;\n      return [a, g];\n    },\n    math_change$$module$build$src$generators$python$math = function (a, b) {\n      b.definitions_.from_numbers_import_Number = \"from numbers import Number\";\n      const c = b.valueToCode(a, \"DELTA\", Order$$module$build$src$generators$python$python_generator.ADDITIVE) || \"0\";\n      a = b.getVariableName(a.getFieldValue(\"VAR\"));\n      return a + \" = (\" + a + \" if isinstance(\" + a + \", Number) else 0) + \" + c + \"\\n\";\n    },\n    math_on_list$$module$build$src$generators$python$math = function (a, b) {\n      const c = a.getFieldValue(\"OP\");\n      a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$python$python_generator.NONE) || \"[]\";\n      switch (c) {\n        case \"SUM\":\n          b = \"sum(\" + a + \")\";\n          break;\n        case \"MIN\":\n          b = \"min(\" + a + \")\";\n          break;\n        case \"MAX\":\n          b = \"max(\" + a + \")\";\n          break;\n        case \"AVERAGE\":\n          b.definitions_.from_numbers_import_Number = \"from numbers import Number\";\n          b = b.provideFunction_(\"math_mean\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = [e for e in myList if isinstance(e, Number)]\n  if not localList: return\n  return float(sum(localList)) / len(localList)\n`) + \"(\" + a + \")\";\n          break;\n        case \"MEDIAN\":\n          b.definitions_.from_numbers_import_Number = \"from numbers import Number\";\n          b = b.provideFunction_(\"math_median\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = sorted([e for e in myList if isinstance(e, Number)])\n  if not localList: return\n  if len(localList) % 2 == 0:\n    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\n  else:\n    return localList[(len(localList) - 1) // 2]\n`) + \"(\" + a + \")\";\n          break;\n        case \"MODE\":\n          b = b.provideFunction_(\"math_modes\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(some_list):\n  modes = []\n  # Using a lists of [item, count] to keep count rather than dict\n  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.\n  counts = []\n  maxCount = 1\n  for item in some_list:\n    found = False\n    for count in counts:\n      if count[0] == item:\n        count[1] += 1\n        maxCount = max(maxCount, count[1])\n        found = True\n    if not found:\n      counts.append([item, 1])\n  for counted_item, item_count in counts:\n    if item_count == maxCount:\n      modes.append(counted_item)\n  return modes\n`) + \"(\" + a + \")\";\n          break;\n        case \"STD_DEV\":\n          b.definitions_.import_math = \"import math\";\n          b = b.provideFunction_(\"math_standard_deviation\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(numbers):\n  n = len(numbers)\n  if n == 0: return\n  mean = float(sum(numbers)) / n\n  variance = sum((x - mean) ** 2 for x in numbers) / n\n  return math.sqrt(variance)\n`) + \"(\" + a + \")\";\n          break;\n        case \"RANDOM\":\n          b.definitions_.import_random = \"import random\";\n          b = \"random.choice(\" + a + \")\";\n          break;\n        default:\n          throw Error(\"Unknown operator: \" + c);\n      }\n      return [b, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    math_modulo$$module$build$src$generators$python$math = function (a, b) {\n      const c = b.valueToCode(a, \"DIVIDEND\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE) || \"0\";\n      a = b.valueToCode(a, \"DIVISOR\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE) || \"0\";\n      return [c + \" % \" + a, Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE];\n    },\n    math_constrain$$module$build$src$generators$python$math = function (a, b) {\n      const c = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\",\n        d = b.valueToCode(a, \"LOW\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\";\n      a = b.valueToCode(a, \"HIGH\", Order$$module$build$src$generators$python$python_generator.NONE) || \"float('inf')\";\n      return [\"min(max(\" + c + \", \" + d + \"), \" + a + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    math_random_int$$module$build$src$generators$python$math = function (a, b) {\n      b.definitions_.import_random = \"import random\";\n      const c = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\";\n      a = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\";\n      return [\"random.randint(\" + c + \", \" + a + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    math_random_float$$module$build$src$generators$python$math = function (a, b) {\n      b.definitions_.import_random = \"import random\";\n      return [\"random.random()\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    math_atan2$$module$build$src$generators$python$math = function (a, b) {\n      b.definitions_.import_math = \"import math\";\n      const c = b.valueToCode(a, \"X\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\";\n      return [\"math.atan2(\" + (b.valueToCode(a, \"Y\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\") + \", \" + c + \") / math.pi * 180\", Order$$module$build$src$generators$python$python_generator.MULTIPLICATIVE];\n    },\n    procedures_defreturn$$module$build$src$generators$python$procedures = function (a, b) {\n      var c = [],\n        d = a.workspace,\n        e = $.allUsedVarModels$$module$build$src$core$variables(d) || [];\n      for (var f of e) e = f.name, -1 === a.getVars().indexOf(e) && c.push(b.getVariableName(e));\n      d = $.allDeveloperVariables$$module$build$src$core$variables(d);\n      for (f = 0; f < d.length; f++) c.push(b.nameDB_.getName(d[f], $.NameType$$module$build$src$core$names.DEVELOPER_VARIABLE));\n      d = c.length ? b.INDENT + \"global \" + c.join(\", \") + \"\\n\" : \"\";\n      c = b.getProcedureName(a.getFieldValue(\"NAME\"));\n      f = \"\";\n      b.STATEMENT_PREFIX && (f += b.injectId(b.STATEMENT_PREFIX, a));\n      b.STATEMENT_SUFFIX && (f += b.injectId(b.STATEMENT_SUFFIX, a));\n      f && (f = b.prefixLines(f, b.INDENT));\n      e = \"\";\n      b.INFINITE_LOOP_TRAP && (e = b.prefixLines(b.injectId(b.INFINITE_LOOP_TRAP, a), b.INDENT));\n      let g = b.statementToCode(a, \"STACK\"),\n        h = b.valueToCode(a, \"RETURN\", Order$$module$build$src$generators$python$python_generator.NONE) || \"\",\n        k = \"\";\n      g && h && (k = f);\n      h ? h = b.INDENT + \"return \" + h + \"\\n\" : g || (g = b.PASS);\n      const l = [],\n        m = a.getVars();\n      for (let n = 0; n < m.length; n++) l[n] = b.getVariableName(m[n]);\n      d = \"def \" + c + \"(\" + l.join(\", \") + \"):\\n\" + d + f + e + g + k + h;\n      d = b.scrub_(a, d);\n      b.definitions_[\"%\" + c] = d;\n      return null;\n    },\n    procedures_callreturn$$module$build$src$generators$python$procedures = function (a, b) {\n      const c = b.getProcedureName(a.getFieldValue(\"NAME\")),\n        d = [],\n        e = a.getVars();\n      for (let f = 0; f < e.length; f++) d[f] = b.valueToCode(a, \"ARG\" + f, Order$$module$build$src$generators$python$python_generator.NONE) || \"None\";\n      return [c + \"(\" + d.join(\", \") + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    procedures_callnoreturn$$module$build$src$generators$python$procedures = function (a, b) {\n      return b.forBlock.procedures_callreturn(a, b)[0] + \"\\n\";\n    },\n    procedures_ifreturn$$module$build$src$generators$python$procedures = function (a, b) {\n      let c = \"if \" + (b.valueToCode(a, \"CONDITION\", Order$$module$build$src$generators$python$python_generator.NONE) || \"False\") + \":\\n\";\n      b.STATEMENT_SUFFIX && (c += b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT));\n      a.hasReturnValue_ ? (a = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$python$python_generator.NONE) || \"None\", c += b.INDENT + \"return \" + a + \"\\n\") : c += b.INDENT + \"return\\n\";\n      return c;\n    },\n    text$$module$build$src$generators$python$text = function (a, b) {\n      return [b.quote_(a.getFieldValue(\"TEXT\")), Order$$module$build$src$generators$python$python_generator.ATOMIC];\n    },\n    text_multiline$$module$build$src$generators$python$text = function (a, b) {\n      a = b.multiline_quote_(a.getFieldValue(\"TEXT\"));\n      b = -1 !== a.indexOf(\"+\") ? Order$$module$build$src$generators$python$python_generator.ADDITIVE : Order$$module$build$src$generators$python$python_generator.ATOMIC;\n      return [a, b];\n    },\n    text_join$$module$build$src$generators$python$text = function (a, b) {\n      switch (a.itemCount_) {\n        case 0:\n          return [\"''\", Order$$module$build$src$generators$python$python_generator.ATOMIC];\n        case 1:\n          return a = b.valueToCode(a, \"ADD0\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\", forceString$$module$build$src$generators$python$text(a);\n        case 2:\n          var c = b.valueToCode(a, \"ADD0\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n          a = b.valueToCode(a, \"ADD1\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n          return [forceString$$module$build$src$generators$python$text(c)[0] + \" + \" + forceString$$module$build$src$generators$python$text(a)[0], Order$$module$build$src$generators$python$python_generator.ADDITIVE];\n        default:\n          c = [];\n          for (let d = 0; d < a.itemCount_; d++) c[d] = b.valueToCode(a, \"ADD\" + d, Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n          a = b.nameDB_.getDistinctName(\"x\", $.NameType$$module$build$src$core$names.VARIABLE);\n          return [\"''.join([str(\" + a + \") for \" + a + \" in [\" + c.join(\", \") + \"]])\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n      }\n    },\n    text_append$$module$build$src$generators$python$text = function (a, b) {\n      const c = b.getVariableName(a.getFieldValue(\"VAR\"));\n      a = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n      return c + \" = str(\" + c + \") + \" + forceString$$module$build$src$generators$python$text(a)[0] + \"\\n\";\n    },\n    text_length$$module$build$src$generators$python$text = function (a, b) {\n      return [\"len(\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\") + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    text_isEmpty$$module$build$src$generators$python$text = function (a, b) {\n      return [\"not len(\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\") + \")\", Order$$module$build$src$generators$python$python_generator.LOGICAL_NOT];\n    },\n    text_indexOf$$module$build$src$generators$python$text = function (a, b) {\n      const c = \"FIRST\" === a.getFieldValue(\"END\") ? \"find\" : \"rfind\",\n        d = b.valueToCode(a, \"FIND\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n      b = (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\") + \".\" + c + \"(\" + d + \")\";\n      return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Order$$module$build$src$generators$python$python_generator.ADDITIVE] : [b, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    text_charAt$$module$build$src$generators$python$text = function (a, b) {\n      const c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = b.valueToCode(a, \"VALUE\", \"RANDOM\" === c ? Order$$module$build$src$generators$python$python_generator.NONE : Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\";\n      switch (c) {\n        case \"FIRST\":\n          return [d + \"[0]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n        case \"LAST\":\n          return [d + \"[-1]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n        case \"FROM_START\":\n          return a = b.getAdjustedInt(a, \"AT\"), [d + \"[\" + a + \"]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n        case \"FROM_END\":\n          return a = b.getAdjustedInt(a, \"AT\", 1, !0), [d + \"[\" + a + \"]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n        case \"RANDOM\":\n          return b.definitions_.import_random = \"import random\", [b.provideFunction_(\"text_random_letter\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(text):\n  x = int(random.random() * len(text))\n  return text[x]\n`) + \"(\" + d + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n      }\n      throw Error(\"Unhandled option (text_charAt).\");\n    },\n    text_getSubstring$$module$build$src$generators$python$text = function (a, b) {\n      var c = a.getFieldValue(\"WHERE1\");\n      const d = a.getFieldValue(\"WHERE2\"),\n        e = b.valueToCode(a, \"STRING\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\";\n      switch (c) {\n        case \"FROM_START\":\n          c = b.getAdjustedInt(a, \"AT1\");\n          0 === c && (c = \"\");\n          break;\n        case \"FROM_END\":\n          c = b.getAdjustedInt(a, \"AT1\", 1, !0);\n          break;\n        case \"FIRST\":\n          c = \"\";\n          break;\n        default:\n          throw Error(\"Unhandled option (text_getSubstring)\");\n      }\n      switch (d) {\n        case \"FROM_START\":\n          a = b.getAdjustedInt(a, \"AT2\", 1);\n          break;\n        case \"FROM_END\":\n          a = b.getAdjustedInt(a, \"AT2\", 0, !0);\n          $.isNumber$$module$build$src$core$utils$string(String(a)) ? 0 === a && (a = \"\") : (b.definitions_.import_sys = \"import sys\", a += \" or sys.maxsize\");\n          break;\n        case \"LAST\":\n          a = \"\";\n          break;\n        default:\n          throw Error(\"Unhandled option (text_getSubstring)\");\n      }\n      return [e + \"[\" + c + \" : \" + a + \"]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n    },\n    text_changeCase$$module$build$src$generators$python$text = function (a, b) {\n      const c = {\n        UPPERCASE: \".upper()\",\n        LOWERCASE: \".lower()\",\n        TITLECASE: \".title()\"\n      }[a.getFieldValue(\"CASE\")];\n      return [(b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\") + c, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    text_trim$$module$build$src$generators$python$text = function (a, b) {\n      const c = {\n        LEFT: \".lstrip()\",\n        RIGHT: \".rstrip()\",\n        BOTH: \".strip()\"\n      }[a.getFieldValue(\"MODE\")];\n      return [(b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\") + c, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    text_print$$module$build$src$generators$python$text = function (a, b) {\n      return \"print(\" + (b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\") + \")\\n\";\n    },\n    text_prompt_ext$$module$build$src$generators$python$text = function (a, b) {\n      var c = b.provideFunction_(\"text_prompt\", `\ndef ${b.FUNCTION_NAME_PLACEHOLDER_}(msg):\n  try:\n    return raw_input(msg)\n  except NameError:\n    return input(msg)\n`);\n      b = a.getField(\"TEXT\") ? b.quote_(a.getFieldValue(\"TEXT\")) : b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n      c = c + \"(\" + b + \")\";\n      \"NUMBER\" === a.getFieldValue(\"TYPE\") && (c = \"float(\" + c + \")\");\n      return [c, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    text_count$$module$build$src$generators$python$text = function (a, b) {\n      const c = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\";\n      a = b.valueToCode(a, \"SUB\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n      return [c + \".count(\" + a + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    text_replace$$module$build$src$generators$python$text = function (a, b) {\n      const c = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\",\n        d = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n      a = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$python$python_generator.NONE) || \"''\";\n      return [c + \".replace(\" + d + \", \" + a + \")\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n    },\n    text_reverse$$module$build$src$generators$python$text = function (a, b) {\n      return [(b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$python$python_generator.MEMBER) || \"''\") + \"[::-1]\", Order$$module$build$src$generators$python$python_generator.MEMBER];\n    },\n    variables_get$$module$build$src$generators$python$variables = function (a, b) {\n      return [b.getVariableName(a.getFieldValue(\"VAR\")), Order$$module$build$src$generators$python$python_generator.ATOMIC];\n    },\n    variables_set$$module$build$src$generators$python$variables = function (a, b) {\n      const c = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$python$python_generator.NONE) || \"0\";\n      return b.getVariableName(a.getFieldValue(\"VAR\")) + \" = \" + c + \"\\n\";\n    },\n    Order$$module$build$src$generators$python$python_generator;\n  (function (a) {\n    a[a.ATOMIC = 0] = \"ATOMIC\";\n    a[a.COLLECTION = 1] = \"COLLECTION\";\n    a[a.STRING_CONVERSION = 1] = \"STRING_CONVERSION\";\n    a[a.MEMBER = 2.1] = \"MEMBER\";\n    a[a.FUNCTION_CALL = 2.2] = \"FUNCTION_CALL\";\n    a[a.EXPONENTIATION = 3] = \"EXPONENTIATION\";\n    a[a.UNARY_SIGN = 4] = \"UNARY_SIGN\";\n    a[a.BITWISE_NOT = 4] = \"BITWISE_NOT\";\n    a[a.MULTIPLICATIVE = 5] = \"MULTIPLICATIVE\";\n    a[a.ADDITIVE = 6] = \"ADDITIVE\";\n    a[a.BITWISE_SHIFT = 7] = \"BITWISE_SHIFT\";\n    a[a.BITWISE_AND = 8] = \"BITWISE_AND\";\n    a[a.BITWISE_XOR = 9] = \"BITWISE_XOR\";\n    a[a.BITWISE_OR = 10] = \"BITWISE_OR\";\n    a[a.RELATIONAL = 11] = \"RELATIONAL\";\n    a[a.LOGICAL_NOT = 12] = \"LOGICAL_NOT\";\n    a[a.LOGICAL_AND = 13] = \"LOGICAL_AND\";\n    a[a.LOGICAL_OR = 14] = \"LOGICAL_OR\";\n    a[a.CONDITIONAL = 15] = \"CONDITIONAL\";\n    a[a.LAMBDA = 16] = \"LAMBDA\";\n    a[a.NONE = 99] = \"NONE\";\n  })(Order$$module$build$src$generators$python$python_generator || (Order$$module$build$src$generators$python$python_generator = {}));\n  var PythonGenerator$$module$build$src$generators$python$python_generator = class extends $.CodeGenerator$$module$build$src$core$generator {\n      constructor() {\n        let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Python\";\n        super(a);\n        this.ORDER_OVERRIDES = [[Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL, Order$$module$build$src$generators$python$python_generator.MEMBER], [Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL], [Order$$module$build$src$generators$python$python_generator.MEMBER, Order$$module$build$src$generators$python$python_generator.MEMBER], [Order$$module$build$src$generators$python$python_generator.MEMBER, Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL], [Order$$module$build$src$generators$python$python_generator.LOGICAL_NOT, Order$$module$build$src$generators$python$python_generator.LOGICAL_NOT], [Order$$module$build$src$generators$python$python_generator.LOGICAL_AND, Order$$module$build$src$generators$python$python_generator.LOGICAL_AND], [Order$$module$build$src$generators$python$python_generator.LOGICAL_OR, Order$$module$build$src$generators$python$python_generator.LOGICAL_OR]];\n        this.PASS = \"\";\n        this.isInitialized = !1;\n        for (const b in Order$$module$build$src$generators$python$python_generator) a = Order$$module$build$src$generators$python$python_generator[b], \"string\" !== typeof a && (this[\"ORDER_\" + b] = a);\n        this.addReservedWords(\"False,None,True,and,as,assert,break,class,continue,def,del,elif,else,except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,not,or,pass,print,raise,return,try,while,with,yield,NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,ArithmeticError,AssertionError,AttributeError,BaseException,BlockingIOError,BrokenPipeError,BufferError,BytesWarning,ChildProcessError,ConnectionAbortedError,ConnectionError,ConnectionRefusedError,ConnectionResetError,DeprecationWarning,EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,IOError,ImportError,ImportWarning,IndentationError,IndexError,InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,LookupError,MemoryError,ModuleNotFoundError,NameError,NotADirectoryError,NotImplemented,NotImplementedError,OSError,OverflowError,PendingDeprecationWarning,PermissionError,ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,int,intern,isinstance,issubclass,iter,len,license,list,locals,long,map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,vars,xrange,zip\");\n      }\n      init(a) {\n        super.init(a);\n        this.PASS = this.INDENT + \"pass\\n\";\n        this.nameDB_ ? this.nameDB_.reset() : this.nameDB_ = new $.Names$$module$build$src$core$names(this.RESERVED_WORDS_);\n        this.nameDB_.setVariableMap(a.getVariableMap());\n        this.nameDB_.populateVariables(a);\n        this.nameDB_.populateProcedures(a);\n        const b = [];\n        var c = $.allDeveloperVariables$$module$build$src$core$variables(a);\n        for (let d = 0; d < c.length; d++) b.push(this.nameDB_.getName(c[d], $.Names$$module$build$src$core$names.DEVELOPER_VARIABLE_TYPE) + \" = None\");\n        a = $.allUsedVarModels$$module$build$src$core$variables(a);\n        for (c = 0; c < a.length; c++) b.push(this.getVariableName(a[c].getId()) + \" = None\");\n        this.definitions_.variables = b.join(\"\\n\");\n        this.isInitialized = !0;\n      }\n      finish(a) {\n        const b = [],\n          c = [];\n        for (let d in this.definitions_) {\n          const e = this.definitions_[d];\n          e.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/) ? b.push(e) : c.push(e);\n        }\n        a = super.finish(a);\n        this.isInitialized = !1;\n        this.nameDB_.reset();\n        return (b.join(\"\\n\") + \"\\n\\n\" + c.join(\"\\n\\n\")).replace(/\\n\\n+/g, \"\\n\\n\").replace(/\\n*$/, \"\\n\\n\\n\") + a;\n      }\n      scrubNakedValue(a) {\n        return a + \"\\n\";\n      }\n      quote_(a) {\n        a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\");\n        let b = \"'\";\n        -1 !== a.indexOf(\"'\") && (-1 === a.indexOf('\"') ? b = '\"' : a = a.replace(/'/g, \"\\\\'\"));\n        return b + a + b;\n      }\n      multiline_quote_(a) {\n        return a.split(/\\n/g).map(this.quote_).join(\" + '\\\\n' + \\n\");\n      }\n      scrub_(a, b) {\n        let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n        let d = \"\";\n        if (!a.outputConnection || !a.outputConnection.targetConnection) {\n          var e = a.getCommentText();\n          e && (e = $.wrap$$module$build$src$core$utils$string(e, this.COMMENT_WRAP - 3), d += this.prefixLines(e + \"\\n\", \"# \"));\n          for (let f = 0; f < a.inputList.length; f++) a.inputList[f].type === $.inputTypes$$module$build$src$core$inputs$input_types.VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = this.allNestedComments(e)) && (d += this.prefixLines(e, \"# \"));\n        }\n        a = a.nextConnection && a.nextConnection.targetBlock();\n        c = c ? \"\" : this.blockToCode(a);\n        return d + b + c;\n      }\n      getAdjustedInt(a, b) {\n        let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n        a.workspace.options.oneBasedIndex && c--;\n        const e = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n        a = this.valueToCode(a, b, c ? Order$$module$build$src$generators$python$python_generator.ADDITIVE : Order$$module$build$src$generators$python$python_generator.NONE) || e;\n        $.isNumber$$module$build$src$core$utils$string(a) ? (a = parseInt(a, 10) + c, d && (a = -a)) : (a = 0 < c ? \"int(\" + a + \" + \" + c + \")\" : 0 > c ? \"int(\" + a + \" - \" + -c + \")\" : \"int(\" + a + \")\", d && (a = \"-\" + a));\n        return a;\n      }\n    },\n    module$build$src$generators$python$python_generator = {};\n  module$build$src$generators$python$python_generator.Order = Order$$module$build$src$generators$python$python_generator;\n  module$build$src$generators$python$python_generator.PythonGenerator = PythonGenerator$$module$build$src$generators$python$python_generator;\n  var module$build$src$generators$python$colour = {};\n  module$build$src$generators$python$colour.colour_blend = colour_blend$$module$build$src$generators$python$colour;\n  module$build$src$generators$python$colour.colour_picker = colour_picker$$module$build$src$generators$python$colour;\n  module$build$src$generators$python$colour.colour_random = colour_random$$module$build$src$generators$python$colour;\n  module$build$src$generators$python$colour.colour_rgb = colour_rgb$$module$build$src$generators$python$colour;\n  var module$build$src$generators$python$lists = {};\n  module$build$src$generators$python$lists.lists_create_empty = lists_create_empty$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_create_with = lists_create_with$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_getIndex = lists_getIndex$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_getSublist = lists_getSublist$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_indexOf = lists_indexOf$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_isEmpty = lists_isEmpty$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_length = lists_length$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_repeat = lists_repeat$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_reverse = lists_reverse$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_setIndex = lists_setIndex$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_sort = lists_sort$$module$build$src$generators$python$lists;\n  module$build$src$generators$python$lists.lists_split = lists_split$$module$build$src$generators$python$lists;\n  var controls_ifelse$$module$build$src$generators$python$logic = controls_if$$module$build$src$generators$python$logic,\n    module$build$src$generators$python$logic = {};\n  module$build$src$generators$python$logic.controls_if = controls_if$$module$build$src$generators$python$logic;\n  module$build$src$generators$python$logic.controls_ifelse = controls_if$$module$build$src$generators$python$logic;\n  module$build$src$generators$python$logic.logic_boolean = logic_boolean$$module$build$src$generators$python$logic;\n  module$build$src$generators$python$logic.logic_compare = logic_compare$$module$build$src$generators$python$logic;\n  module$build$src$generators$python$logic.logic_negate = logic_negate$$module$build$src$generators$python$logic;\n  module$build$src$generators$python$logic.logic_null = logic_null$$module$build$src$generators$python$logic;\n  module$build$src$generators$python$logic.logic_operation = logic_operation$$module$build$src$generators$python$logic;\n  module$build$src$generators$python$logic.logic_ternary = logic_ternary$$module$build$src$generators$python$logic;\n  var controls_repeat$$module$build$src$generators$python$loops = controls_repeat_ext$$module$build$src$generators$python$loops,\n    module$build$src$generators$python$loops = {};\n  module$build$src$generators$python$loops.controls_flow_statements = controls_flow_statements$$module$build$src$generators$python$loops;\n  module$build$src$generators$python$loops.controls_for = controls_for$$module$build$src$generators$python$loops;\n  module$build$src$generators$python$loops.controls_forEach = controls_forEach$$module$build$src$generators$python$loops;\n  module$build$src$generators$python$loops.controls_repeat = controls_repeat_ext$$module$build$src$generators$python$loops;\n  module$build$src$generators$python$loops.controls_repeat_ext = controls_repeat_ext$$module$build$src$generators$python$loops;\n  module$build$src$generators$python$loops.controls_whileUntil = controls_whileUntil$$module$build$src$generators$python$loops;\n  var math_round$$module$build$src$generators$python$math = math_single$$module$build$src$generators$python$math,\n    math_trig$$module$build$src$generators$python$math = math_single$$module$build$src$generators$python$math,\n    module$build$src$generators$python$math = {};\n  module$build$src$generators$python$math.math_arithmetic = math_arithmetic$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_atan2 = math_atan2$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_change = math_change$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_constant = math_constant$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_constrain = math_constrain$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_modulo = math_modulo$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_number = math_number$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_number_property = math_number_property$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_on_list = math_on_list$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_random_float = math_random_float$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_random_int = math_random_int$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_round = math_single$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_single = math_single$$module$build$src$generators$python$math;\n  module$build$src$generators$python$math.math_trig = math_single$$module$build$src$generators$python$math;\n  var procedures_defnoreturn$$module$build$src$generators$python$procedures = procedures_defreturn$$module$build$src$generators$python$procedures,\n    module$build$src$generators$python$procedures = {};\n  module$build$src$generators$python$procedures.procedures_callnoreturn = procedures_callnoreturn$$module$build$src$generators$python$procedures;\n  module$build$src$generators$python$procedures.procedures_callreturn = procedures_callreturn$$module$build$src$generators$python$procedures;\n  module$build$src$generators$python$procedures.procedures_defnoreturn = procedures_defreturn$$module$build$src$generators$python$procedures;\n  module$build$src$generators$python$procedures.procedures_defreturn = procedures_defreturn$$module$build$src$generators$python$procedures;\n  module$build$src$generators$python$procedures.procedures_ifreturn = procedures_ifreturn$$module$build$src$generators$python$procedures;\n  var strRegExp$$module$build$src$generators$python$text = /^\\s*'([^']|\\\\')*'\\s*$/,\n    forceString$$module$build$src$generators$python$text = function (a) {\n      return strRegExp$$module$build$src$generators$python$text.test(a) ? [a, Order$$module$build$src$generators$python$python_generator.ATOMIC] : [\"str(\" + a + \")\", Order$$module$build$src$generators$python$python_generator.FUNCTION_CALL];\n    },\n    text_prompt$$module$build$src$generators$python$text = text_prompt_ext$$module$build$src$generators$python$text,\n    module$build$src$generators$python$text = {};\n  module$build$src$generators$python$text.text = text$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_append = text_append$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_changeCase = text_changeCase$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_charAt = text_charAt$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_count = text_count$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_getSubstring = text_getSubstring$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_indexOf = text_indexOf$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_isEmpty = text_isEmpty$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_join = text_join$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_length = text_length$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_multiline = text_multiline$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_print = text_print$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_prompt = text_prompt_ext$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_prompt_ext = text_prompt_ext$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_replace = text_replace$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_reverse = text_reverse$$module$build$src$generators$python$text;\n  module$build$src$generators$python$text.text_trim = text_trim$$module$build$src$generators$python$text;\n  var module$build$src$generators$python$variables = {};\n  module$build$src$generators$python$variables.variables_get = variables_get$$module$build$src$generators$python$variables;\n  module$build$src$generators$python$variables.variables_set = variables_set$$module$build$src$generators$python$variables;\n  var module$build$src$generators$python$variables_dynamic = {};\n  module$build$src$generators$python$variables_dynamic.variables_get_dynamic = variables_get$$module$build$src$generators$python$variables;\n  module$build$src$generators$python$variables_dynamic.variables_set_dynamic = variables_set$$module$build$src$generators$python$variables;\n  var pythonGenerator$$module$build$src$generators$python = new PythonGenerator$$module$build$src$generators$python$python_generator();\n  pythonGenerator$$module$build$src$generators$python.addReservedWords(\"math,random,Number\");\n  var generators$$module$build$src$generators$python = Object.assign({}, module$build$src$generators$python$colour, module$build$src$generators$python$lists, module$build$src$generators$python$logic, module$build$src$generators$python$loops, module$build$src$generators$python$math, module$build$src$generators$python$procedures, module$build$src$generators$python$text, module$build$src$generators$python$variables, module$build$src$generators$python$variables_dynamic);\n  for (const a in generators$$module$build$src$generators$python) pythonGenerator$$module$build$src$generators$python.forBlock[a] = generators$$module$build$src$generators$python[a];\n  var module$build$src$generators$python = {};\n  module$build$src$generators$python.Order = Order$$module$build$src$generators$python$python_generator;\n  module$build$src$generators$python.PythonGenerator = PythonGenerator$$module$build$src$generators$python$python_generator;\n  module$build$src$generators$python.pythonGenerator = pythonGenerator$$module$build$src$generators$python;\n  module$build$src$generators$python.__namespace__ = $;\n  return module$build$src$generators$python;\n});","map":{"version":3,"names":["colour_picker$$module$build$src$generators$python$colour","a","b","quote_","getFieldValue","Order$$module$build$src$generators$python$python_generator","ATOMIC","colour_random$$module$build$src$generators$python$colour","definitions_","import_random","FUNCTION_CALL","colour_rgb$$module$build$src$generators$python$colour","c","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","d","valueToCode","NONE","e","colour_blend$$module$build$src$generators$python$colour","lists_create_empty$$module$build$src$generators$python$lists","lists_create_with$$module$build$src$generators$python$lists","Array","itemCount_","join","lists_repeat$$module$build$src$generators$python$lists","MULTIPLICATIVE","lists_length$$module$build$src$generators$python$lists","lists_isEmpty$$module$build$src$generators$python$lists","LOGICAL_NOT","lists_indexOf$$module$build$src$generators$python$lists","f","g","workspace","options","oneBasedIndex","lists_getIndex$$module$build$src$generators$python$lists","MEMBER","getAdjustedInt","Error","lists_setIndex$$module$build$src$generators$python$lists","match","nameDB_","getDistinctName","$","NameType$$module$build$src$core$names","VARIABLE","lists_getSublist$$module$build$src$generators$python$lists","isNumber$$module$build$src$core$utils$string","String","import_sys","lists_sort$$module$build$src$generators$python$lists","lists_split$$module$build$src$generators$python$lists","lists_reverse$$module$build$src$generators$python$lists","controls_if$$module$build$src$generators$python$logic","STATEMENT_PREFIX","injectId","statementToCode","PASS","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare$$module$build$src$generators$python$logic","EQ","NEQ","LT","LTE","GT","GTE","RELATIONAL","logic_operation$$module$build$src$generators$python$logic","LOGICAL_AND","LOGICAL_OR","logic_negate$$module$build$src$generators$python$logic","logic_boolean$$module$build$src$generators$python$logic","logic_null$$module$build$src$generators$python$logic","logic_ternary$$module$build$src$generators$python$logic","CONDITIONAL","controls_repeat_ext$$module$build$src$generators$python$loops","getField","parseInt","addLoopTrap","controls_whileUntil$$module$build$src$generators$python$loops","controls_for$$module$build$src$generators$python$loops","getVariableName","h","k","Number","Math","abs","l","m","n","controls_forEach$$module$build$src$generators$python$loops","controls_flow_statements$$module$build$src$generators$python$loops","getSurroundLoop","suppressPrefixSuffix","math_number$$module$build$src$generators$python$math","Infinity","UNARY_SIGN","math_arithmetic$$module$build$src$generators$python$math","ADD","ADDITIVE","MINUS","MULTIPLY","DIVIDE","POWER","EXPONENTIATION","math_single$$module$build$src$generators$python$math","import_math","math_constant$$module$build$src$generators$python$math","PI","E","GOLDEN_RATIO","SQRT2","SQRT1_2","INFINITY","math_number_property$$module$build$src$generators$python$math","EVEN","ODD","WHOLE","POSITIVE","NEGATIVE","DIVISIBLE_BY","PRIME","from_numbers_import_Number","math_change$$module$build$src$generators$python$math","math_on_list$$module$build$src$generators$python$math","math_modulo$$module$build$src$generators$python$math","math_constrain$$module$build$src$generators$python$math","math_random_int$$module$build$src$generators$python$math","math_random_float$$module$build$src$generators$python$math","math_atan2$$module$build$src$generators$python$math","procedures_defreturn$$module$build$src$generators$python$procedures","allUsedVarModels$$module$build$src$core$variables","name","getVars","indexOf","push","allDeveloperVariables$$module$build$src$core$variables","length","getName","DEVELOPER_VARIABLE","getProcedureName","INFINITE_LOOP_TRAP","scrub_","procedures_callreturn$$module$build$src$generators$python$procedures","procedures_callnoreturn$$module$build$src$generators$python$procedures","forBlock","procedures_callreturn","procedures_ifreturn$$module$build$src$generators$python$procedures","hasReturnValue_","text$$module$build$src$generators$python$text","text_multiline$$module$build$src$generators$python$text","multiline_quote_","text_join$$module$build$src$generators$python$text","forceString$$module$build$src$generators$python$text","text_append$$module$build$src$generators$python$text","text_length$$module$build$src$generators$python$text","text_isEmpty$$module$build$src$generators$python$text","text_indexOf$$module$build$src$generators$python$text","text_charAt$$module$build$src$generators$python$text","text_getSubstring$$module$build$src$generators$python$text","text_changeCase$$module$build$src$generators$python$text","UPPERCASE","LOWERCASE","TITLECASE","text_trim$$module$build$src$generators$python$text","LEFT","RIGHT","BOTH","text_print$$module$build$src$generators$python$text","text_prompt_ext$$module$build$src$generators$python$text","text_count$$module$build$src$generators$python$text","text_replace$$module$build$src$generators$python$text","text_reverse$$module$build$src$generators$python$text","variables_get$$module$build$src$generators$python$variables","variables_set$$module$build$src$generators$python$variables","COLLECTION","STRING_CONVERSION","BITWISE_NOT","BITWISE_SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","LAMBDA","PythonGenerator$$module$build$src$generators$python$python_generator","CodeGenerator$$module$build$src$core$generator","constructor","arguments","undefined","ORDER_OVERRIDES","isInitialized","addReservedWords","init","reset","Names$$module$build$src$core$names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","DEVELOPER_VARIABLE_TYPE","getId","variables","finish","replace","scrubNakedValue","split","map","outputConnection","targetConnection","getCommentText","wrap$$module$build$src$core$utils$string","COMMENT_WRAP","inputList","type","inputTypes$$module$build$src$core$inputs$input_types","VALUE","connection","targetBlock","allNestedComments","nextConnection","blockToCode","module$build$src$generators$python$python_generator","Order","PythonGenerator","module$build$src$generators$python$colour","colour_blend","colour_picker","colour_random","colour_rgb","module$build$src$generators$python$lists","lists_create_empty","lists_create_with","lists_getIndex","lists_getSublist","lists_indexOf","lists_isEmpty","lists_length","lists_repeat","lists_reverse","lists_setIndex","lists_sort","lists_split","controls_ifelse$$module$build$src$generators$python$logic","module$build$src$generators$python$logic","controls_if","controls_ifelse","logic_boolean","logic_compare","logic_negate","logic_null","logic_operation","logic_ternary","controls_repeat$$module$build$src$generators$python$loops","module$build$src$generators$python$loops","controls_flow_statements","controls_for","controls_forEach","controls_repeat","controls_repeat_ext","controls_whileUntil","math_round$$module$build$src$generators$python$math","math_trig$$module$build$src$generators$python$math","module$build$src$generators$python$math","math_arithmetic","math_atan2","math_change","math_constant","math_constrain","math_modulo","math_number","math_number_property","math_on_list","math_random_float","math_random_int","math_round","math_single","math_trig","procedures_defnoreturn$$module$build$src$generators$python$procedures","module$build$src$generators$python$procedures","procedures_callnoreturn","procedures_defnoreturn","procedures_defreturn","procedures_ifreturn","strRegExp$$module$build$src$generators$python$text","test","text_prompt$$module$build$src$generators$python$text","module$build$src$generators$python$text","text","text_append","text_changeCase","text_charAt","text_count","text_getSubstring","text_indexOf","text_isEmpty","text_join","text_length","text_multiline","text_print","text_prompt","text_prompt_ext","text_replace","text_reverse","text_trim","module$build$src$generators$python$variables","variables_get","variables_set","module$build$src$generators$python$variables_dynamic","variables_get_dynamic","variables_set_dynamic","pythonGenerator$$module$build$src$generators$python","generators$$module$build$src$generators$python","Object","assign","module$build$src$generators$python","pythonGenerator"],"sources":["C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\colour.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\lists.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\logic.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\loops.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\math.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\procedures.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\text.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\variables.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\python_generator.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python\\variables_dynamic.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\python.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for colour blocks.\n */\n\n// Former goog.module ID: Blockly.Python.colour\n\nimport type {Block} from '../../core/block.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\nexport function colour_picker(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n}\n\nexport function colour_random(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Generate a random colour.\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  (generator as AnyDuringMigration).definitions_['import_random'] =\n    'import random';\n  const code = \"'#%06x' % random.randint(0, 2**24 - 1)\";\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function colour_rgb(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Compose a colour from RGB components expressed as percentages.\n  const functionName = generator.provideFunction_(\n    'colour_rgb',\n    `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b):\n  r = round(min(100, max(0, r)) * 2.55)\n  g = round(min(100, max(0, g)) * 2.55)\n  b = round(min(100, max(0, b)) * 2.55)\n  return '#%02x%02x%02x' % (r, g, b)\n`,\n  );\n  const r = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const g = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const b = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function colour_blend(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Blend two colours together.\n  const functionName = generator.provideFunction_(\n    'colour_blend',\n    `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio):\n  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\n  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\n  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\n  ratio = min(1, max(0, ratio))\n  r = round(r1 * (1 - ratio) + r2 * ratio)\n  g = round(g1 * (1 - ratio) + g2 * ratio)\n  b = round(b1 * (1 - ratio) + b2 * ratio)\n  return '#%02x%02x%02x' % (r, g, b)\n`,\n  );\n  const colour1 =\n    generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\n  const colour2 =\n    generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0;\n  const code =\n    functionName + '(' + colour1 + ', ' + colour2 + ', ' + ratio + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for list blocks.\n */\n\n// Former goog.module ID: Blockly.Python.lists\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {Block} from '../../core/block.js';\nimport type {CreateWithBlock} from '../../blocks/lists.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\nimport type {PythonGenerator} from './python_generator.js';\n\nexport function lists_create_empty(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n}\n\nexport function lists_create_with(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Create a list with any number of elements of any type.\n  const createWithBlock = block as CreateWithBlock;\n  const elements = new Array(createWithBlock.itemCount_);\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'None';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n}\n\nexport function lists_repeat(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Create a list with one element repeated.\n  const item = generator.valueToCode(block, 'ITEM', Order.NONE) || 'None';\n  const times =\n    generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  const code = '[' + item + '] * ' + times;\n  return [code, Order.MULTIPLICATIVE];\n}\n\nexport function lists_length(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // String or array length.\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\n  return ['len(' + list + ')', Order.FUNCTION_CALL];\n}\n\nexport function lists_isEmpty(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\n  const code = 'not len(' + list + ')';\n  return [code, Order.LOGICAL_NOT];\n}\n\nexport function lists_indexOf(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Find an item in the list.\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || '[]';\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let errorIndex = ' -1';\n  let firstIndexAdjustment = '';\n  let lastIndexAdjustment = ' - 1';\n\n  if (block.workspace.options.oneBasedIndex) {\n    errorIndex = ' 0';\n    firstIndexAdjustment = ' + 1';\n    lastIndexAdjustment = '';\n  }\n\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_(\n      'first_index',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = my_list.index(elem)${firstIndexAdjustment}\n  except: index =${errorIndex}\n  return index\n`,\n    );\n  } else {\n    functionName = generator.provideFunction_(\n      'last_index',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\n  try: index = len(my_list) - my_list[::-1].index(elem)${lastIndexAdjustment}\n  except: index =${errorIndex}\n  return index\n`,\n    );\n  }\n  const code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_getIndex(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] | string {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(0)';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(0)\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'GET') {\n        const code = list + '[-1]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop()\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(' + at + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop(' + at + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop(' + at + ')\\n';\n      }\n      break;\n    }\n    case 'RANDOM':\n      (generator as AnyDuringMigration).definitions_['import_random'] =\n        'import random';\n      if (mode === 'GET') {\n        const code = 'random.choice(' + list + ')';\n        return [code, Order.FUNCTION_CALL];\n      } else {\n        const functionName = generator.provideFunction_(\n          'lists_remove_random_item',\n          `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  x = int(random.random() * len(myList))\n  return myList.pop(x)\n`,\n        );\n        const code = functionName + '(' + list + ')';\n        if (mode === 'GET_REMOVE') {\n          return [code, Order.FUNCTION_CALL];\n        } else if (mode === 'REMOVE') {\n          return code + '\\n';\n        }\n      }\n      break;\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n}\n\nexport function lists_setIndex(block: Block, generator: PythonGenerator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'None';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar = generator.nameDB_!.getDistinctName(\n      'tmp_list',\n      NameType.VARIABLE,\n    );\n    const code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n    return code;\n  }\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(0, ' + value + ')\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'SET') {\n        return list + '[-1] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.append(' + value + ')\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ')\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + '\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.insert(' + at + ', ' + value + ')\\n';\n      }\n      break;\n    }\n    case 'RANDOM': {\n      (generator as AnyDuringMigration).definitions_['import_random'] =\n        'import random';\n      let code = cacheList();\n      const xVar = generator.nameDB_!.getDistinctName(\n        'tmp_x',\n        NameType.VARIABLE,\n      );\n      code += xVar + ' = int(random.random() * len(' + list + '))\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + '\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.insert(' + xVar + ', ' + value + ')\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n}\n\nexport function lists_getSublist(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Get sublist.\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  let at1;\n  switch (where1) {\n    case 'FROM_START':\n      at1 = generator.getAdjustedInt(block, 'AT1');\n      if (at1 === 0) {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n\n  let at2;\n  switch (where2) {\n    case 'FROM_START':\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!stringUtils.isNumber(String(at2))) {\n        (generator as AnyDuringMigration).definitions_['import_sys'] =\n          'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 === 0) {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (lists_getSublist)');\n  }\n  const code = list + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Order.MEMBER];\n}\n\nexport function lists_sort(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Block for sorting a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const type = block.getFieldValue('TYPE');\n  const reverse = block.getFieldValue('DIRECTION') === '1' ? 'False' : 'True';\n  const sortFunctionName = generator.provideFunction_(\n    'lists_sort',\n    `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, type, reverse):\n  def try_float(s):\n    try:\n      return float(s)\n    except:\n      return 0\n  key_funcs = {\n    \"NUMERIC\": try_float,\n    \"TEXT\": str,\n    \"IGNORE_CASE\": lambda s: str(s).lower()\n  }\n  key_func = key_funcs[type]\n  list_cpy = list(my_list)\n  return sorted(list_cpy, key=key_func, reverse=reverse)\n`,\n  );\n\n  const code =\n    sortFunctionName + '(' + list + ', \"' + type + '\", ' + reverse + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_split(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Block for splitting text into a list, or joining a list into text.\n  const mode = block.getFieldValue('MODE');\n  let code;\n  if (mode === 'SPLIT') {\n    const value_input =\n      generator.valueToCode(block, 'INPUT', Order.MEMBER) || \"''\";\n    const value_delim = generator.valueToCode(block, 'DELIM', Order.NONE);\n    code = value_input + '.split(' + value_delim + ')';\n  } else if (mode === 'JOIN') {\n    const value_input =\n      generator.valueToCode(block, 'INPUT', Order.NONE) || '[]';\n    const value_delim =\n      generator.valueToCode(block, 'DELIM', Order.MEMBER) || \"''\";\n    code = value_delim + '.join(' + value_input + ')';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_reverse(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  const code = 'list(reversed(' + list + '))';\n  return [code, Order.FUNCTION_CALL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for logic blocks.\n */\n\n// Former goog.module ID: Blockly.Python.logic\n\nimport type {Block} from '../../core/block.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\nexport function controls_if(block: Block, generator: PythonGenerator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '',\n    branchCode,\n    conditionCode;\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    conditionCode =\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'False';\n    branchCode = generator.statementToCode(block, 'DO' + n) || generator.PASS;\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code += (n === 0 ? 'if ' : 'elif ') + conditionCode + ':\\n' + branchCode;\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    branchCode = generator.statementToCode(block, 'ELSE') || generator.PASS;\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code += 'else:\\n' + branchCode;\n  }\n  return code;\n}\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Comparison operator.\n  const OPERATORS = {\n    'EQ': '==',\n    'NEQ': '!=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>=',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const order = Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n}\n\nexport function logic_operation(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Operations 'and', 'or'.\n  const operator = block.getFieldValue('OP') === 'AND' ? 'and' : 'or';\n  const order = operator === 'and' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'False';\n    argument1 = 'False';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = operator === 'and' ? 'True' : 'False';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n}\n\nexport function logic_negate(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Negation.\n  const argument0 =\n    generator.valueToCode(block, 'BOOL', Order.LOGICAL_NOT) || 'True';\n  const code = 'not ' + argument0;\n  return [code, Order.LOGICAL_NOT];\n}\n\nexport function logic_boolean(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Boolean values true and false.\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'True' : 'False';\n  return [code, Order.ATOMIC];\n}\n\nexport function logic_null(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Null data type.\n  return ['None', Order.ATOMIC];\n}\n\nexport function logic_ternary(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Ternary operator.\n  const value_if =\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'False';\n  const value_then =\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'None';\n  const value_else =\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'None';\n  const code = value_then + ' if ' + value_if + ' else ' + value_else;\n  return [code, Order.CONDITIONAL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for loop blocks.\n */\n\n// Former goog.module ID: Blockly.Python.loops\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {Block} from '../../core/block.js';\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\n\nexport function controls_repeat_ext(block: Block, generator: PythonGenerator) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\n  }\n  if (stringUtils.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'int(' + repeats + ')';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  const loopVar = generator.nameDB_!.getDistinctName(\n    'count',\n    NameType.VARIABLE,\n  );\n  const code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\n  return code;\n}\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(block: Block, generator: PythonGenerator) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n    generator.valueToCode(\n      block,\n      'BOOL',\n      until ? Order.LOGICAL_NOT : Order.NONE,\n    ) || 'False';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ':\\n' + branch;\n}\n\nexport function controls_for(block: Block, generator: PythonGenerator) {\n  // For loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  let argument0: string | number =\n    generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  let argument1: string | number =\n    generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  let increment: string | number =\n    generator.valueToCode(block, 'BY', Order.NONE) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n\n  let code = '';\n  let range;\n\n  // Helper functions.\n  const defineUpRange = function () {\n    return generator.provideFunction_(\n      'upRange',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start <= stop:\n    yield start\n    start += abs(step)\n`,\n    );\n  };\n  const defineDownRange = function () {\n    return generator.provideFunction_(\n      'downRange',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\n  while start >= stop:\n    yield start\n    start -= abs(step)\n`,\n    );\n  };\n  // Arguments are legal generator code (numbers or strings returned by scrub()).\n  const generateUpDownRange = function (\n    start: string,\n    end: string,\n    inc: string,\n  ) {\n    return (\n      '(' +\n      start +\n      ' <= ' +\n      end +\n      ') and ' +\n      defineUpRange() +\n      '(' +\n      start +\n      ', ' +\n      end +\n      ', ' +\n      inc +\n      ') or ' +\n      defineDownRange() +\n      '(' +\n      start +\n      ', ' +\n      end +\n      ', ' +\n      inc +\n      ')'\n    );\n  };\n\n  if (\n    stringUtils.isNumber(argument0) &&\n    stringUtils.isNumber(argument1) &&\n    stringUtils.isNumber(increment)\n  ) {\n    // All parameters are simple numbers.\n    argument0 = Number(argument0);\n    argument1 = Number(argument1);\n    increment = Math.abs(Number(increment));\n    if (argument0 % 1 === 0 && argument1 % 1 === 0 && increment % 1 === 0) {\n      // All parameters are integers.\n      if (argument0 <= argument1) {\n        // Count up.\n        argument1++;\n        if (argument0 === 0 && increment === 1) {\n          // If starting index is 0, omit it.\n          range = argument1;\n        } else {\n          range = argument0 + ', ' + argument1;\n        }\n        // If increment isn't 1, it must be explicit.\n        if (increment !== 1) {\n          range += ', ' + increment;\n        }\n      } else {\n        // Count down.\n        argument1--;\n        range = argument0 + ', ' + argument1 + ', -' + increment;\n      }\n      range = 'range(' + range + ')';\n    } else {\n      // At least one of the parameters is not an integer.\n      if (argument0 < argument1) {\n        range = defineUpRange();\n      } else {\n        range = defineDownRange();\n      }\n      range += '(' + argument0 + ', ' + argument1 + ', ' + increment + ')';\n    }\n  } else {\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    const scrub = function (arg: string, suffix: string) {\n      if (stringUtils.isNumber(arg)) {\n        // Simple number.\n        arg = String(Number(arg));\n      } else if (!arg.match(/^\\w+$/)) {\n        // Not a variable, it's complicated.\n        const varName = generator.nameDB_!.getDistinctName(\n          variable0 + suffix,\n          NameType.VARIABLE,\n        );\n        code += varName + ' = ' + arg + '\\n';\n        arg = varName;\n      }\n      return arg;\n    };\n    const startVar = scrub(argument0, '_start');\n    const endVar = scrub(argument1, '_end');\n    const incVar = scrub(increment, '_inc');\n\n    if (typeof startVar === 'number' && typeof endVar === 'number') {\n      if (startVar < endVar) {\n        range = defineUpRange();\n      } else {\n        range = defineDownRange();\n      }\n      range += '(' + startVar + ', ' + endVar + ', ' + incVar + ')';\n    } else {\n      // We cannot determine direction statically.\n      range = generateUpDownRange(startVar, endVar, incVar);\n    }\n  }\n  code += 'for ' + variable0 + ' in ' + range + ':\\n' + branch;\n  return code;\n}\n\nexport function controls_forEach(block: Block, generator: PythonGenerator) {\n  // For each loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n    generator.valueToCode(block, 'LIST', Order.RELATIONAL) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\n  const code = 'for ' + variable0 + ' in ' + argument0 + ':\\n' + branch;\n  return code;\n}\n\nexport function controls_flow_statements(\n  block: Block,\n  generator: PythonGenerator,\n) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + 'continue\\n';\n  }\n  throw Error('Unknown flow statement.');\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for math blocks.\n */\n\n// Former goog.module ID: Blockly.Python.math\n\nimport type {Block} from '../../core/block.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\n// If any new block imports any library, add that library name here.\n// RESERVED WORDS: 'math,random,Number'\n\nexport function math_number(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Numeric value.\n  let number = Number(block.getFieldValue('NUM'));\n  if (number === Infinity) {\n    return ['float(\"inf\")', Order.FUNCTION_CALL];\n  } else if (number === -Infinity) {\n    return ['-float(\"inf\")', Order.UNARY_SIGN];\n  } else {\n    return [String(number), number < 0 ? Order.UNARY_SIGN : Order.ATOMIC];\n  }\n}\n\nexport function math_arithmetic(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Basic arithmetic operators, and power.\n  const OPERATORS: Record<string, [string | null, Order]> = {\n    'ADD': [' + ', Order.ADDITIVE],\n    'MINUS': [' - ', Order.ADDITIVE],\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\n    'POWER': [' ** ', Order.EXPONENTIATION],\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n  // In case of 'DIVIDE', division between integers returns different results\n  // in generator 2 and 3. However, is not an issue since Blockly does not\n  // guarantee identical results in all languages.  To do otherwise would\n  // require every operator to be wrapped in a function call.  This would kill\n  // legibility of the generated code.\n}\n\nexport function math_single(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    code = generator.valueToCode(block, 'NUM', Order.UNARY_SIGN) || '0';\n    return ['-' + code, Order.UNARY_SIGN];\n  }\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected (here and below).\n  (generator as AnyDuringMigration).definitions_['import_math'] = 'import math';\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'math.fabs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log10(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'COS':\n      code = 'math.cos(' + arg + ' / 180.0 * math.pi)';\n      break;\n    case 'TAN':\n      code = 'math.tan(' + arg + ' / 180.0 * math.pi)';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ASIN':\n      code = 'math.asin(' + arg + ') / math.pi * 180';\n      break;\n    case 'ACOS':\n      code = 'math.acos(' + arg + ') / math.pi * 180';\n      break;\n    case 'ATAN':\n      code = 'math.atan(' + arg + ') / math.pi * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.MULTIPLICATIVE];\n}\n\nexport function math_constant(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS: Record<string, [string, Order]> = {\n    'PI': ['math.pi', Order.MEMBER],\n    'E': ['math.e', Order.MEMBER],\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\n    'SQRT2': ['math.sqrt(2)', Order.MEMBER],\n    'SQRT1_2': ['math.sqrt(1.0 / 2)', Order.MEMBER],\n    'INFINITY': [\"float('inf')\", Order.ATOMIC],\n  };\n  type ConstantOption = keyof typeof CONSTANTS;\n  const constant = block.getFieldValue('CONSTANT') as ConstantOption;\n  if (constant !== 'INFINITY') {\n    (generator as AnyDuringMigration).definitions_['import_math'] =\n      'import math';\n  }\n  return CONSTANTS[constant];\n}\n\nexport function math_number_property(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\n  };\n  type PropertyOption = keyof typeof PROPERTIES;\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck =\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    (generator as AnyDuringMigration).definitions_['import_math'] =\n      'import math';\n    (generator as AnyDuringMigration).definitions_[\n      'from_numbers_import_Number'\n    ] = 'from numbers import Number';\n    const functionName = generator.provideFunction_(\n      'math_isPrime',\n      `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(n):\n  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  # If n is not a number but a string, try parsing it.\n  if not isinstance(n, Number):\n    try:\n      n = float(n)\n    except:\n      return False\n  if n == 2 or n == 3:\n    return True\n  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\n  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\n    return False\n  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for x in range(6, int(math.sqrt(n)) + 2, 6):\n    if n % (x - 1) == 0 or n % (x + 1) == 0:\n      return False\n  return True\n`,\n    );\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n    // If 'divisor' is some code that evals to 0, generator will raise an error.\n    if (divisor === '0') {\n      return ['False', Order.ATOMIC];\n    }\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n}\n\nexport function math_change(block: Block, generator: PythonGenerator) {\n  // Add to a variable in place.\n  (generator as AnyDuringMigration).definitions_['from_numbers_import_Number'] =\n    'from numbers import Number';\n  const argument0 =\n    generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return (\n    varName +\n    ' = (' +\n    varName +\n    ' if isinstance(' +\n    varName +\n    ', Number) else 0) + ' +\n    argument0 +\n    '\\n'\n  );\n}\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n  let code;\n  switch (func) {\n    case 'SUM':\n      code = 'sum(' + list + ')';\n      break;\n    case 'MIN':\n      code = 'min(' + list + ')';\n      break;\n    case 'MAX':\n      code = 'max(' + list + ')';\n      break;\n    case 'AVERAGE': {\n      (generator as AnyDuringMigration).definitions_[\n        'from_numbers_import_Number'\n      ] = 'from numbers import Number';\n      // This operation excludes null and values that aren't int or float:\n      // math_mean([null, null, \"aString\", 1, 9]) -> 5.0\n      const functionName = generator.provideFunction_(\n        'math_mean',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = [e for e in myList if isinstance(e, Number)]\n  if not localList: return\n  return float(sum(localList)) / len(localList)\n`,\n      );\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      (generator as AnyDuringMigration).definitions_[\n        'from_numbers_import_Number'\n      ] = 'from numbers import Number';\n      // This operation excludes null values:\n      // math_median([null, null, 1, 3]) -> 2.0\n      const functionName = generator.provideFunction_(\n        'math_median',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\n  localList = sorted([e for e in myList if isinstance(e, Number)])\n  if not localList: return\n  if len(localList) % 2 == 0:\n    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\n  else:\n    return localList[(len(localList) - 1) // 2]\n`,\n      );\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\n      const functionName = generator.provideFunction_(\n        'math_modes',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(some_list):\n  modes = []\n  # Using a lists of [item, count] to keep count rather than dict\n  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.\n  counts = []\n  maxCount = 1\n  for item in some_list:\n    found = False\n    for count in counts:\n      if count[0] == item:\n        count[1] += 1\n        maxCount = max(maxCount, count[1])\n        found = True\n    if not found:\n      counts.append([item, 1])\n  for counted_item, item_count in counts:\n    if item_count == maxCount:\n      modes.append(counted_item)\n  return modes\n`,\n      );\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      (generator as AnyDuringMigration).definitions_['import_math'] =\n        'import math';\n      const functionName = generator.provideFunction_(\n        'math_standard_deviation',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers):\n  n = len(numbers)\n  if n == 0: return\n  mean = float(sum(numbers)) / n\n  variance = sum((x - mean) ** 2 for x in numbers) / n\n  return math.sqrt(variance)\n`,\n      );\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM':\n      (generator as AnyDuringMigration).definitions_['import_random'] =\n        'import random';\n      code = 'random.choice(' + list + ')';\n      break;\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function math_modulo(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Remainder computation.\n  const argument0 =\n    generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\n  const argument1 =\n    generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATIVE];\n}\n\nexport function math_constrain(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n    generator.valueToCode(block, 'HIGH', Order.NONE) || \"float('inf')\";\n  const code =\n    'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function math_random_int(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Random integer between [X] and [Y].\n  (generator as AnyDuringMigration).definitions_['import_random'] =\n    'import random';\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const code = 'random.randint(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function math_random_float(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Random fraction between 0 and 1.\n  (generator as AnyDuringMigration).definitions_['import_random'] =\n    'import random';\n  return ['random.random()', Order.FUNCTION_CALL];\n}\n\nexport function math_atan2(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  (generator as AnyDuringMigration).definitions_['import_math'] = 'import math';\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'math.atan2(' + argument1 + ', ' + argument0 + ') / math.pi * 180',\n    Order.MULTIPLICATIVE,\n  ];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.Python.procedures\n\nimport * as Variables from '../../core/variables.js';\nimport type {Block} from '../../core/block.js';\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\nimport type {PythonGenerator} from './python_generator.js';\n\nexport function procedures_defreturn(block: Block, generator: PythonGenerator) {\n  // Define a procedure with a return value.\n  // First, add a 'global' statement for every variable that is not shadowed by\n  // a local parameter.\n  const globals = [];\n  const workspace = block.workspace;\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\n  for (const variable of usedVariables) {\n    const varName = variable.name;\n    // getVars returns parameter names, not ids, for procedure blocks\n    if (block.getVars().indexOf(varName) === -1) {\n      globals.push(generator.getVariableName(varName));\n    }\n  }\n  // Add developer variables.\n  const devVarList = Variables.allDeveloperVariables(workspace);\n  for (let i = 0; i < devVarList.length; i++) {\n    globals.push(\n      generator.nameDB_!.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\n    );\n  }\n\n  const globalString = globals.length\n    ? generator.INDENT + 'global ' + globals.join(', ') + '\\n'\n    : '';\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n      generator.INDENT,\n    );\n  }\n  let branch = generator.statementToCode(block, 'STACK');\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = generator.PASS;\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.getVariableName(variables[i]);\n  }\n  let code =\n    'def ' +\n    funcName +\n    '(' +\n    args.join(', ') +\n    '):\\n' +\n    globalString +\n    xfix1 +\n    loopTrap +\n    branch +\n    xfix2 +\n    returnValue;\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\n  return null;\n}\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Call a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'None';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function procedures_callnoreturn(\n  block: Block,\n  generator: PythonGenerator,\n) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator)!;\n  return tuple[0] + '\\n';\n}\n\nexport function procedures_ifreturn(block: Block, generator: PythonGenerator) {\n  // Conditionally return value from a procedure.\n  const condition =\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'False';\n  let code = 'if ' + condition + ':\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\n      generator.INDENT,\n    );\n  }\n  if ((block as IfReturnBlock).hasReturnValue_) {\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'None';\n    code += generator.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += generator.INDENT + 'return\\n';\n  }\n  return code;\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for text blocks.\n */\n\n// Former goog.module ID: Blockly.Python.texts\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {Block} from '../../core/block.js';\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './python_generator.js';\nimport type {PythonGenerator} from './python_generator.js';\n\nexport function text(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n}\n\nexport function text_multiline(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order = code.indexOf('+') !== -1 ? Order.ADDITIVE : Order.ATOMIC;\n  return [code, order];\n}\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'str(...)' function.\n * Leave string literals alone.\n *\n * @param value Code evaluating to a value.\n * @returns Array containing code evaluating to a string\n *     and\n *    the order of the returned code.[string, number]\n */\nconst forceString = function (value: string): [string, Order] {\n  if (strRegExp.test(value)) {\n    return [value, Order.ATOMIC];\n  }\n  return ['str(' + value + ')', Order.FUNCTION_CALL];\n};\n\nexport function text_join(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Create a string made up of any number of elements of any type.\n  // Should we allow joining by '-' or ',' or any other characters?\n  const joinBlock = block as JoinMutatorBlock;\n  switch (joinBlock.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n      const element1 = generator.valueToCode(block, 'ADD1', Order.NONE) || \"''\";\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\n      return [code, Order.ADDITIVE];\n    }\n    default: {\n      const elements = [];\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\n        elements[i] =\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n      }\n      const tempVar = generator.nameDB_!.getDistinctName(\n        'x',\n        NameType.VARIABLE,\n      );\n      const code =\n        \"''.join([str(\" +\n        tempVar +\n        ') for ' +\n        tempVar +\n        ' in [' +\n        elements.join(', ') +\n        ']])';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n}\n\nexport function text_append(block: Block, generator: PythonGenerator) {\n  // Append to a variable in place.\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return varName + ' = str(' + varName + ') + ' + forceString(value)[0] + '\\n';\n}\n\nexport function text_length(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  return ['len(' + text + ')', Order.FUNCTION_CALL];\n}\n\nexport function text_isEmpty(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  const code = 'not len(' + text + ')';\n  return [code, Order.LOGICAL_NOT];\n}\n\nexport function text_indexOf(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Search the text for a substring.\n  // Should we allow for non-case sensitive???\n  const operator = block.getFieldValue('END') === 'FIRST' ? 'find' : 'rfind';\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITIVE];\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_charAt(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '[0]';\n      return [code, Order.MEMBER];\n    }\n    case 'LAST': {\n      const code = text + '[-1]';\n      return [code, Order.MEMBER];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjustedInt(block, 'AT');\n      const code = text + '[' + at + ']';\n      return [code, Order.MEMBER];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\n      const code = text + '[' + at + ']';\n      return [code, Order.MEMBER];\n    }\n    case 'RANDOM': {\n      // TODO(#7600): find better approach than casting to any to override\n      // CodeGenerator declaring .definitions protected (here and below).\n      (generator as AnyDuringMigration).definitions_['import_random'] =\n        'import random';\n      const functionName = generator.provideFunction_(\n        'text_random_letter',\n        `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(text):\n  x = int(random.random() * len(text))\n  return text[x]\n`,\n      );\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n}\n\nexport function text_getSubstring(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const text = generator.valueToCode(block, 'STRING', Order.MEMBER) || \"''\";\n  let at1;\n  switch (where1) {\n    case 'FROM_START':\n      at1 = generator.getAdjustedInt(block, 'AT1');\n      if (at1 === 0) {\n        at1 = '';\n      }\n      break;\n    case 'FROM_END':\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\n      break;\n    case 'FIRST':\n      at1 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n\n  let at2;\n  switch (where2) {\n    case 'FROM_START':\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\n      break;\n    case 'FROM_END':\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\n      // Ensure that if the result calculated is 0 that sub-sequence will\n      // include all elements as expected.\n      if (!stringUtils.isNumber(String(at2))) {\n        (generator as AnyDuringMigration).definitions_['import_sys'] =\n          'import sys';\n        at2 += ' or sys.maxsize';\n      } else if (at2 === 0) {\n        at2 = '';\n      }\n      break;\n    case 'LAST':\n      at2 = '';\n      break;\n    default:\n      throw Error('Unhandled option (text_getSubstring)');\n  }\n  const code = text + '[' + at1 + ' : ' + at2 + ']';\n  return [code, Order.MEMBER];\n}\n\nexport function text_changeCase(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.upper()',\n    'LOWERCASE': '.lower()',\n    'TITLECASE': '.title()',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + operator;\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_trim(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': '.lstrip()',\n    'RIGHT': '.rstrip()',\n    'BOTH': '.strip()',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + operator;\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_print(block: Block, generator: PythonGenerator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ')\\n';\n}\n\nexport function text_prompt_ext(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Prompt function.\n  const functionName = generator.provideFunction_(\n    'text_prompt',\n    `\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg):\n  try:\n    return raw_input(msg)\n  except NameError:\n    return input(msg)\n`,\n  );\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = functionName + '(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'float(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const code = text + '.count(' + sub + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_replace(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const code = text + '.replace(' + from + ', ' + to + ')';\n  return [code, Order.MEMBER];\n}\n\nexport function text_reverse(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + '[::-1]';\n  return [code, Order.MEMBER];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for variable blocks.\n */\n\n// Former goog.module ID: Blockly.Python.variables\n\nimport type {Block} from '../../core/block.js';\nimport type {PythonGenerator} from './python_generator.js';\nimport {Order} from './python_generator.js';\n\nexport function variables_get(\n  block: Block,\n  generator: PythonGenerator,\n): [string, Order] {\n  // Variable getter.\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n}\n\nexport function variables_set(block: Block, generator: PythonGenerator) {\n  // Variable setter.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + '\\n';\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Python code generator class, including helper methods for\n * generating Python for blocks.\n */\n\n// Former goog.module ID: Blockly.Python\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport * as Variables from '../../core/variables.js';\nimport type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {Names} from '../../core/names.js';\nimport type {Workspace} from '../../core/workspace.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\n\n/**\n * Order of operation ENUMs.\n * http://docs.python.org/reference/expressions.html#summary\n */\n// prettier-ignore\nexport enum Order {\n  ATOMIC = 0,             // 0 \"\" ...\n  COLLECTION = 1,         // tuples, lists, dictionaries\n  STRING_CONVERSION = 1,  // `expression...`\n  MEMBER = 2.1,           // . []\n  FUNCTION_CALL = 2.2,    // ()\n  EXPONENTIATION = 3,     // **\n  UNARY_SIGN = 4,         // + -\n  BITWISE_NOT = 4,        // ~\n  MULTIPLICATIVE = 5,     // * / // %\n  ADDITIVE = 6,           // + -\n  BITWISE_SHIFT = 7,      // << >>\n  BITWISE_AND = 8,        // &\n  BITWISE_XOR = 9,        // ^\n  BITWISE_OR = 10,        // |\n  RELATIONAL = 11,        // in, not in, is, is not, >, >=, <>, !=, ==\n  LOGICAL_NOT = 12,       // not\n  LOGICAL_AND = 13,       // and\n  LOGICAL_OR = 14,        // or\n  CONDITIONAL = 15,       // if else\n  LAMBDA = 16,            // lambda\n  NONE = 99,              // (...)\n}\n\n/**\n * PythonScript code generator class.\n */\nexport class PythonGenerator extends CodeGenerator {\n  /** List of outer-inner pairings that do NOT require parentheses. */\n  ORDER_OVERRIDES: [Order, Order][] = [\n    // (foo()).bar -> foo().bar\n    // (foo())[0] -> foo()[0]\n    [Order.FUNCTION_CALL, Order.MEMBER],\n    // (foo())() -> foo()()\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\n    // (foo.bar).baz -> foo.bar.baz\n    // (foo.bar)[0] -> foo.bar[0]\n    // (foo[0]).bar -> foo[0].bar\n    // (foo[0])[1] -> foo[0][1]\n    [Order.MEMBER, Order.MEMBER],\n    // (foo.bar)() -> foo.bar()\n    // (foo[0])() -> foo[0]()\n    [Order.MEMBER, Order.FUNCTION_CALL],\n\n    // not (not foo) -> not not foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a and (b and c) -> a and b and c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a or (b or c) -> a or b or c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR],\n  ];\n\n  /**\n   * Empty loops or conditionals are not allowed in Python.\n   */\n  PASS: string = ''; // Initialised by init().\n\n  /** @param name Name of the language the generator is for. */\n  constructor(name = 'Python') {\n    super(name);\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      // Must assign Order[key] to a temporary to get the type guard to work;\n      // see https://github.com/microsoft/TypeScript/issues/10530.\n      const value = Order[key];\n      // Skip reverse-lookup entries in the enum.  Due to\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\n      // of TypeScript 5.5.2) actually narrows the type of value to\n      // never - but that still allows the following assignment to\n      // succeed.\n      if (typeof value === 'string') continue;\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // import keyword\n      // print(','.join(sorted(keyword.kwlist)))\n      // https://docs.python.org/3/reference/lexical_analysis.html#keywords\n      // https://docs.python.org/2/reference/lexical_analysis.html#keywords\n      'False,None,True,and,as,assert,break,class,continue,def,del,elif,else,' +\n        'except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,' +\n        'not,or,pass,print,raise,return,try,while,with,yield,' +\n        // https://docs.python.org/3/library/constants.html\n        // https://docs.python.org/2/library/constants.html\n        'NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,' +\n        // >>> print(','.join(sorted(dir(__builtins__))))\n        // https://docs.python.org/3/library/functions.html\n        // https://docs.python.org/2/library/functions.html\n        'ArithmeticError,AssertionError,AttributeError,BaseException,' +\n        'BlockingIOError,BrokenPipeError,BufferError,BytesWarning,' +\n        'ChildProcessError,ConnectionAbortedError,ConnectionError,' +\n        'ConnectionRefusedError,ConnectionResetError,DeprecationWarning,' +\n        'EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,' +\n        'FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,' +\n        'IOError,ImportError,ImportWarning,IndentationError,IndexError,' +\n        'InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,' +\n        'LookupError,MemoryError,ModuleNotFoundError,NameError,' +\n        'NotADirectoryError,NotImplemented,NotImplementedError,OSError,' +\n        'OverflowError,PendingDeprecationWarning,PermissionError,' +\n        'ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,' +\n        'RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,' +\n        'StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,' +\n        'TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,' +\n        'UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,' +\n        'UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,' +\n        '__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,' +\n        'abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,' +\n        'callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,' +\n        'delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,' +\n        'float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,' +\n        'int,intern,isinstance,issubclass,iter,len,license,list,locals,long,' +\n        'map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,' +\n        'quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,' +\n        'slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,' +\n        'vars,xrange,zip',\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   *\n   * @param workspace Workspace to generate code from.\n   */\n  init(workspace: Workspace) {\n    super.init(workspace);\n\n    this.PASS = this.INDENT + 'pass\\n';\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(\n        this.nameDB_.getName(devVarList[i], Names.DEVELOPER_VARIABLE_TYPE) +\n          ' = None',\n      );\n    }\n\n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(this.getVariableName(variables[i].getId()) + ' = None');\n    }\n\n    this.definitions_['variables'] = defvars.join('\\n');\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with import statements and variable definitions.\n   *\n   * @param code Generated code.\n   * @returns Completed code.\n   */\n  finish(code: string): string {\n    // Convert the definitions dictionary into a list.\n    const imports = [];\n    const definitions = [];\n    for (let name in this.definitions_) {\n      const def = this.definitions_[name];\n      if (def.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/)) {\n        imports.push(def);\n      } else {\n        definitions.push(def);\n      }\n    }\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_!.reset();\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.\n   *\n   * @param line Line of generated code.\n   * @returns Legal line of code.\n   */\n  scrubNakedValue(line: string): string {\n    return line + '\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped Python string, complete with quotes.\n   *\n   * @param string Text to encode.\n   * @returns Python string.\n   */\n  quote_(string: string): string {\n    string = string.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\\\n');\n\n    // Follow the CPython behaviour of repr() for a non-byte string.\n    let quote = \"'\";\n    if (string.indexOf(\"'\") !== -1) {\n      if (string.indexOf('\"') === -1) {\n        quote = '\"';\n      } else {\n        string = string.replace(/'/g, \"\\\\'\");\n      }\n    }\n    return quote + string + quote;\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline Python string, complete\n   * with quotes.\n   *\n   * @param string Text to encode.\n   * @returns Python string.\n   */\n  multiline_quote_(string: string): string {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // + '\\n' +\n    return lines.join(\" + '\\\\n' + \\n\");\n  }\n\n  /**\n   * Common tasks for generating Python from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   *\n   * @param block The current block.\n   * @param code The Python code created for this block.\n   * @param thisOnly True to generate code for only this statement.\n   * @returns Python code with comments and subsequent blocks added.\n\n   */\n  scrub_(block: Block, code: string, thisOnly = false): string {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment + '\\n', '# ');\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection!.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '# ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n      block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n\n  /**\n   * Gets a property and adjusts the value, taking into account indexing.\n   * If a static int, casts to an integer, otherwise returns a code string.\n   *\n   * @param block The block.\n   * @param atId The ID of the input block to get (and adjust) the value of.\n   * @param delta Value to add.\n   * @param negate Whether to negate the value.\n   * @returns The adjusted value or code that evaluates to it.\n   */\n  getAdjustedInt(\n    block: Block,\n    atId: string,\n    delta = 0,\n    negate = false,\n  ): string | number {\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n    const atOrder = delta ? Order.ADDITIVE : Order.NONE;\n    let at: string | number =\n      this.valueToCode(block, atId, atOrder) || defaultAtIndex;\n\n    if (stringUtils.isNumber(at)) {\n      // If the index is a naked number, adjust it right now.\n      at = parseInt(at, 10) + delta;\n      if (negate) {\n        at = -at;\n      }\n    } else {\n      // If the index is dynamic, adjust it in code.\n      if (delta > 0) {\n        at = 'int(' + at + ' + ' + delta + ')';\n      } else if (delta < 0) {\n        at = 'int(' + at + ' - ' + -delta + ')';\n      } else {\n        at = 'int(' + at + ')';\n      }\n      if (negate) {\n        at = '-' + at;\n      }\n    }\n    return at;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Python for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.Python.variablesDynamic\n\n// generator is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Instantiate a PythonGenerator and populate it with the\n * complete set of block generator functions for Python.  This is the\n * entrypoint for python_compressed.js.\n */\n\n// Former goog.module ID: Blockly.Python.all\n\nimport {PythonGenerator} from './python/python_generator.js';\nimport * as colour from './python/colour.js';\nimport * as lists from './python/lists.js';\nimport * as logic from './python/logic.js';\nimport * as loops from './python/loops.js';\nimport * as math from './python/math.js';\nimport * as procedures from './python/procedures.js';\nimport * as text from './python/text.js';\nimport * as variables from './python/variables.js';\nimport * as variablesDynamic from './python/variables_dynamic.js';\n\nexport * from './python/python_generator.js';\n\n/**\n * Python code generator instance.\n * @type {!PythonGenerator}\n */\nexport const pythonGenerator = new PythonGenerator();\n\n// Add reserved words.  This list should include all words mentioned\n// in RESERVED WORDS: comments in the imports above.\npythonGenerator.addReservedWords('math,random,Number');\n\n// Install per-block-type generator functions:\n// Install per-block-type generator functions:\nconst generators: typeof pythonGenerator.forBlock = {\n  ...colour,\n  ...lists,\n  ...logic,\n  ...loops,\n  ...math,\n  ...procedures,\n  ...text,\n  ...variables,\n  ...variablesDynamic,\n};\nfor (const name in generators) {\n  pythonGenerator.forBlock[name] = generators[name];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;EAgBM,IAAAA,wDAAA,YAAAA,CACJC,CAD2B,EAE3BC,CAF2B,EAED;MAI1B,OAAO,CADMA,CAAU,CAAAC,MAAV,CAAiBF,CAAM,CAAAG,aAAN,CAAoB,QAApB,CAAjB,CACN,EAAOC,0DAAM,CAAAC,MAAb,CAJmB;IAAA,CAFtB;IASAC,wDAAA,YAAAA,CACJN,CAD2B,EAE3BC,CAF2B,EAED;MAKzBA,CAAiC,CAAAM,YAAjC,CAAAC,aAAA,GACC,eAEF;MAAA,OAAO,CADM,wCACN,EAAOJ,0DAAM,CAAAK,aAAb,CARmB;IAAA,CAXtB;IAsBAC,qDAAA,YAAAA,CACJV,CADwB,EAExBC,CAFwB,EAEE;MAG1B,MAAMU,CAAA,GAAeV,CAAU,CAAAW,gBAAV,CACnB,YADmB,EAEnB;MACEX,CAAU,CAAAY,0BADZ;;;;;CAFmB,CAArB;QAUMC,CAAA,GAAIb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,EAAoCI,0DAAM,CAAAY,IAA1C,CAAJ,IAAuD,CAV7D;QAWMC,CAAA,GAAIhB,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CAAJ,IAAyD,CACzD;MAAAhB,CAAA,GAAIC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAJ,IAAwD,CAE9D;MAAA,OAAO,CADML,CACN,GADqB,GACrB,GAD2BG,CAC3B,GAD+B,IAC/B,GADsCG,CACtC,GAD0C,IAC1C,GADiDjB,CACjD,GADqD,GACrD,EAAOI,0DAAM,CAAAK,aAAb,CAjBmB;IAAA,CAxBtB;IA4CAS,uDAAA,YAAAA,CACJlB,CAD0B,EAE1BC,CAF0B,EAEA;MAG1B,MAAMU,CAAA,GAAeV,CAAU,CAAAW,gBAAV,CACnB,cADmB,EAEnB;MACEX,CAAU,CAAAY,0BADZ;;;;;;;;;CAFmB,CAArB;QAcMC,CAAA,GACJb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,SAA7B,EAAwCI,0DAAM,CAAAY,IAA9C,CADI,IACmD,WAfzD;QAgBMC,CAAA,GACJhB,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,SAA7B,EAAwCI,0DAAM,CAAAY,IAA9C,CADI,IACmD,WACnD;MAAAhB,CAAA,GAAQC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CAAR,IAA6D,CAGnE;MAAA,OAAO,CADLL,CACK,GADU,GACV,GADgBG,CAChB,GAD0B,IAC1B,GADiCG,CACjC,GAD2C,IAC3C,GADkDjB,CAClD,GAD0D,GAC1D,EAAOI,0DAAM,CAAAK,aAAb,CAxBmB;IAAA,CA9CtB;ICGAU,4DAAA,YAAAA,CACJnB,CADgC,EAEhCC,CAFgC,EAEN;MAG1B,OAAO,CAAC,IAAD,EAAOG,0DAAM,CAAAC,MAAb,CAHmB;IAAA,CDLtB;ICWAe,2DAAA,YAAAA,CACJpB,CAD+B,EAE/BC,CAF+B,EAEL;MAI1B,MAAMU,CAAA,GAAeU,KAAJ,CADOrB,CACmB,CAAAsB,UAA1B,CACjB;MAAA,KAAK,IAAIR,CAAA,GAAI,CAAb,EAAgBA,CAAhB,GAFwBd,CAEY,CAAAsB,UAApC,EAAgDR,CAAA,EAAhD,EACEH,CAAA,CAASG,CAAT,IAAcb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,GAAqCc,CAArC,EAAwCV,0DAAM,CAAAY,IAA9C,CAAd,IAAqE,MAGvE;MAAA,OAAO,CADM,GACN,GADYL,CAAS,CAAAY,IAAT,CAAc,IAAd,CACZ,GADkC,GAClC,EAAOnB,0DAAM,CAAAC,MAAb,CATmB;IAAA,CDbtB;ICyBAmB,sDAAA,YAAAA,CACJxB,CAD0B,EAE1BC,CAF0B,EAEA;MAG1B,MAAMU,CAAA,GAAOV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAP,IAA2D,MAC3D;MAAAhB,CAAA,GACJC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,EAAoCI,0DAAM,CAAAqB,cAA1C,CADI,IACyD,GAE/D;MAAA,OAAO,CADM,GACN,GADYd,CACZ,GADmB,MACnB,GAD4BX,CAC5B,EAAOI,0DAAM,CAAAqB,cAAb,CAPmB;IAAA,CD3BtB;ICqCAC,sDAAA,YAAAA,CACJ1B,CAD0B,EAE1BC,CAF0B,EAEA;MAI1B,OAAO,CAAC,MAAD,IADMA,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CACN,IAD2D,IAC3D,IAAiB,GAAjB,EAAsBZ,0DAAM,CAAAK,aAA5B,CAJmB;IAAA,CDvCtB;IC8CAkB,uDAAA,YAAAA,CACJ3B,CAD2B,EAE3BC,CAF2B,EAED;MAK1B,OAAO,CADM,UACN,IAFMA,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CAEN,IAF2D,IAE3D,IAD0B,GAC1B,EAAOZ,0DAAM,CAAAwB,WAAb,CALmB;IAAA,CDhDtB;ICwDAC,uDAAA,YAAAA,CACJ7B,CAD2B,EAE3BC,CAF2B,EAED;MAG1B,MAAMU,CAAA,GAAOV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAP,IAA2D,IAAjE;QACMF,CAAA,GAAOb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CAAP,IAA4D,IAClE;MAAA,IAAIC,CAAA,GAAa,KAAjB;QACIa,CAAA,GAAuB,EAD3B;QAEIC,CAAA,GAAsB,MAEtB;OAAM,CAAAC,SAAU,CAAAC,OAAQ,CAAAC,aAA5B,KACEjB,CAEA,GAFa,IAEb,EADAa,CACA,GADuB,MACvB,EAAAC,CAAA,GAAsB,EAHxB,CA6BA;MAAA,OAAO,EAtB4B,OAAnC,KAAI/B,CAAM,CAAAG,aAAN,CAAoB,KAApB,CAAJ,GACiBF,CAAU,CAAAW,gBAAV,CACb,aADa,EAEb;MACAX,CAAU,CAAAY,0BADV;oCAE8BiB,CAF9B;mBAGab,CAHb;;CAFa,CADjB,GAWiBhB,CAAU,CAAAW,gBAAV,CACb,YADa,EAEb;MACAX,CAAU,CAAAY,0BADV;yDAEmDkB,CAFnD;mBAGad,CAHb;;CAFa,CAWV,IADqB,GACrB,GAD2BH,CAC3B,GADkC,IAClC,GADyCH,CACzC,GADgD,GAChD,EAAOP,0DAAM,CAAAK,aAAb,CAtCmB;IAAA,CD1DtB;ICmGA0B,wDAAA,YAAAA,CACJnC,CAD4B,EAE5BC,CAF4B,EAEF;MAI1B,MAAMU,CAAA,GAAOX,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAAP,IAAsC,KAA5C;QACMW,CAAA,GAAQd,CAAM,CAAAG,aAAN,CAAoB,OAApB,CAAR,IAAwC,YAE9C;MAAA,IAAMc,CAAA,GAAOhB,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EADe,QAAV,KAAAc,CAAA,GAAqBV,0DAAM,CAAAY,IAA3B,GAAkCZ,0DAAM,CAAAgC,MAC7C,CAAP,IAA2D,IAEjE;MAAA,QAAQtB,CAAR;QACE,KAAK,OAAL;UACE,IAAa,KAAb,KAAIH,CAAJ,EAEE,OAAO,CADMM,CACN,GADa,KACb,EAAOb,0DAAM,CAAAgC,MAAb,CACF;cAAa,YAAb,KAAIzB,CAAJ,EAEL,OAAO,CADMM,CACN,GADa,SACb,EAAOb,0DAAM,CAAAK,aAAb,CACF;UAAA,IAAa,QAAb,KAAIE,CAAJ,EACL,OAAOM,CAAP,GAAc,WAEhB;UAAA;QACF,KAAK,MAAL;UACE,IAAa,KAAb,KAAIN,CAAJ,EAEE,OAAO,CADMM,CACN,GADa,MACb,EAAOb,0DAAM,CAAAgC,MAAb,CACF;UAAA,IAAa,YAAb,KAAIzB,CAAJ,EAEL,OAAO,CADMM,CACN,GADa,QACb,EAAOb,0DAAM,CAAAK,aAAb,CACF;UAAA,IAAa,QAAb,KAAIE,CAAJ,EACL,OAAOM,CAAP,GAAc,UAEhB;UAAA;QACF,KAAK,YAAL;UACQjB,CAAA,GAAKC,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,IAAhC,CACX;UAAA,IAAa,KAAb,KAAIW,CAAJ,EAEE,OAAO,CADMM,CACN,GADa,GACb,GADmBjB,CACnB,GADwB,GACxB,EAAOI,0DAAM,CAAAgC,MAAb,CACF;cAAa,YAAb,KAAIzB,CAAJ,EAEL,OAAO,CADMM,CACN,GADa,OACb,GADuBjB,CACvB,GAD4B,GAC5B,EAAOI,0DAAM,CAAAK,aAAb,CACF;UAAA,IAAa,QAAb,KAAIE,CAAJ,EACL,OAAOM,CAAP,GAAc,OAAd,GAAwBjB,CAAxB,GAA6B,KAE/B;UAAA;QAEF,KAAK,UAAL;UACQA,CAAA,GAAKC,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,IAAhC,EAAsC,CAAtC,EAAyC,EAAzC,CACX;UAAA,IAAa,KAAb,KAAIW,CAAJ,EAEE,OAAO,CADMM,CACN,GADa,GACb,GADmBjB,CACnB,GADwB,GACxB,EAAOI,0DAAM,CAAAgC,MAAb,CACF;UAAA,IAAa,YAAb,KAAIzB,CAAJ,EAEL,OAAO,CADMM,CACN,GADa,OACb,GADuBjB,CACvB,GAD4B,GAC5B,EAAOI,0DAAM,CAAAK,aAAb,CACF;UAAA,IAAa,QAAb,KAAIE,CAAJ,EACL,OAAOM,CAAP,GAAc,OAAd,GAAwBjB,CAAxB,GAA6B,KAE/B;UAAA;QAEF,KAAK,QAAL;UACGC,CAAiC,CAAAM,YAAjC,CAAAC,aAAA,GACC,eACF;UAAA,IAAa,KAAb,KAAIG,CAAJ,EAEE,OAAO,CADM,gBACN,GADyBM,CACzB,GADgC,GAChC,EAAOb,0DAAM,CAAAK,aAAb,CAUD;UAAAQ,CAAA,GARehB,CAAU,CAAAW,gBAAV,CACnB,0BADmB,EAEnB;MACJX,CAAU,CAAAY,0BADN;;;CAFmB,CAQf,GAAsB,GAAtB,GAA4BI,CAA5B,GAAmC,GACzC;UAAA,IAAa,YAAb,KAAIN,CAAJ,EACE,OAAO,CAACM,CAAD,EAAOb,0DAAM,CAAAK,aAAb,CACF;UAAA,IAAa,QAAb,KAAIE,CAAJ,EACL,OAAOM,CAAP,GAAc,IApEtB;MAAA;MAyEA,MAAMqB,KAAA,CAAM,yCAAN,CAAN;IAlF0B,CDrGtB;IC0LAC,wDAAA,YAAAA,CAAyBvC,CAAD,EAAeC,CAAf,EAAyC;MAGrE,IAAIU,CAAA,GAAOV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAgC,MAA3C,CAAP,IAA6D,IACjE;MAAA,MAAMtB,CAAA,GAAOd,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAAP,IAAsC,KAC5C;MAAA,IAAMc,CAAA,GAAQjB,CAAM,CAAAG,aAAN,CAAoB,OAApB,CAAR,IAAwC,YAC9C;MAAA,MAAM2B,CAAA,GAAQ7B,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,IAA7B,EAAmCI,0DAAM,CAAAY,IAAzC,CAAR,IAA0D,MAgBhE;MAAA,QAAQC,CAAR;QACE,KAAK,OAAL;UACE,IAAa,KAAb,KAAIH,CAAJ,EACE,OAAOH,CAAP,GAAc,QAAd,GAAyBmB,CAAzB,GAAiC,IAC5B;UAAA,IAAa,QAAb,KAAIhB,CAAJ,EACL,OAAOH,CAAP,GAAc,aAAd,GAA8BmB,CAA9B,GAAsC,KAExC;UAAA;QACF,KAAK,MAAL;UACE,IAAa,KAAb,KAAIhB,CAAJ,EACE,OAAOH,CAAP,GAAc,SAAd,GAA0BmB,CAA1B,GAAkC,IAC7B;UAAA,IAAa,QAAb,KAAIhB,CAAJ,EACL,OAAOH,CAAP,GAAc,UAAd,GAA2BmB,CAA3B,GAAmC,KAErC;UAAA;QACF,KAAK,YAAL;UACQ7B,CAAA,GAAKA,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,IAAhC,CACX;UAAA,IAAa,KAAb,KAAIc,CAAJ,EACE,OAAOH,CAAP,GAAc,GAAd,GAAoBV,CAApB,GAAyB,MAAzB,GAAkC6B,CAAlC,GAA0C,IACrC;UAAA,IAAa,QAAb,KAAIhB,CAAJ,EACL,OAAOH,CAAP,GAAc,UAAd,GAA2BV,CAA3B,GAAgC,IAAhC,GAAuC6B,CAAvC,GAA+C,KAEjD;UAAA;QAEF,KAAK,UAAL;UACQ7B,CAAA,GAAKA,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,IAAhC,EAAsC,CAAtC,EAAyC,EAAzC,CACX;UAAA,IAAa,KAAb,KAAIc,CAAJ,EACE,OAAOH,CAAP,GAAc,GAAd,GAAoBV,CAApB,GAAyB,MAAzB,GAAkC6B,CAAlC,GAA0C,IACrC;UAAA,IAAa,QAAb,KAAIhB,CAAJ,EACL,OAAOH,CAAP,GAAc,UAAd,GAA2BV,CAA3B,GAAgC,IAAhC,GAAuC6B,CAAvC,GAA+C,KAEjD;UAAA;QAEF,KAAK,QAAL;UACG7B,CAAiC,CAAAM,YAAjC,CAAAC,aAAA,GACC,eA/CA;UAAAG,CAAK,CAAA6B,KAAL,CAAW,OAAX,CAAJ,GACExC,CADF,GACS,EADT,IAGMA,CAMN,GANgBC,CAAU,CAAAwC,OAAS,CAAAC,eAAnB,CACd,UADc,EAEdC,CAAA,CAAAC,qCAAS,CAAAC,QAFK,CAMhB,EAFM5B,CAEN,GAFajB,CAEb,GAFuB,KAEvB,GAF+BW,CAE/B,GAFsC,IAEtC,EADAA,CACA,GADOX,CACP,EAAAA,CAAA,GAAOiB,CATP,CAiDQ;UAAAhB,CAAA,GAAOA,CAAU,CAAAwC,OAAS,CAAAC,eAAnB,CACX,OADW,EAEXC,CAAA,CAAAC,qCAAS,CAAAC,QAFE,CAIb;UAAA7C,CAAA,IAAQC,CAAR,GAAe,+BAAf,GAAiDU,CAAjD,GAAwD,MACxD;UAAA,IAAa,KAAb,KAAIG,CAAJ,EAEE,OADAd,CACA,IADQW,CACR,GADe,GACf,GADqBV,CACrB,GAD4B,MAC5B,GADqC6B,CACrC,GAD6C,IAC7C,CACK;UAAA,IAAa,QAAb,KAAIhB,CAAJ,EAEL,OADAd,CACA,IADQW,CACR,GADe,UACf,GAD4BV,CAC5B,GADmC,IACnC,GAD0C6B,CAC1C,GADkD,KAClD,CA/CN;MAAA;MAoDA,MAAMQ,KAAA,CAAM,yCAAN,CAAN;IA1EqE,CD1LjE;ICuQAQ,0DAAA,YAAAA,CACJ9C,CAD8B,EAE9BC,CAF8B,EAEJ;MAG1B,MAAMU,CAAA,GAAOV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAgC,MAA3C,CAAP,IAA6D,IACnE;MAAA,IAAMtB,CAAA,GAASd,CAAM,CAAAG,aAAN,CAAoB,QAApB,CACf;MAAA,MAAMc,CAAA,GAASjB,CAAM,CAAAG,aAAN,CAAoB,QAApB,CAEf;MAAA,QAAQW,CAAR;QACE,KAAK,YAAL;UACEA,CAAA,GAAMb,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,KAAhC,CACM;UAAA,CAAZ,KAAIc,CAAJ,KACEA,CADF,GACQ,EADR,CAGA;UAAA;QACF,KAAK,UAAL;UACEA,CAAA,GAAMb,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,KAAhC,EAAuC,CAAvC,EAA0C,EAA1C,CACN;UAAA;QACF,KAAK,OAAL;UACEc,CAAA,GAAM,EACN;UAAA;QACF;UACE,MAAMwB,KAAA,CAAM,qCAAN,CAAN;MAdJ;MAkBA,QAAQrB,CAAR;QACE,KAAK,YAAL;UACEjB,CAAA,GAAMC,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,KAAhC,EAAuC,CAAvC,CACN;UAAA;QACF,KAAK,UAAL;UACEA,CAAA,GAAMC,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,KAAhC,EAAuC,CAAvC,EAA0C,EAA1C,CAGW;UAAA2C,CAAA,CAAAI,4CAAZ,CAAqBC,MAAA,CAAOhD,CAAP,CAArB,CAAL,GAImB,CAJnB,KAIWA,CAJX,KAKEA,CALF,GAKQ,EALR,KACGC,CAAiC,CAAAM,YAAjC,CAAA0C,UAED,GADE,YACF,EAAAjD,CAAA,IAAO,iBAHT,CAOA;UAAA;QACF,KAAK,MAAL;UACEA,CAAA,GAAM,EACN;UAAA;QACF;UACE,MAAMsC,KAAA,CAAM,qCAAN,CAAN;MApBJ;MAuBA,OAAO,CADM3B,CACN,GADa,GACb,GADmBG,CACnB,GADyB,KACzB,GADiCd,CACjC,GADuC,GACvC,EAAOI,0DAAM,CAAAgC,MAAb,CAhDmB;IAAA,CDzQtB;IC4TAc,oDAAA,YAAAA,CACJlD,CADwB,EAExBC,CAFwB,EAEE;MAG1B,MAAMU,CAAA,GAAOV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAP,IAA2D,IAAjE;QACMF,CAAA,GAAOd,CAAM,CAAAG,aAAN,CAAoB,MAApB,CACP;OAAA,GAA+C,GAArC,KAAAH,CAAM,CAAAG,aAAN,CAAoB,WAApB,IAA2C,OAA3C,GAAqD,MAuBrE;MAAA,OAAO,CAtBkBF,CAAU,CAAAW,gBAAV,CACvB,YADuB,EAEvB;MACEX,CAAU,CAAAY,0BADZ;;;;;;;;;;;;;;CAFuB,CAsBlB,GADc,GACd,GADoBF,CACpB,GAD2B,KAC3B,GADmCG,CACnC,GAD0C,KAC1C,GADkDd,CAClD,GAD4D,GAC5D,EAAOI,0DAAM,CAAAK,aAAb,CA5BmB;IAAA,CD9TtB;IC6VA0C,qDAAA,YAAAA,CACJnD,CADyB,EAEzBC,CAFyB,EAEC;MAG1B,IAAMU,CAAA,GAAOX,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAEb;MAAA,IAAa,OAAb,KAAIQ,CAAJ,EACQA,CAGN,GAFEV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAgC,MAA5C,CAEF,IAFyD,IAEzD,EADMpC,CACN,GADoBC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CACpB,EAAAhB,CAAA,GAAOW,CAAP,GAAqB,SAArB,GAAiCX,CAAjC,GAA+C,GAJjD,MAKO,IAAa,MAAb,KAAIW,CAAJ,EACCA,CAIN,GAHEV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CAGF,IAHuD,IAGvD,EAAAhB,CAAA,IADEC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAgC,MAA5C,CACF,IADyD,IACzD,IAAqB,QAArB,GAAgCzB,CAAhC,GAA8C,GALzC,MAOL,MAAM2B,KAAA,CAAM,gBAAN,GAAyB3B,CAAzB,CAAN;MAEF,OAAO,CAACX,CAAD,EAAOI,0DAAM,CAAAK,aAAb,CAnBmB;IAAA,CD/VtB;ICqXA2C,uDAAA,YAAAA,CACJpD,CAD2B,EAE3BC,CAF2B,EAED;MAK1B,OAAO,CADM,gBACN,IAFMA,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAEN,IAF0D,IAE1D,IADgC,IAChC,EAAOZ,0DAAM,CAAAK,aAAb,CALmB;IAAA,CDvXtB;IEAA4C,qDAAA,YAAAA,CAAsBrD,CAAD,EAAeC,CAAf,EAAyC;MAElE,IAAIU,CAAA,GAAI,CAAR;QACIG,CAAA,GAAO,EADX;QAEEG,CAFF;QAGEa,CACE;MAAA7B,CAAU,CAAAqD,gBAAd,KAEExC,CAFF,IAEUb,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAAqD,gBAA7B,EAA+CtD,CAA/C,CAFV,CAIA;MAAA,GACE8B,CAWA,GAVE7B,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,IAA7B,GAAoCW,CAApC,EAAuCP,0DAAM,CAAAY,IAA7C,CAUF,IAVwD,OAUxD,EATAC,CASA,GATahB,CAAU,CAAAuD,eAAV,CAA0BxD,CAA1B,EAAiC,IAAjC,GAAwCW,CAAxC,CASb,IAT2DV,CAAU,CAAAwD,IASrE,EARIxD,CAAU,CAAAyD,gBAQd,KAPEzC,CAOF,GANIhB,CAAU,CAAA0D,WAAV,CACE1D,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAAyD,gBAA7B,EAA+C1D,CAA/C,CADF,EAEEC,CAAU,CAAA2D,MAFZ,CAMJ,GAHQ3C,CAGR,GADAH,CACA,KADe,CAAN,KAAAH,CAAA,GAAU,KAAV,GAAkB,OAC3B,IADsCmB,CACtC,GADsD,KACtD,GAD8Db,CAC9D,EAAAN,CAAA,EAZF,SAaSX,CAAM,CAAA6D,QAAN,CAAe,IAAf,GAAsBlD,CAAtB,CAbT;MAeA,IAAIX,CAAM,CAAA6D,QAAN,CAAe,MAAf,CAAJ,IAA8B5D,CAAU,CAAAyD,gBAAxC,EACEzC,CAQA,GARahB,CAAU,CAAAuD,eAAV,CAA0BxD,CAA1B,EAAiC,MAAjC,CAQb,IARyDC,CAAU,CAAAwD,IAQnE,EAPIxD,CAAU,CAAAyD,gBAOd,KANEzC,CAMF,GALIhB,CAAU,CAAA0D,WAAV,CACE1D,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAAyD,gBAA7B,EAA+C1D,CAA/C,CADF,EAEEC,CAAU,CAAA2D,MAFZ,CAKJ,GAFQ3C,CAER,GAAAH,CAAA,IAAQ,SAAR,GAAoBG,CAEtB;MAAA,OAAOH,CApC2D;IAAA,CFA9D;IEyCAgD,uDAAA,YAAAA,CACJ9D,CAD2B,EAE3BC,CAF2B,EAED;MAY1B,MAAMU,CAAA,GATY;UAChBoD,EAAA,EAAM,IADU;UAEhBC,GAAA,EAAO,IAFS;UAGhBC,EAAA,EAAM,GAHU;UAIhBC,GAAA,EAAO,IAJS;UAKhBC,EAAA,EAAM,GALU;UAMhBC,GAAA,EAAO;QANS,CASD,CAAUpE,CAAM,CAAAG,aAAN,CAAoB,IAApB,CAAV,CAAjB;QACMW,CAAA,GAAQV,0DAAM,CAAAiE,UADpB;QAEMpD,CAAA,GAAYhB,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,GAA7B,EAAkCc,CAAlC,CAAZ,IAAwD,GACxD;MAAAd,CAAA,GAAYC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,GAA7B,EAAkCc,CAAlC,CAAZ,IAAwD,GAE9D;MAAA,OAAO,CADMG,CACN,GADkB,GAClB,GADwBN,CACxB,GADmC,GACnC,GADyCX,CACzC,EAAOc,CAAP,CAjBmB;IAAA,CF3CtB;IE+DAwD,yDAAA,YAAAA,CACJtE,CAD6B,EAE7BC,CAF6B,EAEH;MAG1B,MAAMU,CAAA,GAAyC,KAA9B,KAAAX,CAAM,CAAAG,aAAN,CAAoB,IAApB,IAAsC,KAAtC,GAA8C,IAA/D;QACMW,CAAA,GAAqB,KAAb,KAAAH,CAAA,GAAqBP,0DAAM,CAAAmE,WAA3B,GAAyCnE,0DAAM,CAAAoE,UAC7D;MAAA,IAAIvD,CAAA,GAAYhB,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,GAA7B,EAAkCc,CAAlC,CACZ;MAAAd,CAAA,GAAYC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,GAA7B,EAAkCc,CAAlC,CACX;MAAAG,CAAL,IAAmBjB,CAAnB,IAMQC,CAIN,GAJqC,KAAb,KAAAU,CAAA,GAAqB,MAArB,GAA8B,OAItD,EAHKM,CAGL,KAFEA,CAEF,GAFchB,CAEd,GAAKD,CAAL,KACEA,CADF,GACcC,CADd,CAVF,IAGED,CAHF,GAEEiB,CAFF,GAEc,OAad;MAAA,OAAO,CADMA,CACN,GADkB,GAClB,GADwBN,CACxB,GADmC,GACnC,GADyCX,CACzC,EAAOc,CAAP,CAtBmB;IAAA,CFjEtB;IE0FA2D,sDAAA,YAAAA,CACJzE,CAD0B,EAE1BC,CAF0B,EAEA;MAM1B,OAAO,CADM,MACN,IAFLA,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAwB,WAA3C,CAEK,IAFsD,MAEtD,GAAOxB,0DAAM,CAAAwB,WAAb,CANmB;IAAA,CF5FtB;IEqGA8C,uDAAA,YAAAA,CACJ1E,CAD2B,EAE3BC,CAF2B,EAED;MAI1B,OAAO,CADsC,MAAhC,KAAAD,CAAM,CAAAG,aAAN,CAAoB,MAApB,IAAyC,MAAzC,GAAkD,OACxD,EAAOC,0DAAM,CAAAC,MAAb,CAJmB;IAAA,CFvGtB;IE8GAsE,oDAAA,YAAAA,CACJ3E,CADwB,EAExBC,CAFwB,EAEE;MAG1B,OAAO,CAAC,MAAD,EAASG,0DAAM,CAAAC,MAAf,CAHmB;IAAA,CFhHtB;IEsHAuE,uDAAA,YAAAA,CACJ5E,CAD2B,EAE3BC,CAF2B,EAED;MAG1B,MAAMU,CAAA,GACJV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,IAA7B,EAAmCI,0DAAM,CAAAyE,WAAzC,CADI,IACqD,OAD3D;QAEM/D,CAAA,GACJb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAyE,WAA3C,CADI,IACuD,MACvD;MAAA7E,CAAA,GACJC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAyE,WAA3C,CADI,IACuD,MAE7D;MAAA,OAAO,CADM/D,CACN,GADmB,MACnB,GAD4BH,CAC5B,GADuC,QACvC,GADkDX,CAClD,EAAOI,0DAAM,CAAAyE,WAAb,CAVmB;IAAA,CFxHtB;IGGAC,6DAAA,YAAAA,CAA8B9E,CAAD,EAAeC,CAAf,EAAyC;MAE1E,IAAIU,CAGF;MAAAA,CAAA,GAFEX,CAAM,CAAA+E,QAAN,CAAe,OAAf,CAAJ,GAEY/B,MAAA,CAAOgC,QAAA,CAAShF,CAAM,CAAAG,aAAN,CAAoB,OAApB,CAAT,EAAuC,EAAvC,CAAP,CAFZ,GAKYF,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CALZ,IAKiE,GAG/D;MAAAL,CAAA,GADcgC,CAAA,CAAAI,4CAAZ,CAAqBpC,CAArB,CAAJ,GACYqE,QAAA,CAASrE,CAAT,EAAkB,EAAlB,CADZ,GAGY,MAHZ,GAGqBA,CAHrB,GAG+B,GAE/B;MAAA,IAAIG,CAAA,GAASb,CAAU,CAAAuD,eAAV,CAA0BxD,CAA1B,EAAiC,IAAjC,CACb;MAAAc,CAAA,GAASb,CAAU,CAAAgF,WAAV,CAAsBnE,CAAtB,EAA8Bd,CAA9B,CAAT,IAAiDC,CAAU,CAAAwD,IAM3D;MAAA,OADa,MACb,GALgBxD,CAAU,CAAAwC,OAAS,CAAAC,eAAnB,CACd,OADc,EAEdC,CAAA,CAAAC,qCAAS,CAAAC,QAFK,CAKhB,GADgC,YAChC,GAD+ClC,CAC/C,GADyD,MACzD,GADkEG,CArBQ;IAAA,CHHtE;IG8BAoE,6DAAA,YAAAA,CAA8BlF,CAAD,EAAeC,CAAf,EAAyC;MAE1E,MAAMU,CAAA,GAAwC,OAAxC,KAAQX,CAAM,CAAAG,aAAN,CAAoB,MAApB,CACd;UAAIW,CAAA,GACFb,CAAU,CAAAc,WAAV,CACEf,CADF,EAEE,MAFF,EAGEW,CAAA,GAAQP,0DAAM,CAAAwB,WAAd,GAA4BxB,0DAAM,CAAAY,IAHpC,CADE,IAKG,OALP;QAMIC,CAAA,GAAShB,CAAU,CAAAuD,eAAV,CAA0BxD,CAA1B,EAAiC,IAAjC,CACb;MAAAiB,CAAA,GAAShB,CAAU,CAAAgF,WAAV,CAAsBhE,CAAtB,EAA8BjB,CAA9B,CAAT,IAAiDC,CAAU,CAAAwD,IACvD;MAAA9C,CAAJ,KACEG,CADF,GACc,MADd,GACuBA,CADvB,CAGA;MAAA,OAAO,QAAP,GAAkBA,CAAlB,GAA8B,KAA9B,GAAsCG,CAdoC;IAAA,CH9BtE;IG+CAkE,sDAAA,YAAAA,CAAuBnF,CAAD,EAAeC,CAAf,EAAyC;MAEnE,MAAMU,CAAA,GAAYV,CAAU,CAAAmF,eAAV,CAA0BpF,CAAM,CAAAG,aAAN,CAAoB,KAApB,CAA1B,CAClB;MAAA,IAAIW,CAAA,GACFb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CADE,IACkD,GADtD;QAEIC,CAAA,GACFhB,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,IAA7B,EAAmCI,0DAAM,CAAAY,IAAzC,CADE,IACgD,GAHpD;QAIIc,CAAA,GACF7B,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,IAA7B,EAAmCI,0DAAM,CAAAY,IAAzC,CADE,IACgD,GACpD;MAAA,IAAIe,CAAA,GAAS9B,CAAU,CAAAuD,eAAV,CAA0BxD,CAA1B,EAAiC,IAAjC,CACb;MAAA+B,CAAA,GAAS9B,CAAU,CAAAgF,WAAV,CAAsBlD,CAAtB,EAA8B/B,CAA9B,CAAT,IAAiDC,CAAU,CAAAwD,IAE3D;MAAA,IAAI4B,CAAA,GAAO,EAIL;MAAArF,CAAA,GAAgB,SAAAA,CAAA;QACpB,OAAOC,CAAU,CAAAW,gBAAV,CACL,SADK,EAEL;MACAX,CAAU,CAAAY,0BADV;;;;CAFK,CADa;MAAA,CAWtB;MAAA,MAAMyE,CAAA,GAAkB,SAAAA,CAAA;QACtB,OAAOrF,CAAU,CAAAW,gBAAV,CACL,WADK,EAEL;MACAX,CAAU,CAAAY,0BADV;;;;CAFK,CADe;MAAA,CA0CxB;MAAA,IACc8B,CAAA,CAAAI,4CAAZ,CAAqBjC,CAArB,CADF,IAEc6B,CAAA,CAAAI,4CAAZ,CAAqB9B,CAArB,CAFF,IAGc0B,CAAA,CAAAI,4CAAZ,CAAqBjB,CAArB,CAHF,EAMEhB,CAGA,GAHYyE,MAAA,CAAOzE,CAAP,CAGZ,EAFAG,CAEA,GAFYsE,MAAA,CAAOtE,CAAP,CAEZ,EADAa,CACA,GADY0D,IAAK,CAAAC,GAAL,CAASF,MAAA,CAAOzD,CAAP,CAAT,CACZ,EAAsB,CAAtB,KAAIhB,CAAJ,GAAgB,CAAhB,IAA6C,CAA7C,KAA2BG,CAA3B,GAAuC,CAAvC,IAAoE,CAApE,KAAkDa,CAAlD,GAA8D,CAA9D,IAEMhB,CAAJ,IAAiBG,CAAjB,IAEEA,CAAA,EAQA,EALEjB,CAKF,GAPkB,CAAlB,KAAIc,CAAJ,IAAqC,CAArC,KAAuBgB,CAAvB,GAEUb,CAFV,GAIUH,CAJV,GAIsB,IAJtB,GAI6BG,CAG7B,EAAkB,CAAlB,KAAIa,CAAJ,KACE9B,CADF,IACW,IADX,GACkB8B,CADlB,CAVF,KAeEb,CAAA,EACA,EAAAjB,CAAA,GAAQc,CAAR,GAAoB,IAApB,GAA2BG,CAA3B,GAAuC,KAAvC,GAA+Ca,CAhBjD,CAkBA,EAAA9B,CAAA,GAAQ,QAAR,GAAmBA,CAAnB,GAA2B,GApB7B,KAwBIA,CAIF,GALIc,CAAJ,GAAgBG,CAAhB,GACUjB,CAAA,EADV,GAGUsF,CAAA,EAEV,EAAAtF,CAAA,IAAS,GAAT,GAAec,CAAf,GAA2B,IAA3B,GAAkCG,CAAlC,GAA8C,IAA9C,GAAqDa,CAArD,GAAiE,GA5BnE,CATF,MAuCO;QAEL,MAAM4D,CAAA,GAAQ,SAAAA,CAAUC,CAAV,EAAuBC,CAAvB,EAAqC;UACjCjD,CAAA,CAAAI,4CAAZ,CAAqB4C,CAArB,CAAJ,GAEEA,CAFF,GAEQ3C,MAAA,CAAOuC,MAAA,CAAOI,CAAP,CAAP,CAFR,GAGYA,CAAI,CAAAnD,KAAJ,CAAU,OAAV,CAHZ,KAKQoD,CAKN,GALgB3F,CAAU,CAAAwC,OAAS,CAAAC,eAAnB,CACd/B,CADc,GACFiF,CADE,EAEdjD,CAAA,CAAAC,qCAAS,CAAAC,QAFK,CAKhB,EADAwC,CACA,IADQO,CACR,GADkB,KAClB,GAD0BD,CAC1B,GADgC,IAChC,EAAAA,CAAA,GAAMC,CAVR,CAYA;UAAA,OAAOD,CAb0C;QAAA,CAe7C;QAAA7E,CAAA,GAAW4E,CAAA,CAAM5E,CAAN,EAAiB,QAAjB,CACX;QAAAG,CAAA,GAASyE,CAAA,CAAMzE,CAAN,EAAiB,MAAjB,CACT;QAAAa,CAAA,GAAS4D,CAAA,CAAM5D,CAAN,EAAiB,MAAjB,CAES;QAAA,QAAxB,KAAI,OAAOhB,CAAX,IAAsD,QAAtD,KAAoC,OAAOG,CAA3C,IAEIjB,CAIF,GALIc,CAAJ,GAAeG,CAAf,GACUjB,CAAA,EADV,GAGUsF,CAAA,EAEV,EAAAtF,CAAA,IAAS,GAAT,GAAec,CAAf,GAA0B,IAA1B,GAAiCG,CAAjC,GAA0C,IAA1C,GAAiDa,CAAjD,GAA0D,GAN5D,IASE9B,CATF,GApFE,GAoFF,GAS8Bc,CAT9B,GAlFE,MAkFF,GASwCG,CATxC,GAhFE,QAgFF,GA/EEjB,CAAA,EA+EF,GA9EE,GA8EF,GAS8Bc,CAT9B,GA5EE,IA4EF,GASwCG,CATxC,GA1EE,IA0EF,GASgDa,CAThD,GAxEE,OAwEF,GAvEEwD,CAAA,EAuEF,GAtEE,GAsEF,GAS8BxE,CAT9B,GApEE,IAoEF,GASwCG,CATxC,GAlEE,IAkEF,GASgDa,CAThD,GAhEE,GA2CG;MAAA;MAkCP,OADAuD,CACA,IADQ,MACR,GADiB1E,CACjB,GAD6B,MAC7B,GADsCX,CACtC,GAD8C,KAC9C,GADsD+B,CA7Ia;IAAA,CH/C/D;IGgMA8D,0DAAA,YAAAA,CAA2B7F,CAAD,EAAeC,CAAf,EAAyC;MAEvE,MAAMU,CAAA,GAAYV,CAAU,CAAAmF,eAAV,CAA0BpF,CAAM,CAAAG,aAAN,CAAoB,KAApB,CAA1B,CAAlB;QACMW,CAAA,GACJb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAiE,UAA3C,CADI,IACsD,IAC5D;MAAA,IAAIpD,CAAA,GAAShB,CAAU,CAAAuD,eAAV,CAA0BxD,CAA1B,EAAiC,IAAjC,CACb;MAAAiB,CAAA,GAAShB,CAAU,CAAAgF,WAAV,CAAsBhE,CAAtB,EAA8BjB,CAA9B,CAAT,IAAiDC,CAAU,CAAAwD,IAE3D;MAAA,OADa,MACb,GADsB9C,CACtB,GADkC,MAClC,GAD2CG,CAC3C,GADuD,KACvD,GAD+DG,CAPQ;IAAA,CHhMnE;IG2MA6E,kEAAA,YAAAA,CACJ9F,CADsC,EAEtCC,CAFsC,EAEZ;MAG1B,IAAIU,CAAA,GAAO,EACP;MAAAV,CAAU,CAAAqD,gBAAd,KAEE3C,CAFF,IAEUV,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAAqD,gBAA7B,EAA+CtD,CAA/C,CAFV,CAII;MAAAC,CAAU,CAAAyD,gBAAd,KAGE/C,CAHF,IAGUV,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAAyD,gBAA7B,EAA+C1D,CAA/C,CAHV,CAKA;MAAA,IAAIC,CAAU,CAAAqD,gBAAd,EAAgC;QAC9B,MAAMxC,CAAA,GAAQd,CAAiC,CAAA+F,eAAjC,EACV;QAAAjF,CAAJ,IAAY,CAACA,CAAK,CAAAkF,oBAAlB,KAIErF,CAJF,IAIUV,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAAqD,gBAA7B,EAA+CxC,CAA/C,CAJV,CAF8B;MAAA;MAShC,QAAQd,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAAR;QACE,KAAK,OAAL;UACE,OAAOQ,CAAP,GAAc,SAChB;QAAA,KAAK,UAAL;UACE,OAAOA,CAAP,GAAc,YAJlB;MAAA;MAMA,MAAM2B,KAAA,CAAM,yBAAN,CAAN;IA5B0B,CH7MtB;IIGA2D,oDAAA,YAAAA,CACJjG,CADyB,EAEzBC,CAFyB,EAEC;MAGtBD,CAAA,GAASuF,MAAA,CAAOvF,CAAM,CAAAG,aAAN,CAAoB,KAApB,CAAP,CACb;MAAA,OAAe+F,QAAf,KAAIlG,CAAJ,GACS,CAAC,cAAD,EAAiBI,0DAAM,CAAAK,aAAvB,CADT,GAEsB,CAACyF,QAAhB,KAAIlG,CAAJ,GACE,CAAC,eAAD,EAAkBI,0DAAM,CAAA+F,UAAxB,CADF,GAGE,CAACnD,MAAA,CAAOhD,CAAP,CAAD,EAA0B,CAAT,GAAAA,CAAA,GAAaI,0DAAM,CAAA+F,UAAnB,GAAgC/F,0DAAM,CAAAC,MAAvD,CATiB;IAAA,CJLtB;IIkBA+F,wDAAA,YAAAA,CACJpG,CAD6B,EAE7BC,CAF6B,EAEH;MAW1B,IAAMU,CAAA,GARoD;QACxD0F,GAAA,EAAO,CAAC,KAAD,EAAQjG,0DAAM,CAAAkG,QAAd,CADiD;QAExDC,KAAA,EAAS,CAAC,KAAD,EAAQnG,0DAAM,CAAAkG,QAAd,CAF+C;QAGxDE,QAAA,EAAY,CAAC,KAAD,EAAQpG,0DAAM,CAAAqB,cAAd,CAH4C;QAIxDgF,MAAA,EAAU,CAAC,KAAD,EAAQrG,0DAAM,CAAAqB,cAAd,CAJ8C;QAKxDiF,KAAA,EAAS,CAAC,MAAD,EAAStG,0DAAM,CAAAuG,cAAf;MAL+C,CAQ5C,CAAU3G,CAAM,CAAAG,aAAN,CAAoB,IAApB,CAAV,CACd;YAAMW,CAAA,GAAWH,CAAA,CAAM,CAAN,CACX;MAAAA,CAAA,GAAQA,CAAA,CAAM,CAAN,CACd;MAAA,MAAMM,CAAA,GAAYhB,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,GAA7B,EAAkCW,CAAlC,CAAZ,IAAwD,GACxD;MAAAX,CAAA,GAAYC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,GAA7B,EAAkCW,CAAlC,CAAZ,IAAwD,GAE9D;MAAA,OAAO,CADMM,CACN,GADkBH,CAClB,GAD6Bd,CAC7B,EAAOW,CAAP,CAjBmB;IAAA,CJpBtB;II6CAiG,oDAAA,YAAAA,CACJ5G,CADyB,EAEzBC,CAFyB,EAEC;MAG1B,MAAMU,CAAA,GAAWX,CAAM,CAAAG,aAAN,CAAoB,IAApB,CACjB;MAAA,IAAIW,CAEJ;MAAA,IAAiB,KAAjB,KAAIH,CAAJ,EAGE,OADAG,CACO,GADAb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,EAAoCI,0DAAM,CAAA+F,UAA1C,CACA,IADyD,GACzD,GAAC,GAAD,GAAOrF,CAAP,EAAaV,0DAAM,CAAA+F,UAAnB,CAIR;MAAAlG,CAAiC,CAAAM,YAAjC,CAAAsG,WAAA,GAA+D,aAE9D;MAAA7G,CAAA,GADe,KAAjB,KAAIW,CAAJ,IAAuC,KAAvC,KAA0BA,CAA1B,IAA6D,KAA7D,KAAgDA,CAAhD,GACQV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,EAAoCI,0DAAM,CAAAqB,cAA1C,CADR,IACqE,GADrE,GAGQxB,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,EAAoCI,0DAAM,CAAAY,IAA1C,CAHR,IAG2D,GAI3D;MAAA,QAAQL,CAAR;QACE,KAAK,KAAL;UACEG,CAAA,GAAO,YAAP,GAAsBd,CAAtB,GAA4B,GAC5B;UAAA;QACF,KAAK,MAAL;UACEc,CAAA,GAAO,YAAP,GAAsBd,CAAtB,GAA4B,GAC5B;UAAA;QACF,KAAK,IAAL;UACEc,CAAA,GAAO,WAAP,GAAqBd,CAArB,GAA2B,GAC3B;UAAA;QACF,KAAK,OAAL;UACEc,CAAA,GAAO,aAAP,GAAuBd,CAAvB,GAA6B,GAC7B;UAAA;QACF,KAAK,KAAL;UACEc,CAAA,GAAO,WAAP,GAAqBd,CAArB,GAA2B,GAC3B;UAAA;QACF,KAAK,OAAL;UACEc,CAAA,GAAO,cAAP,GAAwBd,CAAxB,GAA8B,GAC9B;UAAA;QACF,KAAK,OAAL;UACEc,CAAA,GAAO,QAAP,GAAkBd,CAAlB,GAAwB,GACxB;UAAA;QACF,KAAK,SAAL;UACEc,CAAA,GAAO,YAAP,GAAsBd,CAAtB,GAA4B,GAC5B;UAAA;QACF,KAAK,WAAL;UACEc,CAAA,GAAO,aAAP,GAAuBd,CAAvB,GAA6B,GAC7B;UAAA;QACF,KAAK,KAAL;UACEc,CAAA,GAAO,WAAP,GAAqBd,CAArB,GAA2B,qBAC3B;UAAA;QACF,KAAK,KAAL;UACEc,CAAA,GAAO,WAAP,GAAqBd,CAArB,GAA2B,qBAC3B;UAAA;QACF,KAAK,KAAL;UACEc,CAAA,GAAO,WAAP,GAAqBd,CAArB,GAA2B,qBAnC/B;MAAA;MAsCA,IAAIc,CAAJ,EACE,OAAO,CAACA,CAAD,EAAOV,0DAAM,CAAAK,aAAb,CAIT;MAAA,QAAQE,CAAR;QACE,KAAK,MAAL;UACEG,CAAA,GAAO,YAAP,GAAsBd,CAAtB,GAA4B,mBAC5B;UAAA;QACF,KAAK,MAAL;UACEc,CAAA,GAAO,YAAP,GAAsBd,CAAtB,GAA4B,mBAC5B;UAAA;QACF,KAAK,MAAL;UACEc,CAAA,GAAO,YAAP,GAAsBd,CAAtB,GAA4B,mBAC5B;UAAA;QACF;UACE,MAAMsC,KAAA,CAAM,yBAAN,GAAkC3B,CAAlC,CAAN;MAXJ;MAaA,OAAO,CAACG,CAAD,EAAOV,0DAAM,CAAAqB,cAAb,CA7EmB;IAAA,CJ/CtB;II+HAqF,sDAAA,YAAAA,CACJ9G,CAD2B,EAE3BC,CAF2B,EAED;MAG1B,MAAMU,CAAA,GAA6C;QACjDoG,EAAA,EAAM,CAAC,SAAD,EAAY3G,0DAAM,CAAAgC,MAAlB,CAD2C;QAEjD4E,CAAA,EAAK,CAAC,QAAD,EAAW5G,0DAAM,CAAAgC,MAAjB,CAF4C;QAGjD6E,YAAA,EAAgB,CAAC,wBAAD,EAA2B7G,0DAAM,CAAAqB,cAAjC,CAHiC;QAIjDyF,KAAA,EAAS,CAAC,cAAD,EAAiB9G,0DAAM,CAAAgC,MAAvB,CAJwC;QAKjD+E,OAAA,EAAW,CAAC,oBAAD,EAAuB/G,0DAAM,CAAAgC,MAA7B,CALsC;QAMjDgF,QAAA,EAAY,CAAC,cAAD,EAAiBhH,0DAAM,CAAAC,MAAvB;MANqC,CAS7C;MAAAL,CAAA,GAAWA,CAAM,CAAAG,aAAN,CAAoB,UAApB,CACA;MAAA,UAAjB,KAAIH,CAAJ,KACGC,CAAiC,CAAAM,YAAjC,CAAAsG,WADH,GAEI,aAFJ,CAIA;MAAA,OAAOlG,CAAA,CAAUX,CAAV,CAjBmB;IAAA,CJjItB;IIqJAqH,6DAAA,YAAAA,CACJrH,CADkC,EAElCC,CAFkC,EAER;MAI1B,IAAMU,CAAA,GAA4D;QAChE2G,IAAA,EAAQ,CAAC,WAAD,EAAclH,0DAAM,CAAAqB,cAApB,EAAoCrB,0DAAM,CAAAiE,UAA1C,CADwD;QAEhEkD,GAAA,EAAO,CAAC,WAAD,EAAcnH,0DAAM,CAAAqB,cAApB,EAAoCrB,0DAAM,CAAAiE,UAA1C,CAFyD;QAGhEmD,KAAA,EAAS,CAAC,WAAD,EAAcpH,0DAAM,CAAAqB,cAApB,EAAoCrB,0DAAM,CAAAiE,UAA1C,CAHuD;QAIhEoD,QAAA,EAAY,CAAC,MAAD,EAASrH,0DAAM,CAAAiE,UAAf,EAA2BjE,0DAAM,CAAAiE,UAAjC,CAJoD;QAKhEqD,QAAA,EAAY,CAAC,MAAD,EAAStH,0DAAM,CAAAiE,UAAf,EAA2BjE,0DAAM,CAAAiE,UAAjC,CALoD;QAMhEsD,YAAA,EAAgB,CAAC,IAAD,EAAOvH,0DAAM,CAAAqB,cAAb,EAA6BrB,0DAAM,CAAAiE,UAAnC,CANgD;QAOhEuD,KAAA,EAAS,CAAC,IAAD,EAAOxH,0DAAM,CAAAY,IAAb,EAAmBZ,0DAAM,CAAAK,aAAzB;MAPuD,CAUlE;MAAA,MAAMK,CAAA,GAAmBd,CAAM,CAAAG,aAAN,CAAoB,UAApB,CAAzB;QACM,CAACc,CAAD,EAASa,CAAT,EAAqBC,CAArB,IAAoCpB,CAAA,CAAWG,CAAX,CACpC;OAAA,GACJb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,iBAA7B,EAAgD8B,CAAhD,CADI,IAC2D,GAEjE;MAAA,IAAyB,OAAzB,KAAIhB,CAAJ,EAEGb,CAAiC,CAAAM,YAAjC,CAAAsG,WA4BD,GA3BE,aA2BF,EA1BC5G,CAAiC,CAAAM,YAAjC,CAAAsH,0BA0BD,GAxBI,4BAwBJ,EAAA7H,CAAA,GAvBqBC,CAAU,CAAAW,gBAAV,CACnB,cADmB,EAEnB;MACAX,CAAU,CAAAY,0BADV;;;;;;;;;;;;;;;;;;CAFmB,CAuBrB,GAAsB,GAAtB,GAA4BF,CAA5B,GAA4C,GA9B9C,MA+BO,IAAyB,cAAzB,KAAIG,CAAJ,EAAyC;QACxCd,CAAA,GACJC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,SAA7B,EAAwCI,0DAAM,CAAAqB,cAA9C,CADI,IAC6D,GAEnE;QAAA,IAAgB,GAAhB,KAAIzB,CAAJ,EACE,OAAO,CAAC,OAAD,EAAUI,0DAAM,CAAAC,MAAhB,CAET;QAAAL,CAAA,GAAOW,CAAP,GAAuB,KAAvB,GAA+BX,CAA/B,GAAyC,OAPK;MAAA,CAAzC,MASLA,CAAA,GAAOW,CAAP,GAAuBM,CAEzB;MAAA,OAAO,CAACjB,CAAD,EAAO+B,CAAP,CA7DmB;IAAA,CJvJtB;IIuNA+F,oDAAA,YAAAA,CAAsB9H,CAAD,EAAeC,CAAf,EAAyC;MAEjEA,CAAiC,CAAAM,YAAjC,CAAAsH,0BAAA,GACC,4BACF;MAAA,MAAMlH,CAAA,GACJV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAkG,QAA5C,CADI,IACqD,GACrD;MAAAtG,CAAA,GAAUC,CAAU,CAAAmF,eAAV,CAA0BpF,CAAM,CAAAG,aAAN,CAAoB,KAApB,CAA1B,CAChB;MAAA,OACEH,CADF,GAEE,MAFF,GAGEA,CAHF,GAIE,iBAJF,GAKEA,CALF,GAME,sBANF,GAOEW,CAPF,GAQE,IAfgE;IAAA,CJvN9D;II+OAoH,qDAAA,YAAAA,CACJ/H,CAD0B,EAE1BC,CAF0B,EAEA;MAG1B,MAAMU,CAAA,GAAOX,CAAM,CAAAG,aAAN,CAAoB,IAApB,CACP;MAAAH,CAAA,GAAOC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAP,IAA2D,IAEjE;MAAA,QAAQL,CAAR;QACE,KAAK,KAAL;UACEV,CAAA,GAAO,MAAP,GAAgBD,CAAhB,GAAuB,GACvB;UAAA;QACF,KAAK,KAAL;UACEC,CAAA,GAAO,MAAP,GAAgBD,CAAhB,GAAuB,GACvB;UAAA;QACF,KAAK,KAAL;UACEC,CAAA,GAAO,MAAP,GAAgBD,CAAhB,GAAuB,GACvB;UAAA;QACF,KAAK,SAAL;UACGC,CAAiC,CAAAM,YAAjC,CAAAsH,0BAAA,GAEG,4BAYJ;WAAA,GATqB5H,CAAU,CAAAW,gBAAV,CACnB,WADmB,EAEnB;MACFX,CAAU,CAAAY,0BADR;;;;CAFmB,CASrB,GAAsB,GAAtB,GAA4Bb,CAA5B,GAAmC,GACnC;UAAA;QAEF,KAAK,QAAL;UACGC,CAAiC,CAAAM,YAAjC,CAAAsH,0BAAA,GAEG,4BAeJ;UAAA5H,CAAA,GAZqBA,CAAU,CAAAW,gBAAV,CACnB,aADmB,EAEnB;MACFX,CAAU,CAAAY,0BADR;;;;;;;CAFmB,CAYrB,GAAsB,GAAtB,GAA4Bb,CAA5B,GAAmC,GACnC;UAAA;QAEF,KAAK,MAAL;UA4BEC,CAAA,GAxBqBA,CAAU,CAAAW,gBAAV,CACnB,YADmB,EAEnB;MACFX,CAAU,CAAAY,0BADR;;;;;;;;;;;;;;;;;;;CAFmB,CAwBrB,GAAsB,GAAtB,GAA4Bb,CAA5B,GAAmC,GACnC;UAAA;QAEF,KAAK,SAAL;UACGC,CAAiC,CAAAM,YAAjC,CAAAsG,WAAA,GACC,aAYF;UAAA5G,CAAA,GAXqBA,CAAU,CAAAW,gBAAV,CACnB,yBADmB,EAEnB;MACFX,CAAU,CAAAY,0BADR;;;;;;CAFmB,CAWrB,GAAsB,GAAtB,GAA4Bb,CAA5B,GAAmC,GACnC;UAAA;QAEF,KAAK,QAAL;UACGC,CAAiC,CAAAM,YAAjC,CAAAC,aAAA,GACC,eACF;UAAAP,CAAA,GAAO,gBAAP,GAA0BD,CAA1B,GAAiC,GACjC;UAAA;QACF;UACE,MAAMsC,KAAA,CAAM,oBAAN,GAA6B3B,CAA7B,CAAN;MAvGJ;MAyGA,OAAO,CAACV,CAAD,EAAOG,0DAAM,CAAAK,aAAb,CA/GmB;IAAA,CJjPtB;IImWAuH,oDAAA,YAAAA,CACJhI,CADyB,EAEzBC,CAFyB,EAEC;MAG1B,MAAMU,CAAA,GACJV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,UAA7B,EAAyCI,0DAAM,CAAAqB,cAA/C,CADI,IAC8D,GAC9D;MAAAzB,CAAA,GACJC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,SAA7B,EAAwCI,0DAAM,CAAAqB,cAA9C,CADI,IAC6D,GAEnE;MAAA,OAAO,CADMd,CACN,GADkB,KAClB,GAD0BX,CAC1B,EAAOI,0DAAM,CAAAqB,cAAb,CARmB;IAAA,CJrWtB;IIgXAwG,uDAAA,YAAAA,CACJjI,CAD4B,EAE5BC,CAF4B,EAEF;MAG1B,MAAMU,CAAA,GAAYV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CAAZ,IAAiE,GAAvE;QACMF,CAAA,GAAYb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,EAAoCI,0DAAM,CAAAY,IAA1C,CAAZ,IAA+D,GAC/D;MAAAhB,CAAA,GACJC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CADI,IACgD,cAGtD;MAAA,OAAO,CADL,UACK,GADQL,CACR,GADoB,IACpB,GAD2BG,CAC3B,GADuC,KACvC,GAD+Cd,CAC/C,GAD2D,GAC3D,EAAOI,0DAAM,CAAAK,aAAb,CATmB;IAAA,CJlXtB;II8XAyH,wDAAA,YAAAA,CACJlI,CAD6B,EAE7BC,CAF6B,EAEH;MAGzBA,CAAiC,CAAAM,YAAjC,CAAAC,aAAA,GACC,eACF;MAAA,MAAMG,CAAA,GAAYV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAZ,IAAgE,GAChE;MAAAhB,CAAA,GAAYC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,IAA7B,EAAmCI,0DAAM,CAAAY,IAAzC,CAAZ,IAA8D,GAEpE;MAAA,OAAO,CADM,iBACN,GAD0BL,CAC1B,GADsC,IACtC,GAD6CX,CAC7C,GADyD,GACzD,EAAOI,0DAAM,CAAAK,aAAb,CARmB;IAAA,CJhYtB;II2YA0H,0DAAA,YAAAA,CACJnI,CAD+B,EAE/BC,CAF+B,EAEL;MAGzBA,CAAiC,CAAAM,YAAjC,CAAAC,aAAA,GACC,eACF;MAAA,OAAO,CAAC,iBAAD,EAAoBJ,0DAAM,CAAAK,aAA1B,CALmB;IAAA,CJ7YtB;IIqZA2H,mDAAA,YAAAA,CACJpI,CADwB,EAExBC,CAFwB,EAEE;MAGzBA,CAAiC,CAAAM,YAAjC,CAAAsG,WAAA,GAA+D,aAChE;MAAA,MAAMlG,CAAA,GAAYV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,GAA7B,EAAkCI,0DAAM,CAAAY,IAAxC,CAAZ,IAA6D,GAEnE;MAAA,OAAO,CACL,aADK,IADWf,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,GAA7B,EAAkCI,0DAAM,CAAAY,IAAxC,CACX,IAD4D,GAC5D,IACuB,IADvB,GAC8BL,CAD9B,GAC0C,mBAD1C,EAELP,0DAAM,CAAAqB,cAFD,CANmB;IAAA,CJvZtB;IKGA4G,mEAAA,YAAAA,CAA+BrI,CAAD,EAAeC,CAAf,EAAyC;MAI3E,IAAMU,CAAA,GAAU,EAAhB;QACMG,CAAA,GAAYd,CAAM,CAAAgC,SADxB;QAEMf,CAAA,GAA0B0B,CAAA,CAAA2F,iDAAV,CAA2BxH,CAA3B,CAAhB,IAAyD,EAC/D;MAAA,KAAK,IAAMgB,CAAX,IAAuBb,CAAvB,EACQA,CAEN,GAFgBa,CAAS,CAAAyG,IAEzB,EAAyC,CAAC,CAA1C,KAAIvI,CAAM,CAAAwI,OAAN,EAAgB,CAAAC,OAAhB,CAAwBxH,CAAxB,CAAJ,IACEN,CAAQ,CAAA+H,IAAR,CAAazI,CAAU,CAAAmF,eAAV,CAA0BnE,CAA1B,CAAb,CAIE;MAAAH,CAAA,GAAuB6B,CAAA,CAAAgG,sDAAV,CAAgC7H,CAAhC,CACnB;MAAA,KAASgB,CAAT,GAAa,CAAb,EAAgBA,CAAhB,GAAoBhB,CAAW,CAAA8H,MAA/B,EAAuC9G,CAAA,EAAvC,EACEnB,CAAQ,CAAA+H,IAAR,CACEzI,CAAU,CAAAwC,OAAS,CAAAoG,OAAnB,CAA2B/H,CAAA,CAAWgB,CAAX,CAA3B,EAA0Ca,CAAA,CAAAC,qCAAS,CAAAkG,kBAAnD,CADF,CAKI;OAAA,GAAenI,CAAQ,CAAAiI,MAAR,GACjB3I,CAAU,CAAA2D,MADO,GACE,SADF,GACcjD,CAAQ,CAAAY,IAAR,CAAa,IAAb,CADd,GACmC,IADnC,GAEjB,EACE;MAAAZ,CAAA,GAAWV,CAAU,CAAA8I,gBAAV,CAA2B/I,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAA3B,CACb;MAAA2B,CAAA,GAAQ,EACR;MAAA7B,CAAU,CAAAqD,gBAAd,KACExB,CADF,IACW7B,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAAqD,gBAA7B,EAA+CtD,CAA/C,CADX,CAGI;MAAAC,CAAU,CAAAyD,gBAAd,KACE5B,CADF,IACW7B,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAAyD,gBAA7B,EAA+C1D,CAA/C,CADX,CAGI;MAAA8B,CAAJ,KACEA,CADF,GACU7B,CAAU,CAAA0D,WAAV,CAAsB7B,CAAtB,EAA6B7B,CAAU,CAAA2D,MAAvC,CADV,CAGI;MAAA3C,CAAA,GAAW,EACX;MAAAhB,CAAU,CAAA+I,kBAAd,KACE/H,CADF,GACahB,CAAU,CAAA0D,WAAV,CACT1D,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAA+I,kBAA7B,EAAiDhJ,CAAjD,CADS,EAETC,CAAU,CAAA2D,MAFD,CADb,CAMA;MAAA,IAAI7B,CAAA,GAAS9B,CAAU,CAAAuD,eAAV,CAA0BxD,CAA1B,EAAiC,OAAjC,CAAb;QACIqF,CAAA,GAAcpF,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,QAA7B,EAAuCI,0DAAM,CAAAY,IAA7C,CAAd,IAAoE,EADxE;QAEIsE,CAAA,GAAQ,EACR;MAAAvD,CAAJ,IAAcsD,CAAd,KAEEC,CAFF,GAEUxD,CAFV,CAII;MAAAuD,CAAJ,GACEA,CADF,GACgBpF,CAAU,CAAA2D,MAD1B,GACmC,SADnC,GAC+CyB,CAD/C,GAC6D,IAD7D,GAEYtD,CAFZ,KAGEA,CAHF,GAGW9B,CAAU,CAAAwD,IAHrB,CAKA;MAAA,MAAMiC,CAAA,GAAO,EAAb;QACMC,CAAA,GAAY3F,CAAM,CAAAwI,OAAN,EAClB;MAAA,KAAK,IAAI5C,CAAA,GAAI,CAAb,EAAgBA,CAAhB,GAAoBD,CAAU,CAAAiD,MAA9B,EAAsChD,CAAA,EAAtC,EACEF,CAAA,CAAKE,CAAL,IAAU3F,CAAU,CAAAmF,eAAV,CAA0BO,CAAA,CAAUC,CAAV,CAA1B,CAER;MAAA9E,CAAA,GACF,MADE,GAEFH,CAFE,GAGF,GAHE,GAIF+E,CAAK,CAAAnE,IAAL,CAAU,IAAV,CAJE,GAKF,MALE,GAMFT,CANE,GAOFgB,CAPE,GAQFb,CARE,GASFc,CATE,GAUFuD,CAVE,GAWFD,CACF;MAAAvE,CAAA,GAAOb,CAAU,CAAAgJ,MAAV,CAAiBjJ,CAAjB,EAAwBc,CAAxB,CAIN;MAAAb,CAAiC,CAAAM,YAAjC,CAA8C,GAA9C,GAAoDI,CAApD,IAAgEG,CACjE;MAAA,OAAO,IA7EoE;IAAA,CLHvE;IKuFAoI,oEAAA,YAAAA,CACJlJ,CADmC,EAEnCC,CAFmC,EAET;MAG1B,MAAMU,CAAA,GAAWV,CAAU,CAAA8I,gBAAV,CAA2B/I,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAA3B,CAAjB;QACMW,CAAA,GAAO,EADb;QAEMG,CAAA,GAAYjB,CAAM,CAAAwI,OAAN,EAClB;MAAA,KAAK,IAAI1G,CAAA,GAAI,CAAb,EAAgBA,CAAhB,GAAoBb,CAAU,CAAA2H,MAA9B,EAAsC9G,CAAA,EAAtC,EACEhB,CAAA,CAAKgB,CAAL,IAAU7B,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,GAAqC8B,CAArC,EAAwC1B,0DAAM,CAAAY,IAA9C,CAAV,IAAiE,MAGnE;MAAA,OAAO,CADML,CACN,GADiB,GACjB,GADuBG,CAAK,CAAAS,IAAL,CAAU,IAAV,CACvB,GADyC,GACzC,EAAOnB,0DAAM,CAAAK,aAAb,CAVmB;IAAA,CLzFtB;IKsGA0I,sEAAA,YAAAA,CACJnJ,CADqC,EAErCC,CAFqC,EAEX;MAM1B,OADcA,CAAU,CAAAmJ,QAAV,CAAAC,qBAAA,CAA4CrJ,CAA5C,EAAmDC,CAAnD,CACP,CAAM,CAAN,CAAP,GAAkB,IANQ;IAAA,CLxGtB;IKiHAqJ,kEAAA,YAAAA,CAA8BtJ,CAAD,EAAeC,CAAf,EAAyC;MAI1E,IAAIU,CAAA,GAAO,KAAP,IADFV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,WAA7B,EAA0CI,0DAAM,CAAAY,IAAhD,CACE,IADuD,OACvD,IAA2B,KAC3B;MAAAf,CAAU,CAAAyD,gBAAd,KAGE/C,CAHF,IAGUV,CAAU,CAAA0D,WAAV,CACN1D,CAAU,CAAAsD,QAAV,CAAmBtD,CAAU,CAAAyD,gBAA7B,EAA+C1D,CAA/C,CADM,EAENC,CAAU,CAAA2D,MAFJ,CAHV,CAQK;MAAA5D,CAAwB,CAAAuJ,eAA7B,IACQvJ,CACN,GADcC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CACd,IADmE,MACnE,EAAAL,CAAA,IAAQV,CAAU,CAAA2D,MAAlB,GAA2B,SAA3B,GAAuC5D,CAAvC,GAA+C,IAFjD,IAIEW,CAJF,IAIUV,CAAU,CAAA2D,MAJpB,GAI6B,UAE7B;MAAA,OAAOjD,CAnBmE;IAAA,CLjHtE;IMGA6I,6CAAA,YAAAA,CACJxJ,CADkB,EAElBC,CAFkB,EAEQ;MAI1B,OAAO,CADMA,CAAU,CAAAC,MAAV,CAAiBF,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAAjB,CACN,EAAOC,0DAAM,CAAAC,MAAb,CAJmB;IAAA,CNLtB;IMYAoJ,uDAAA,YAAAA,CACJzJ,CAD4B,EAE5BC,CAF4B,EAEF;MAGpBD,CAAA,GAAOC,CAAU,CAAAyJ,gBAAV,CAA2B1J,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAA3B,CACP;MAAAF,CAAA,GAA8B,CAAC,CAAvB,KAAAD,CAAK,CAAAyI,OAAL,CAAa,GAAb,IAA2BrI,0DAAM,CAAAkG,QAAjC,GAA4ClG,0DAAM,CAAAC,MAChE;MAAA,OAAO,CAACL,CAAD,EAAOC,CAAP,CALmB;IAAA,CNdtB;IM2CA0J,kDAAA,YAAAA,CACJ3J,CADuB,EAEvBC,CAFuB,EAEG;MAK1B,QADkBD,CACA,CAAAsB,UAAlB;QACE,KAAK,CAAL;UACE,OAAO,CAAC,IAAD,EAAOlB,0DAAM,CAAAC,MAAb,CACT;QAAA,KAAK,CAAL;UAGE,OAFML,CACe,GADLC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CACK,IAD+C,IAC/C,EAAA4I,oDAAA,CAAY5J,CAAZ,CAGvB;QAAA,KAAK,CAAL;UACE,IAAMW,CAAA,GAAWV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAX,IAA+D,IAC/D;UAAAhB,CAAA,GAAWC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAX,IAA+D,IAErE;UAAA,OAAO,CADM4I,oDAAA,CAAYjJ,CAAZ,EAAsB,CAAtB,CACN,GADiC,KACjC,GADyCiJ,oDAAA,CAAY5J,CAAZ,EAAsB,CAAtB,CACzC,EAAOI,0DAAM,CAAAkG,QAAb,CAET;QAAA;UACQ3F,CAAA,GAAW,EACjB;UAAA,KAAK,IAAIG,CAAA,GAAI,CAAb,EAAgBA,CAAhB,GAjBcd,CAiBgB,CAAAsB,UAA9B,EAA0CR,CAAA,EAA1C,EACEH,CAAA,CAASG,CAAT,IACEb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,GAAqCc,CAArC,EAAwCV,0DAAM,CAAAY,IAA9C,CADF,IACyD,IAErD;UAAAhB,CAAA,GAAUC,CAAU,CAAAwC,OAAS,CAAAC,eAAnB,CACd,GADc,EAEdC,CAAA,CAAAC,qCAAS,CAAAC,QAFK,CAYhB;UAAA,OAAO,CAPL,eAOK,GANL7C,CAMK,GALL,QAKK,GAJLA,CAIK,GAHL,OAGK,GAFLW,CAAS,CAAAY,IAAT,CAAc,IAAd,CAEK,GADL,KACK,EAAOnB,0DAAM,CAAAK,aAAb,CAhCX;MAAA;IAL0B,CN7CtB;IMuFAoJ,oDAAA,YAAAA,CAAsB7J,CAAD,EAAeC,CAAf,EAAyC;MAElE,MAAMU,CAAA,GAAUV,CAAU,CAAAmF,eAAV,CAA0BpF,CAAM,CAAAG,aAAN,CAAoB,KAApB,CAA1B,CACV;MAAAH,CAAA,GAAQC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAR,IAA4D,IAClE;MAAA,OAAOL,CAAP,GAAiB,SAAjB,GAA6BA,CAA7B,GAAuC,MAAvC,GAAgDiJ,oDAAA,CAAY5J,CAAZ,EAAmB,CAAnB,CAAhD,GAAwE,IAJN;IAAA,CNvF9D;IM8FA8J,oDAAA,YAAAA,CACJ9J,CADyB,EAEzBC,CAFyB,EAEC;MAI1B,OAAO,CAAC,MAAD,IADMA,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CACN,IAD2D,IAC3D,IAAiB,GAAjB,EAAsBZ,0DAAM,CAAAK,aAA5B,CAJmB;IAAA,CNhGtB;IMuGAsJ,qDAAA,YAAAA,CACJ/J,CAD0B,EAE1BC,CAF0B,EAEA;MAK1B,OAAO,CADM,UACN,IAFMA,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CAEN,IAF2D,IAE3D,IAD0B,GAC1B,EAAOZ,0DAAM,CAAAwB,WAAb,CALmB;IAAA,CNzGtB;IMiHAoI,qDAAA,YAAAA,CACJhK,CAD0B,EAE1BC,CAF0B,EAEA;MAI1B,MAAMU,CAAA,GAA0C,OAA/B,KAAAX,CAAM,CAAAG,aAAN,CAAoB,KAApB,IAAyC,MAAzC,GAAkD,OAAnE;QACMW,CAAA,GAAYb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAZ,IAAgE,IAEhE;MAAAf,CAAA,IADOA,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAgC,MAA5C,CACP,IAD8D,IAC9D,IAAc,GAAd,GAAoBzB,CAApB,GAA+B,GAA/B,GAAqCG,CAArC,GAAiD,GACvD;MAAA,OAAId,CAAM,CAAAgC,SAAU,CAAAC,OAAQ,CAAAC,aAA5B,GACS,CAACjC,CAAD,GAAQ,MAAR,EAAgBG,0DAAM,CAAAkG,QAAtB,CADT,GAGO,CAACrG,CAAD,EAAOG,0DAAM,CAAAK,aAAb,CAXmB;IAAA,CNnHtB;IMiIAwJ,oDAAA,YAAAA,CACJjK,CADyB,EAEzBC,CAFyB,EAEC;MAI1B,MAAMU,CAAA,GAAQX,CAAM,CAAAG,aAAN,CAAoB,OAApB,CAAR,IAAwC,YAA9C;QAEMW,CAAA,GAAOb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EADe,QAAV,KAAAW,CAAA,GAAqBP,0DAAM,CAAAY,IAA3B,GAAkCZ,0DAAM,CAAAgC,MAC7C,CAAP,IAA2D,IACjE;MAAA,QAAQzB,CAAR;QACE,KAAK,OAAL;UAEE,OAAO,CADMG,CACN,GADa,KACb,EAAOV,0DAAM,CAAAgC,MAAb,CAET;QAAA,KAAK,MAAL;UAEE,OAAO,CADMtB,CACN,GADa,MACb,EAAOV,0DAAM,CAAAgC,MAAb,CAET;QAAA,KAAK,YAAL;UAGE,OAFMpC,CAEC,GAFIC,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,IAAhC,CAEJ,GADMc,CACN,GADa,GACb,GADmBd,CACnB,GADwB,GACxB,EAAOI,0DAAM,CAAAgC,MAAb,CAET;QAAA,KAAK,UAAL;UAGE,OAFMpC,CAEC,GAFIC,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,IAAhC,EAAsC,CAAtC,EAAyC,EAAzC,CAEJ,GADMc,CACN,GADa,GACb,GADmBd,CACnB,GADwB,GACxB,EAAOI,0DAAM,CAAAgC,MAAb,CAET;QAAA,KAAK,QAAL;UAcE,OAXCnC,CAAiC,CAAAM,YAAjC,CAAAC,aAWM,GAVL,eAUK,GATcP,CAAU,CAAAW,gBAAV,CACnB,oBADmB,EAEnB;MACFX,CAAU,CAAAY,0BADR;;;CAFmB,CASd,GADqB,GACrB,GAD2BC,CAC3B,GADkC,GAClC,EAAOV,0DAAM,CAAAK,aAAb,CAjCX;MAAA;MAoCA,MAAM6B,KAAA,CAAM,iCAAN,CAAN;IA3C0B,CNnItB;IMiLA4H,0DAAA,YAAAA,CACJlK,CAD+B,EAE/BC,CAF+B,EAEL;MAG1B,IAAMU,CAAA,GAASX,CAAM,CAAAG,aAAN,CAAoB,QAApB,CACf;MAAA,MAAMW,CAAA,GAASd,CAAM,CAAAG,aAAN,CAAoB,QAApB,CAAf;QACMc,CAAA,GAAOhB,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,QAA7B,EAAuCI,0DAAM,CAAAgC,MAA7C,CAAP,IAA+D,IAErE;MAAA,QAAQzB,CAAR;QACE,KAAK,YAAL;UACEA,CAAA,GAAMV,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,KAAhC,CACM;UAAA,CAAZ,KAAIW,CAAJ,KACEA,CADF,GACQ,EADR,CAGA;UAAA;QACF,KAAK,UAAL;UACEA,CAAA,GAAMV,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,KAAhC,EAAuC,CAAvC,EAA0C,EAA1C,CACN;UAAA;aACG,OAAL;UACEW,CAAA,GAAM,EACN;UAAA;QACF;UACE,MAAM2B,KAAA,CAAM,sCAAN,CAAN;MAdJ;MAkBA,QAAQxB,CAAR;QACE,KAAK,YAAL;UACEd,CAAA,GAAMC,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,KAAhC,EAAuC,CAAvC,CACN;UAAA;QACF,KAAK,UAAL;UACEA,CAAA,GAAMC,CAAU,CAAAoC,cAAV,CAAyBrC,CAAzB,EAAgC,KAAhC,EAAuC,CAAvC,EAA0C,EAA1C,CAGW;UAAA2C,CAAA,CAAAI,4CAAZ,CAAqBC,MAAA,CAAOhD,CAAP,CAArB,CAAL,GAImB,CAJnB,KAIWA,CAJX,KAKEA,CALF,GAKQ,EALR,KACGC,CAAiC,CAAAM,YAAjC,CAAA0C,UAED,GADE,YACF,EAAAjD,CAAA,IAAO,iBAHT,CAOA;UAAA;QACF,KAAK,MAAL;UACEA,CAAA,GAAM,EACN;UAAA;QACF;UACE,MAAMsC,KAAA,CAAM,sCAAN,CAAN;MApBJ;MAuBA,OAAO,CADMrB,CACN,GADa,GACb,GADmBN,CACnB,GADyB,KACzB,GADiCX,CACjC,GADuC,GACvC,EAAOI,0DAAM,CAAAgC,MAAb,CAhDmB;IAAA,CNnLtB;IMsOA+H,wDAAA,YAAAA,CACJnK,CAD6B,EAE7BC,CAF6B,EAEH;MAS1B,MAAMU,CAAA,GANY;QAChByJ,SAAA,EAAa,UADG;QAEhBC,SAAA,EAAa,UAFG;QAGhBC,SAAA,EAAa;MAHG,CAMD,CAAUtK,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAAV,CAGjB;MAAA,OAAO,EAFMF,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAgC,MAA3C,CAEN,IAF4D,IAE5D,IADazB,CACb,EAAOP,0DAAM,CAAAK,aAAb,CAZmB;IAAA,CNxOtB;IMuPA8J,kDAAA,YAAAA,CACJvK,CADuB,EAEvBC,CAFuB,EAEG;MAS1B,MAAMU,CAAA,GANY;QAChB6J,IAAA,EAAQ,WADQ;QAEhBC,KAAA,EAAS,WAFO;QAGhBC,IAAA,EAAQ;MAHQ,CAMD,CAAU1K,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAAV,CAGjB;aAAO,EAFMF,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAgC,MAA3C,CAEN,IAF4D,IAE5D,IADazB,CACb,EAAOP,0DAAM,CAAAK,aAAb,CAZmB;IAAA,CNzPtB;IMwQAkK,mDAAA,YAAAA,CAAqB3K,CAAD,EAAeC,CAAf,EAAyC;MAGjE,OAAO,QAAP,IADYA,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CACZ,IADgE,IAChE,IAAwB,KAHyC;IAAA,CNxQ7D;IM8QA4J,wDAAA,YAAAA,CACJ5K,CAD6B,EAE7BC,CAF6B,EAEH;MAG1B,IAAMU,CAAA,GAAeV,CAAU,CAAAW,gBAAV,CACnB,aADmB,EAEnB;MACEX,CAAU,CAAAY,0BADZ;;;;;CAFmB,CAanB;MAAAZ,CAAA,GAFED,CAAM,CAAA+E,QAAN,CAAe,MAAf,CAAJ,GAEQ9E,CAAU,CAAAC,MAAV,CAAiBF,CAAM,CAAAG,aAAN,CAAoB,MAApB,CAAjB,CAFR,GAKQF,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CALR,IAK4D,IAExD;MAAAL,CAAA,GAAOA,CAAP,GAAsB,GAAtB,GAA4BV,CAA5B,GAAkC,GACW;MAAA,QACjD,KADiBD,CAAM,CAAAG,aAAN,CAAoB,MAApB,CACjB,KACEQ,CADF,GACS,QADT,GACoBA,CADpB,GAC2B,GAD3B,CAGA;MAAA,OAAO,CAACA,CAAD,EAAOP,0DAAM,CAAAK,aAAb,CA1BmB;IAAA,CNhRtB;IM+SAoK,mDAAA,YAAAA,CACJ7K,CADwB,EAExBC,CAFwB,EAEE;MAE1B,MAAMU,CAAA,GAAOV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAgC,MAA3C,CAAP,IAA6D,IAC7D;MAAApC,CAAA,GAAMC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,KAA7B,EAAoCI,0DAAM,CAAAY,IAA1C,CAAN,IAAyD,IAE/D;MAAA,OAAO,CADML,CACN,GADa,SACb,GADyBX,CACzB,GAD+B,GAC/B,EAAOI,0DAAM,CAAAK,aAAb,CALmB;IAAA,CNjTtB;IMyTAqK,qDAAA,YAAAA,CACJ9K,CAD0B,EAE1BC,CAF0B,EAEA;MAE1B,MAAMU,CAAA,GAAOV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAgC,MAA3C,CAAP,IAA6D,IAAnE;QACMtB,CAAA,GAAOb,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAY,IAA3C,CAAP,IAA2D,IAC3D;MAAAhB,CAAA,GAAKC,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,IAA7B,EAAmCI,0DAAM,CAAAY,IAAzC,CAAL,IAAuD,IAE7D;MAAA,OAAO,CADML,CACN,GADa,WACb,GAD2BG,CAC3B,GADkC,IAClC,GADyCd,CACzC,GAD8C,GAC9C,EAAOI,0DAAM,CAAAgC,MAAb,CANmB;IAAA,CN3TtB;IMoUA2I,qDAAA,YAAAA,CACJ/K,CAD0B,EAE1BC,CAF0B,EAEA;MAI1B,OAAO,EAFMA,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,MAA7B,EAAqCI,0DAAM,CAAAgC,MAA3C,CAEN,IAF4D,IAE5D,IADa,QACb,EAAOhC,0DAAM,CAAAgC,MAAb,CAJmB;IAAA,CNtUtB;IOAA4I,2DAAA,YAAAA,CACJhL,CAD2B,EAE3BC,CAF2B,EAED;MAI1B,OAAO,CADMA,CAAU,CAAAmF,eAAV,CAA0BpF,CAAM,CAAAG,aAAN,CAAoB,KAApB,CAA1B,CACN,EAAOC,0DAAM,CAAAC,MAAb,CAJmB;IAAA,CPFtB;IOSA4K,2DAAA,YAAAA,CAAwBjL,CAAD,EAAeC,CAAf,EAAyC;MAEpE,MAAMU,CAAA,GAAYV,CAAU,CAAAc,WAAV,CAAsBf,CAAtB,EAA6B,OAA7B,EAAsCI,0DAAM,CAAAY,IAA5C,CAAZ,IAAiE,GAEvE;MAAA,OADgBf,CAAU,CAAAmF,eAAV,CAA0BpF,CAAM,CAAAG,aAAN,CAAoB,KAApB,CAA1B,CAChB,GAAiB,KAAjB,GAAyBQ,CAAzB,GAAqC,IAJ+B;IAAA,CPThE;IQUMP,0DAAZ;aAAYJ,CAAZ,EAAiB;IACfA,CAAA,CAAAA,CAAA,CAAAK,MAAA,gBACA;IAAAL,CAAA,CAAAA,CAAA,CAAAkL,UAAA,oBACA;IAAAlL,CAAA,CAAAA,CAAA,CAAAmL,iBAAA,2BACA;IAAAnL,CAAA,CAAAA,CAAA,CAAAoC,MAAA,kBACA;IAAApC,CAAA,CAAAA,CAAA,CAAAS,aAAA,yBACA;IAAAT,CAAA,CAAAA,CAAA,CAAA2G,cAAA,wBACA;IAAA3G,CAAA,CAAAA,CAAA,CAAAmG,UAAA,oBACA;IAAAnG,CAAA,CAAAA,CAAA,CAAAoL,WAAA,qBACA;IAAApL,CAAA,CAAAA,CAAA,CAAAyB,cAAA,wBACA;IAAAzB,CAAA,CAAAA,CAAA,CAAAsG,QAAA,kBACA;IAAAtG,CAAA,CAAAA,CAAA,CAAAqL,aAAA,uBACA;IAAArL,CAAA,CAAAA,CAAA,CAAAsL,WAAA,qBACA;IAAAtL,CAAA,CAAAA,CAAA,CAAAuL,WAAA,qBACA;IAAAvL,CAAA,CAAAA,CAAA,CAAAwL,UAAA,qBACA;IAAAxL,CAAA,CAAAA,CAAA,CAAAqE,UAAA,qBACA;KAAA,CAAArE,CAAA,CAAA4B,WAAA,sBACA;IAAA5B,CAAA,CAAAA,CAAA,CAAAuE,WAAA,sBACA;IAAAvE,CAAA,CAAAA,CAAA,CAAAwE,UAAA,qBACA;IAAAxE,CAAA,CAAAA,CAAA,CAAA6E,WAAA,sBACA;IAAA7E,CAAA,CAAAA,CAAA,CAAAyL,MAAA,iBACA;IAAAzL,CAAA,CAAAA,CAAA,CAAAgB,IAAA,eArBe;EAAA,CAAjB,EAAYZ,0DAAZ,KAAYA,0DAAZ,GAAiB,EAAjB,EA2BM;MAAOsL,oEAAA,GAAP,cAA+B/I,CAAA,CAAAgJ,8CAA/B;MA+BJC,YAAA,EAA2B;QAAA,IAAf5L,CAAA,GAAA6L,SAAA,CAAAjD,MAAA,QAAAiD,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAO,QAAnB;QACE,MAAM7L,CAAN,CA9BF;QAAA,KAAA+L,eAAA,GAAoC,CAGlC,CAAC3L,0DAAM,CAAAK,aAAP,EAAsBL,0DAAM,CAAAgC,MAA5B,CAHkC,EAKlC,CAAChC,0DAAM,CAAAK,aAAP,EAAsBL,0DAAM,CAAAK,aAA5B,CALkC,EAUlC,CAACL,0DAAM,CAAAgC,MAAP,EAAehC,0DAAM,CAAAgC,MAArB,CAVkC,EAalC,CAAChC,0DAAM,CAAAgC,MAAP,EAAehC,0DAAM,CAAAK,aAArB,CAbkC,EAgBlC,CAACL,0DAAM,CAAAwB,WAAP,EAAoBxB,0DAAM,CAAAwB,WAA1B,CAhBkC,EAkBlC,CAACxB,0DAAM,CAAAmE,WAAP,EAAoBnE,0DAAM,CAAAmE,WAA1B,CAlBkC,EAoBlC,CAACnE,0DAAM,CAAAoE,UAAP,EAAmBpE,0DAAM,CAAAoE,UAAzB,CApBkC,CA0BpC;QAAA,KAAAf,IAAA,GAAe,EAKb;QAAA,IAAK,CAAAuI,aAAL,GAAqB,EASrB;QAAA,KAAK,MAAM/L,CAAX,IAAkBG,0DAAlB,EAGQJ,CAMN,GANcI,0DAAA,CAAMH,CAAN,CAMd,EAAqB,QAArB,KAAI,OAAOD,CAAX,KACC,KAA0C,QAA1C,GAAqDC,CAArD,CADD,GAC6DD,CAD7D,CAQF;QAAA,IAAK,CAAAiM,gBAAL,CAKE,u5DALF,CA5ByB;MAAA;MA6E3BC,IAAIA,CAAClM,CAAD,EAAqB;QACvB,KAAM,CAAAkM,IAAN,CAAWlM,CAAX,CAEA;YAAK,CAAAyD,IAAL,GAAY,IAAK,CAAAG,MAAjB,GAA0B,QAErB;QAAA,IAAK,CAAAnB,OAAV,GAGE,IAAK,CAAAA,OAAQ,CAAA0J,KAAb,EAHF,GACE,IAAK,CAAA1J,OADP,GACiB,IAAIE,CAAA,CAAAyJ,kCAAJ,CAAU,IAAK,CAAAC,eAAf,CAKjB;QAAA,IAAK,CAAA5J,OAAQ,CAAA6J,cAAb,CAA4BtM,CAAU,CAAAuM,cAAV,EAA5B,CACA;QAAA,IAAK,CAAA9J,OAAQ,CAAA+J,iBAAb,CAA+BxM,CAA/B,CACA;QAAA,IAAK,CAAAyC,OAAQ,CAAAgK,kBAAb,CAAgCzM,CAAhC,CAEA;QAAA,MAAMC,CAAA,GAAU,EAEhB;QAAA,IAAMU,CAAA,GAAuBgC,CAAA,CAAAgG,sDAAV,CAAgC3I,CAAhC,CACnB;QAAA,KAAK,IAAIc,CAAA,GAAI,CAAb,EAAgBA,CAAhB,GAAoBH,CAAW,CAAAiI,MAA/B,EAAuC9H,CAAA,EAAvC,EACEb,CAAQ,CAAAyI,IAAR,CACE,IAAK,CAAAjG,OAAQ,CAAAoG,OAAb,CAAqBlI,CAAA,CAAWG,CAAX,CAArB,EAAoC6B,CAAA,CAAAyJ,kCAAM,CAAAM,uBAA1C,CADF,GAEI,SAFJ,CAOI;QAAA1M,CAAA,GAAsB2C,CAAA,CAAA2F,iDAAV,CAA2BtI,CAA3B,CAClB;aAASW,CAAT,GAAa,CAAb,EAAgBA,CAAhB,GAAoBX,CAAU,CAAA4I,MAA9B,EAAsCjI,CAAA,EAAtC,EACEV,CAAQ,CAAAyI,IAAR,CAAa,IAAK,CAAAtD,eAAL,CAAqBpF,CAAA,CAAUW,CAAV,CAAa,CAAAgM,KAAb,EAArB,CAAb,GAA0D,SAA1D,CAGF;QAAA,IAAK,CAAApM,YAAL,CAAAqM,SAAA,GAAiC3M,CAAQ,CAAAsB,IAAR,CAAa,IAAb,CACjC;QAAA,IAAK,CAAAyK,aAAL,GAAqB,EAhCE;MAAA;MAyCzBa,MAAMA,CAAC7M,CAAD,EAAa;QAEjB,MAAMC,CAAA,GAAU,EAAhB;UACMU,CAAA,GAAc,EACpB;QAAA,KAAK,IAAIG,CAAT,IAAiB,IAAK,CAAAP,YAAtB,EAAoC;UAClC,MAAMU,CAAA,GAAM,IAAK,CAAAV,YAAL,CAAkBO,CAAlB,CACR;UAAAG,CAAI,CAAAuB,KAAJ,CAAU,+BAAV,CAAJ,GACEvC,CAAQ,CAAAyI,IAAR,CAAazH,CAAb,CADF,GAGEN,CAAY,CAAA+H,IAAZ,CAAiBzH,CAAjB,CALgC;QAAA;QASpCjB,CAAA,GAAO,KAAM,CAAA6M,MAAN,CAAa7M,CAAb,CACP;QAAA,IAAK,CAAAgM,aAAL,GAAqB,EAErB;QAAA,IAAK,CAAAvJ,OAAS,CAAA0J,KAAd,EAEA;QAAA,OAAe,CADClM,CAAQ,CAAAsB,IAAR,CAAa,IAAb,CACD,GADsB,MACtB,GAD+BZ,CAAY,CAAAY,IAAZ,CAAiB,MAAjB,CAC/B,EAAAuL,OAAR,CAAgB,QAAhB,EAA0B,MAA1B,CAAkC,CAAAA,OAAlC,CAA0C,MAA1C,EAAkD,QAAlD,CAAP,GAAqE9M,CAlBpD;MAAA;MA4BnB+M,eAAeA,CAAC/M,CAAD,EAAa;QAC1B,OAAOA,CAAP,GAAc,IADY;MAAA;MAU5BE,MAAMA,CAACF,CAAD,EAAe;QACnBA,CAAA,GAASA,CAAO,CAAA8M,OAAP,CAAe,KAAf,EAAsB,MAAtB,CAA8B,CAAAA,OAA9B,CAAsC,KAAtC,EAA6C,MAA7C,CAGT;QAAA,IAAI7M,CAAA,GAAQ,GACgB;QAAA,CAAC,CAA7B,KAAID,CAAO,CAAAyI,OAAP,CAAe,GAAf,CAAJ,KAC8B,CAAC,CAA7B,KAAIzI,CAAO,CAAAyI,OAAP,CAAe,GAAf,CAAJ,GACExI,CADF,GACU,GADV,GAGED,CAHF,GAGWA,CAAO,CAAA8M,OAAP,CAAe,IAAf,EAAqB,KAArB,CAJb,CAOA;QAAA,OAAO7M,CAAP,GAAeD,CAAf,GAAwBC,CAZL;MAAA;MAsBrByJ,gBAAgBA,CAAC1J,CAAD,EAAe;QAI7B,OAHcA,CAAO,CAAAgN,KAAP,CAAa,KAAb,CAAoB,CAAAC,GAApB,CAAwB,IAAK,CAAA/M,MAA7B,CAGD,CAAAqB,IAAN,CAAW,eAAX,CAJsB;MAAA;MAkB/B0H,MAAMA,CAACjJ,CAAD,EAAeC,CAAf,EAA6C;QAAA,IAAhBU,CAAA,GAAAkL,SAAA,CAAAjD,MAAA,QAAAiD,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAW,EAAxC;QACJ,IAAI/K,CAAA,GAAc,EAElB;QAAA,IAAI,CAACd,CAAM,CAAAkN,gBAAX,IAA+B,CAAClN,CAAM,CAAAkN,gBAAiB,CAAAC,gBAAvD,EAAyE;UAEvE,IAAIlM,CAAA,GAAUjB,CAAM,CAAAoN,cAAN,EACV;UAAAnM,CAAJ,KACEA,CACA,GADsB0B,CAAA,CAAA0K,wCAAZ,CAAiBpM,CAAjB,EAA0B,IAAK,CAAAqM,YAA/B,GAA8C,CAA9C,CACV,EAAAxM,CAAA,IAAe,IAAK,CAAA6C,WAAL,CAAiB1C,CAAjB,GAA2B,IAA3B,EAAiC,IAAjC,CAFjB,CAMA;UAAA,KAAK,IAAIa,CAAA,GAAI,CAAb,EAAgBA,CAAhB,GAAoB9B,CAAM,CAAAuN,SAAU,CAAA3E,MAApC,EAA4C9G,CAAA,EAA5C,EACM9B,CAAM,CAAAuN,SAAN,CAAgBzL,CAAhB,CAAmB,CAAA0L,IAAvB,KAAgC7K,CAAA,CAAA8K,oDAAW,CAAAC,KAA3C,KACQzM,CADR,GACqBjB,CAAM,CAAAuN,SAAN,CAAgBzL,CAAhB,CAAmB,CAAA6L,UAAY,CAAAC,WAA/B,EADrB,MAGI3M,CAHJ,GAGc,IAAK,CAAA4M,iBAAL,CAAuB5M,CAAvB,CAHd,MAKMH,CALN,IAKqB,IAAK,CAAA6C,WAAL,CAAiB1C,CAAjB,EAA0B,IAA1B,CALrB,CAVqE;QAAA;QAqBnEjB,CAAA,GACJA,CAAM,CAAA8N,cADF,IACoB9N,CAAM,CAAA8N,cAAe,CAAAF,WAArB,EACpB;QAAAjN,CAAA,GAAWA,CAAA,GAAW,EAAX,GAAgB,IAAK,CAAAoN,WAAL,CAAiB/N,CAAjB,CACjC;QAAA,OAAOc,CAAP,GAAqBb,CAArB,GAA4BU,CA3BqB;MAAA;MAwCnD0B,cAAcA,CACZrC,CADY,EAEZC,CAFY,EAIE;QAAA,IADdU,CAAA,GAAAkL,SAAA,CAAAjD,MAAA,QAAAiD,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAQ,CAHI;QAAA,IAIZ/K,CAAA,GAAA+K,SAAA,CAAAjD,MAAA,QAAAiD,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAS,EAJG;QAMR7L,CAAM,CAAAgC,SAAU,CAAAC,OAAQ,CAAAC,aAA5B,IACEvB,CAAA,EAEF;QAAA,MAAMM,CAAA,GAAiBjB,CAAM,CAAAgC,SAAU,CAAAC,OAAQ,CAAAC,aAAxB,GAAwC,GAAxC,GAA8C,GAEjE;QAAAlC,CAAA,GACF,IAAK,CAAAe,WAAL,CAAiBf,CAAjB,EAAwBC,CAAxB,EAFcU,CAAA,GAAQP,0DAAM,CAAAkG,QAAd,GAAyBlG,0DAAM,CAAAY,IAE7C,CADE,IACwCC,CAE5B;QAAA0B,CAAA,CAAAI,4CAAZ,CAAqB/C,CAArB,CAAJ,IAEEA,CACA,GADKgF,QAAA,CAAShF,CAAT,EAAa,EAAb,CACL,GADwBW,CACxB,EAAIG,CAAJ,KACEd,CADF,GACO,CAACA,CADR,CAHF,KASIA,CAMF,GAPY,CAAZ,GAAIW,CAAJ,GACO,MADP,GACgBX,CADhB,GACqB,KADrB,GAC6BW,CAD7B,GACqC,GADrC,GAEmB,CAAZ,GAAIA,CAAJ,GACA,MADA,GACSX,CADT,GACc,KADd,GACsB,CAACW,CADvB,GAC+B,GAD/B,GAGA,MAHA,GAGSX,CAHT,GAGc,GAErB,EAAIc,CAAJ,KACEd,CADF,GACO,GADP,GACaA,CADb,CAfF,CAmBA;QAAA,OAAOA,CA7BO;MAAA;IA/QZ;IArDNgO,mDAAA,KA0BY;EAAAA,mDAAA,CAAAC,KAAA,GAAA7N,0DA2BC;EAAA4N,mDAAA,CAAAE,eAAA,GAAAxC,oE;ERrDb,IAAAyC,yCAAA,KA4DgB;EAAAA,yCAAA,CAAAC,YAAA,GAAAlN,uDA5CA;EAAAiN,yCAAA,CAAAE,aAAA,GAAAtO,wDASA;EAAAoO,yCAAA,CAAAG,aAAA,GAAAhO,wDAaA;EAAA6N,yCAAA,CAAAI,UAAA,GAAA7N,qD;ECtChB,IAAA8N,wCAAA,KAmBgB;EAAAA,wCAAA,CAAAC,kBAAA,GAAAtN,4DAQA;EAAAqN,wCAAA,CAAAE,iBAAA,GAAAtN,2DAwFA;EAAAoN,wCAAA,CAAAG,cAAA,GAAAxM,wDAoKA;EAAAqM,wCAAA,CAAAI,gBAAA,GAAA9L,0DA/MA;0CAAA,CAAA+L,aAAA,GAAAhN,uDAVA;EAAA2M,wCAAA,CAAAM,aAAA,GAAAnN,uDATA;EAAA6M,wCAAA,CAAAO,YAAA,GAAArN,sDAZA;EAAA8M,wCAAA,CAAAQ,YAAA,GAAAxN,sDA4VA;EAAAgN,wCAAA,CAAAS,aAAA,GAAA7L,uDA3LA;0CAAA,CAAA8L,cAAA,GAAA3M,wDAkIA;EAAAiM,wCAAA,CAAAW,UAAA,GAAAjM,oDAiCA;EAAAsL,wCAAA,CAAAY,WAAA,GAAAjM,qD;ECtTT,IAAMkM,yDAAA,GAAkBhM,qDAAxB;IAvDPiM,wCAAA,KAgBgB;EAAAA,wCAAA,CAAAC,WAAA,GAAAlM,qDAuCH;EAAAiM,wCAAA,CAAAE,eAAA,GAAAnM,qDA8DG;EAAAiM,wCAAA,CAAAG,aAAA,GAAA/K,uDA5DA;0CAAA,CAAAgL,aAAA,GAAA5L,uDAiDA;EAAAwL,wCAAA,CAAAK,YAAA,GAAAlL,sDAoBA;EAAA6K,wCAAA,CAAAM,UAAA,GAAAjL,oDA/CA;EAAA2K,wCAAA,CAAAO,eAAA,GAAAvL,yDAuDA;EAAAgL,wCAAA,CAAAQ,aAAA,GAAAlL,uD;EC1FT,IAAMmL,yDAAA,GAAkBjL,6DAAxB;IA5CPkL,wCAAA,KA2NgB;EAAAA,wCAAA,CAAAC,wBAAA,GAAAnK,kEA5JA;EAAAkK,wCAAA,CAAAE,YAAA,GAAA/K,sDAiJA;EAAA6K,wCAAA,CAAAG,gBAAA,GAAAtK,0DApKH;0CAAA,CAAAuK,eAAA,GAAAtL,6DAzBG;EAAAkL,wCAAA,CAAAK,mBAAA,GAAAvL,6DA2BA;EAAAkL,wCAAA,CAAAM,mBAAA,GAAApL,6D;EC6MT,IAAMqL,mDAAA,GAAa3J,oDAAnB;IAEM4J,kDAAA,GAAY5J,oDAFlB;IA3PP6J,uCAAA,KAkCgB;EAAAA,uCAAA,CAAAC,eAAA,GAAAtK,wDAmYA;EAAAqK,uCAAA,CAAAE,UAAA,GAAAvI,mDA9LA;yCAAA,CAAAwI,WAAA,GAAA9I,oDAxFA;EAAA2I,uCAAA,CAAAI,aAAA,GAAA/J,sDAiPA;EAAA2J,uCAAA,CAAAK,cAAA,GAAA7I,uDAbA;EAAAwI,uCAAA,CAAAM,WAAA,GAAA/I,oDAhWA;EAAAyI,uCAAA,CAAAO,WAAA,GAAA/K,oDAkJA;yCAAA,CAAAgL,oBAAA,GAAA5J,6DA0FA;EAAAoJ,uCAAA,CAAAS,YAAA,GAAAnJ,qDA4JA;EAAA0I,uCAAA,CAAAU,iBAAA,GAAAhJ,0DAbA;EAAAsI,uCAAA,CAAAW,eAAA,GAAAlJ,wDAnJH;yCAAA,CAAAmJ,UAAA,GAAAzK,oDA9LG;EAAA6J,uCAAA,CAAAa,WAAA,GAAA1K,oDAgMH;EAAA6J,uCAAA,CAAAc,SAAA,GAAA3K,oD;ECxJN,IAAM4K,qEAAA,GAAyBnJ,mEAA/B;IArGPoJ,6CAAA,KAsHgB;EAAAA,6CAAA,CAAAC,uBAAA,GAAAvI,sEAfA;EAAAsI,6CAAA,CAAApI,qBAAA,GAAAH,oEAFH;+CAAA,CAAAyI,sBAAA,GAAAtJ,mEAlFG;EAAAoJ,6CAAA,CAAAG,oBAAA,GAAAvJ,mEA8GA;EAAAoJ,6CAAA,CAAAI,mBAAA,GAAAvI,kE;ECxFhB,IAAMwI,kDAAA,GAAY,uBAAlB;IAWMlI,oDAAA,GAAc,SAAAA,CAAU5J,CAAV,EAAuB;MACzC,OAAI8R,kDAAU,CAAAC,IAAV,CAAe/R,CAAf,CAAJ,GACS,CAACA,CAAD,EAAQI,0DAAM,CAAAC,MAAd,CADT,GAGO,CAAC,MAAD,GAAUL,CAAV,GAAkB,GAAlB,EAAuBI,0DAAM,CAAAK,aAA7B,CAJkC;IAAA,CAX3C;IAoRauR,oDAAA,GAAcpH,wDApR3B;IAzCAqH,uCAAA,KAmBgB;EAAAA,uCAAA,CAAAC,IAAA,GAAA1I,6CAoFA;EAAAyI,uCAAA,CAAAE,WAAA,GAAAtI,oDA+IA;EAAAoI,uCAAA,CAAAG,eAAA,GAAAjI,wDArGA;EAAA8H,uCAAA,CAAAI,WAAA,GAAApI,oDA8KA;EAAAgI,uCAAA,CAAAK,UAAA,GAAAzH,mDA9HA;yCAAA,CAAA0H,iBAAA,GAAArI,0DAhEA;EAAA+H,uCAAA,CAAAO,YAAA,GAAAxI,qDAVA;EAAAiI,uCAAA,CAAAQ,YAAA,GAAA1I,qDA5DA;EAAAkI,uCAAA,CAAAS,SAAA,GAAA/I,kDAmDA;EAAAsI,uCAAA,CAAAU,WAAA,GAAA7I,oDAlFA;yCAAA,CAAA8I,cAAA,GAAAnJ,uDA4PA;EAAAwI,uCAAA,CAAAY,UAAA,GAAAlI,mDAqCH;EAAAsH,uCAAA,CAAAa,WAAA,GAAAlI,wDA/BG;EAAAqH,uCAAA,CAAAc,eAAA,GAAAnI,wDA2CA;EAAAqH,uCAAA,CAAAe,YAAA,GAAAlI,qDAWA;yCAAA,CAAAmI,YAAA,GAAAlI,qDA7EA;EAAAkH,uCAAA,CAAAiB,SAAA,GAAA3I,kD;ECvQhB,IAAA4I,4CAAA,KAgBgB;EAAAA,4CAAA,CAAAC,aAAA,GAAApI,2DASA;EAAAmI,4CAAA,CAAAE,aAAA,GAAApI,2D;EEzBhB,IAAAqI,oDAAA,KAcE;EAAAA,oDAAA,CAAAC,qBAAA,GAAAvI,2DACA;EAAAsI,oDAAA,CAAAE,qBAAA,GAAAvI,2D;ECgBK,IAAMwI,mDAAA,GAAkB,IAAI/H,oEAInC,CAJmC,CAInC;EAAA+H,mDAAgB,CAAAxH,gBAAhB,CAAiC,oBAAjC,CAIA;MAAMyH,8CAAA,GAA8CC,MAAA,CAAAC,MAAA,KAC/CzF,yCAD+C,EAE/CK,wCAF+C,EAG/Cc,wCAH+C,EAI/CU,wCAJ+C,EAK/CS,uCAL+C,EAM/CgB,6CAN+C,EAO/CQ,uCAP+C,EAQ/CkB,4CAR+C,EAS/CG,oDAT+C,CAWpD;OAAK,MAAMtT,CAAX,IAAmB0T,8CAAnB,EACED,mDAAgB,CAAArK,QAAhB,CAAyBpJ,CAAzB,IAAiC0T,8CAAA,CAAW1T,CAAX,CAnDnC;EAAA,IAAA6T,kCAAA,KAyBA;EAAAA,kCAAA,CAAA5F,KAAA,GAAA7N,0DAAA;EAAAyT,kCAAA,CAAA3F,eAAA,GAAAxC,oEAMa;EAAAmI,kCAAA,CAAAC,eAAA,GAAAL,mDAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}