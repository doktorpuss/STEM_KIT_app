{"ast":null,"code":"import Blockly from'blockly';Blockly.Blocks['time_sleep']={init:function(){this.appendValueInput('SECONDS').setCheck('Number').appendField('sleep for').appendField('seconds');this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(230);this.setTooltip('Pause execution for specified number of seconds');}};Blockly.Blocks['time_time']={init:function(){this.appendDummyInput().appendField('current time');this.setOutput(true,'Number');this.setColour(230);this.setTooltip('Get current time in seconds since epoch');}};Blockly.Python['time_sleep']=function(block){const seconds=Blockly.Python.valueToCode(block,'SECONDS',Blockly.Python.ORDER_ATOMIC)||'0';return`time.sleep(${seconds})\\n`;};Blockly.Python['time_time']=function(block){return['time.time()',Blockly.Python.ORDER_FUNCTION_CALL];};","map":{"version":3,"names":["Blockly","Blocks","init","appendValueInput","setCheck","appendField","setPreviousStatement","setNextStatement","setColour","setTooltip","appendDummyInput","setOutput","Python","block","seconds","valueToCode","ORDER_ATOMIC","ORDER_FUNCTION_CALL"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/pi_app/frontend/src/blocks/time_blocks.js"],"sourcesContent":["import Blockly from 'blockly';\r\n\r\nBlockly.Blocks['time_sleep'] = {\r\n  init: function() {\r\n    this.appendValueInput('SECONDS')\r\n        .setCheck('Number')\r\n        .appendField('sleep for')\r\n        .appendField('seconds');\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(230);\r\n    this.setTooltip('Pause execution for specified number of seconds');\r\n  }\r\n};\r\n\r\nBlockly.Blocks['time_time'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField('current time');\r\n    this.setOutput(true, 'Number');\r\n    this.setColour(230);\r\n    this.setTooltip('Get current time in seconds since epoch');\r\n  }\r\n};\r\n\r\nBlockly.Python['time_sleep'] = function(block) {\r\n  const seconds = Blockly.Python.valueToCode(block, 'SECONDS', Blockly.Python.ORDER_ATOMIC) || '0';\r\n  return `time.sleep(${seconds})\\n`;\r\n};\r\n\r\nBlockly.Python['time_time'] = function(block) {\r\n  return ['time.time()', Blockly.Python.ORDER_FUNCTION_CALL];\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,OAAO,KAAM,SAAS,CAE7BA,OAAO,CAACC,MAAM,CAAC,YAAY,CAAC,CAAG,CAC7BC,IAAI,CAAE,QAAAA,CAAA,CAAW,CACf,IAAI,CAACC,gBAAgB,CAAC,SAAS,CAAC,CAC3BC,QAAQ,CAAC,QAAQ,CAAC,CAClBC,WAAW,CAAC,WAAW,CAAC,CACxBA,WAAW,CAAC,SAAS,CAAC,CAC3B,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAAE,IAAI,CAAC,CACrC,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAE,IAAI,CAAC,CACjC,IAAI,CAACC,SAAS,CAAC,GAAG,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,iDAAiD,CAAC,CACpE,CACF,CAAC,CAEDT,OAAO,CAACC,MAAM,CAAC,WAAW,CAAC,CAAG,CAC5BC,IAAI,CAAE,QAAAA,CAAA,CAAW,CACf,IAAI,CAACQ,gBAAgB,CAAC,CAAC,CAClBL,WAAW,CAAC,cAAc,CAAC,CAChC,IAAI,CAACM,SAAS,CAAC,IAAI,CAAE,QAAQ,CAAC,CAC9B,IAAI,CAACH,SAAS,CAAC,GAAG,CAAC,CACnB,IAAI,CAACC,UAAU,CAAC,yCAAyC,CAAC,CAC5D,CACF,CAAC,CAEDT,OAAO,CAACY,MAAM,CAAC,YAAY,CAAC,CAAG,SAASC,KAAK,CAAE,CAC7C,KAAM,CAAAC,OAAO,CAAGd,OAAO,CAACY,MAAM,CAACG,WAAW,CAACF,KAAK,CAAE,SAAS,CAAEb,OAAO,CAACY,MAAM,CAACI,YAAY,CAAC,EAAI,GAAG,CAChG,MAAO,cAAcF,OAAO,KAAK,CACnC,CAAC,CAEDd,OAAO,CAACY,MAAM,CAAC,WAAW,CAAC,CAAG,SAASC,KAAK,CAAE,CAC5C,MAAO,CAAC,aAAa,CAAEb,OAAO,CAACY,MAAM,CAACK,mBAAmB,CAAC,CAC5D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}