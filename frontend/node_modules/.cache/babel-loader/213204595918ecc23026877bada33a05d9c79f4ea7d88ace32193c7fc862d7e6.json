{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React from \"react\";\nimport Blockly from \"blockly\";\nimport debounce from \"./debounce\";\nfunction importFromXml(xml, workspace,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nonImportError) {\n  try {\n    if (workspace.getAllBlocks(false).length > 0) return; // we won't load blocks again if they are already loaded\n    Blockly.Xml.domToWorkspace(Blockly.utils.xml.textToDom(xml), workspace);\n    return true;\n  } catch (e) {\n    if (onImportError) {\n      onImportError(e);\n    }\n    return false;\n  }\n}\nfunction importFromJson(json, workspace,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nonImportError) {\n  try {\n    Blockly.serialization.workspaces.load(json, workspace);\n    return true;\n  } catch (e) {\n    if (onImportError) {\n      onImportError(e);\n    }\n    return false;\n  }\n}\nvar useBlocklyWorkspace = function (_a) {\n  var ref = _a.ref,\n    initialXml = _a.initialXml,\n    initialJson = _a.initialJson,\n    toolboxConfiguration = _a.toolboxConfiguration,\n    workspaceConfiguration = _a.workspaceConfiguration,\n    onWorkspaceChange = _a.onWorkspaceChange,\n    onImportXmlError = _a.onImportXmlError,\n    onImportError = _a.onImportError,\n    onInject = _a.onInject,\n    onDispose = _a.onDispose;\n  // onImportError replaces onImportXmlError \n  // This is done for not breaking the signature until depreaction\n  onImportError = onImportError !== null && onImportError !== void 0 ? onImportError : onImportXmlError;\n  var _b = React.useState(null),\n    workspace = _b[0],\n    setWorkspace = _b[1];\n  var _c = React.useState(initialXml || null),\n    xml = _c[0],\n    setXml = _c[1];\n  var _d = React.useState(initialJson || null),\n    json = _d[0],\n    setJson = _d[1];\n  var _e = React.useState(false),\n    didInitialImport = _e[0],\n    setDidInitialImport = _e[1];\n  var _f = React.useState(false),\n    didHandleNewWorkspace = _f[0],\n    setDidHandleNewWorkspace = _f[1];\n  // we explicitly don't want to recreate the workspace when the configuration changes\n  // so, we'll keep it in a ref and update as necessary in an effect hook\n  var workspaceConfigurationRef = React.useRef(workspaceConfiguration);\n  React.useEffect(function () {\n    workspaceConfigurationRef.current = workspaceConfiguration;\n  }, [workspaceConfiguration]);\n  var toolboxConfigurationRef = React.useRef(toolboxConfiguration);\n  React.useEffect(function () {\n    toolboxConfigurationRef.current = toolboxConfiguration;\n    if (toolboxConfiguration && workspace && !(workspaceConfiguration === null || workspaceConfiguration === void 0 ? void 0 : workspaceConfiguration.readOnly)) {\n      workspace.updateToolbox(toolboxConfiguration);\n    }\n  }, [toolboxConfiguration, workspace, workspaceConfiguration]);\n  var onInjectRef = React.useRef(onInject);\n  var onDisposeRef = React.useRef(onDispose);\n  React.useEffect(function () {\n    onInjectRef.current = onInject;\n  }, [onInject]);\n  React.useEffect(function () {\n    onDisposeRef.current = onDispose;\n  }, [onDispose]);\n  var handleWorkspaceChanged = React.useCallback(function (newWorkspace) {\n    if (onWorkspaceChange) {\n      onWorkspaceChange(newWorkspace);\n    }\n  }, [onWorkspaceChange]);\n  // Workspace creation\n  React.useEffect(function () {\n    if (!ref.current) {\n      return;\n    }\n    var newWorkspace = Blockly.inject(ref.current, __assign(__assign({}, workspaceConfigurationRef.current), {\n      toolbox: toolboxConfigurationRef.current\n    }));\n    setWorkspace(newWorkspace);\n    setDidInitialImport(false); // force a re-import if we recreate the workspace\n    setDidHandleNewWorkspace(false); // Signal that a workspace change event needs to be sent.\n    if (onInjectRef.current) {\n      onInjectRef.current(newWorkspace);\n    }\n    var onDisposeFunction = onDisposeRef.current;\n    // Dispose of the workspace when our div ref goes away (Equivalent to didComponentUnmount)\n    return function () {\n      newWorkspace.dispose();\n      if (onDisposeFunction) {\n        onDisposeFunction(newWorkspace);\n      }\n    };\n  }, [ref]);\n  // Send a workspace change event when the workspace is created\n  React.useEffect(function () {\n    if (workspace && !didHandleNewWorkspace) {\n      handleWorkspaceChanged(workspace);\n    }\n  }, [handleWorkspaceChanged, didHandleNewWorkspace, workspace]);\n  // Workspace change listener\n  React.useEffect(function () {\n    if (workspace == null) {\n      return undefined;\n    }\n    var listener = function () {\n      handleWorkspaceChanged(workspace);\n    };\n    workspace.addChangeListener(listener);\n    return function () {\n      workspace.removeChangeListener(listener);\n    };\n  }, [workspace, handleWorkspaceChanged]);\n  // xmlDidChange callback\n  React.useEffect(function () {\n    if (workspace == null) {\n      return undefined;\n    }\n    var _a = debounce(function () {\n        var newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));\n        if (newXml === xml) {\n          return;\n        }\n        var newJson = Blockly.serialization.workspaces.save(workspace);\n        setJson(newJson);\n        setXml(newXml);\n      }, 200),\n      callback = _a[0],\n      cancel = _a[1];\n    workspace.addChangeListener(callback);\n    return function () {\n      workspace.removeChangeListener(callback);\n      cancel();\n    };\n  }, [workspace, xml]);\n  // Initial Xml Changes\n  React.useEffect(function () {\n    if (xml && workspace && !didInitialImport) {\n      var success = importFromXml(xml, workspace, onImportError);\n      if (!success) {\n        setXml(null);\n      }\n      setDidInitialImport(true);\n    } else if (json && workspace && !didInitialImport) {\n      var success = importFromJson(json, workspace, onImportError);\n      if (!success) {\n        setJson(null);\n      }\n      var jsonToXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));\n      setXml(jsonToXml);\n      setDidInitialImport(true);\n    }\n  }, [json, xml, workspace, didInitialImport, onImportError]);\n  return {\n    workspace: workspace,\n    xml: xml,\n    json: json\n  };\n};\nexport default useBlocklyWorkspace;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","Blockly","debounce","importFromXml","xml","workspace","onImportError","getAllBlocks","Xml","domToWorkspace","utils","textToDom","e","importFromJson","json","serialization","workspaces","load","useBlocklyWorkspace","_a","ref","initialXml","initialJson","toolboxConfiguration","workspaceConfiguration","onWorkspaceChange","onImportXmlError","onInject","onDispose","_b","useState","setWorkspace","_c","setXml","_d","setJson","_e","didInitialImport","setDidInitialImport","_f","didHandleNewWorkspace","setDidHandleNewWorkspace","workspaceConfigurationRef","useRef","useEffect","current","toolboxConfigurationRef","readOnly","updateToolbox","onInjectRef","onDisposeRef","handleWorkspaceChanged","useCallback","newWorkspace","inject","toolbox","onDisposeFunction","dispose","undefined","listener","addChangeListener","removeChangeListener","newXml","domToText","workspaceToDom","newJson","save","callback","cancel","success","jsonToXml"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/node_modules/react-blockly/dist/useBlocklyWorkspace.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React from \"react\";\nimport Blockly from \"blockly\";\nimport debounce from \"./debounce\";\nfunction importFromXml(xml, workspace, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nonImportError) {\n    try {\n        if (workspace.getAllBlocks(false).length > 0)\n            return; // we won't load blocks again if they are already loaded\n        Blockly.Xml.domToWorkspace(Blockly.utils.xml.textToDom(xml), workspace);\n        return true;\n    }\n    catch (e) {\n        if (onImportError) {\n            onImportError(e);\n        }\n        return false;\n    }\n}\nfunction importFromJson(json, workspace, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nonImportError) {\n    try {\n        Blockly.serialization.workspaces.load(json, workspace);\n        return true;\n    }\n    catch (e) {\n        if (onImportError) {\n            onImportError(e);\n        }\n        return false;\n    }\n}\nvar useBlocklyWorkspace = function (_a) {\n    var ref = _a.ref, initialXml = _a.initialXml, initialJson = _a.initialJson, toolboxConfiguration = _a.toolboxConfiguration, workspaceConfiguration = _a.workspaceConfiguration, onWorkspaceChange = _a.onWorkspaceChange, onImportXmlError = _a.onImportXmlError, onImportError = _a.onImportError, onInject = _a.onInject, onDispose = _a.onDispose;\n    // onImportError replaces onImportXmlError \n    // This is done for not breaking the signature until depreaction\n    onImportError = onImportError !== null && onImportError !== void 0 ? onImportError : onImportXmlError;\n    var _b = React.useState(null), workspace = _b[0], setWorkspace = _b[1];\n    var _c = React.useState(initialXml || null), xml = _c[0], setXml = _c[1];\n    var _d = React.useState(initialJson || null), json = _d[0], setJson = _d[1];\n    var _e = React.useState(false), didInitialImport = _e[0], setDidInitialImport = _e[1];\n    var _f = React.useState(false), didHandleNewWorkspace = _f[0], setDidHandleNewWorkspace = _f[1];\n    // we explicitly don't want to recreate the workspace when the configuration changes\n    // so, we'll keep it in a ref and update as necessary in an effect hook\n    var workspaceConfigurationRef = React.useRef(workspaceConfiguration);\n    React.useEffect(function () {\n        workspaceConfigurationRef.current = workspaceConfiguration;\n    }, [workspaceConfiguration]);\n    var toolboxConfigurationRef = React.useRef(toolboxConfiguration);\n    React.useEffect(function () {\n        toolboxConfigurationRef.current = toolboxConfiguration;\n        if (toolboxConfiguration && workspace && !(workspaceConfiguration === null || workspaceConfiguration === void 0 ? void 0 : workspaceConfiguration.readOnly)) {\n            workspace.updateToolbox(toolboxConfiguration);\n        }\n    }, [toolboxConfiguration, workspace, workspaceConfiguration]);\n    var onInjectRef = React.useRef(onInject);\n    var onDisposeRef = React.useRef(onDispose);\n    React.useEffect(function () {\n        onInjectRef.current = onInject;\n    }, [onInject]);\n    React.useEffect(function () {\n        onDisposeRef.current = onDispose;\n    }, [onDispose]);\n    var handleWorkspaceChanged = React.useCallback(function (newWorkspace) {\n        if (onWorkspaceChange) {\n            onWorkspaceChange(newWorkspace);\n        }\n    }, [onWorkspaceChange]);\n    // Workspace creation\n    React.useEffect(function () {\n        if (!ref.current) {\n            return;\n        }\n        var newWorkspace = Blockly.inject(ref.current, __assign(__assign({}, workspaceConfigurationRef.current), { toolbox: toolboxConfigurationRef.current }));\n        setWorkspace(newWorkspace);\n        setDidInitialImport(false); // force a re-import if we recreate the workspace\n        setDidHandleNewWorkspace(false); // Signal that a workspace change event needs to be sent.\n        if (onInjectRef.current) {\n            onInjectRef.current(newWorkspace);\n        }\n        var onDisposeFunction = onDisposeRef.current;\n        // Dispose of the workspace when our div ref goes away (Equivalent to didComponentUnmount)\n        return function () {\n            newWorkspace.dispose();\n            if (onDisposeFunction) {\n                onDisposeFunction(newWorkspace);\n            }\n        };\n    }, [ref]);\n    // Send a workspace change event when the workspace is created\n    React.useEffect(function () {\n        if (workspace && !didHandleNewWorkspace) {\n            handleWorkspaceChanged(workspace);\n        }\n    }, [handleWorkspaceChanged, didHandleNewWorkspace, workspace]);\n    // Workspace change listener\n    React.useEffect(function () {\n        if (workspace == null) {\n            return undefined;\n        }\n        var listener = function () {\n            handleWorkspaceChanged(workspace);\n        };\n        workspace.addChangeListener(listener);\n        return function () {\n            workspace.removeChangeListener(listener);\n        };\n    }, [workspace, handleWorkspaceChanged]);\n    // xmlDidChange callback\n    React.useEffect(function () {\n        if (workspace == null) {\n            return undefined;\n        }\n        var _a = debounce(function () {\n            var newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));\n            if (newXml === xml) {\n                return;\n            }\n            var newJson = Blockly.serialization.workspaces.save(workspace);\n            setJson(newJson);\n            setXml(newXml);\n        }, 200), callback = _a[0], cancel = _a[1];\n        workspace.addChangeListener(callback);\n        return function () {\n            workspace.removeChangeListener(callback);\n            cancel();\n        };\n    }, [workspace, xml]);\n    // Initial Xml Changes\n    React.useEffect(function () {\n        if (xml && workspace && !didInitialImport) {\n            var success = importFromXml(xml, workspace, onImportError);\n            if (!success) {\n                setXml(null);\n            }\n            setDidInitialImport(true);\n        }\n        else if (json && workspace && !didInitialImport) {\n            var success = importFromJson(json, workspace, onImportError);\n            if (!success) {\n                setJson(null);\n            }\n            var jsonToXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));\n            setXml(jsonToXml);\n            setDidInitialImport(true);\n        }\n    }, [json, xml, workspace, didInitialImport, onImportError]);\n    return { workspace: workspace, xml: xml, json: json };\n};\nexport default useBlocklyWorkspace;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}