{"ast":null,"code":"// Do not edit this file; automatically generated.\n\n/* eslint-disable */\n;\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([\"./blockly_compressed.js\"], factory);\n  } else if (typeof exports === 'object') {\n    // Node.js\n    module.exports = factory(require(\"./blockly_compressed.js\"));\n  } else {\n    // Script\n    root.javascript = factory(root.Blockly);\n    root.Blockly.JavaScript = root.javascript.javascriptGenerator;\n  }\n})(this, function (__parent__) {\n  var $ = __parent__.__namespace__;\n  var colour_picker$$module$build$src$generators$javascript$colour = function (a, b) {\n      return [b.quote_(a.getFieldValue(\"COLOUR\")), Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    colour_random$$module$build$src$generators$javascript$colour = function (a, b) {\n      return [b.provideFunction_(\"colourRandom\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`) + \"()\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    colour_rgb$$module$build$src$generators$javascript$colour = function (a, b) {\n      const c = b.valueToCode(a, \"RED\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || 0,\n        d = b.valueToCode(a, \"GREEN\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || 0;\n      a = b.valueToCode(a, \"BLUE\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || 0;\n      return [b.provideFunction_(\"colourRgb\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`) + \"(\" + c + \", \" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    colour_blend$$module$build$src$generators$javascript$colour = function (a, b) {\n      const c = b.valueToCode(a, \"COLOUR1\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"'#000000'\",\n        d = b.valueToCode(a, \"COLOUR2\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"'#000000'\";\n      a = b.valueToCode(a, \"RATIO\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || .5;\n      return [b.provideFunction_(\"colourBlend\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`) + \"(\" + c + \", \" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_create_empty$$module$build$src$generators$javascript$lists = function (a, b) {\n      return [\"[]\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    lists_create_with$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = Array(a.itemCount_);\n      for (let d = 0; d < a.itemCount_; d++) c[d] = b.valueToCode(a, \"ADD\" + d, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\";\n      return [\"[\" + c.join(\", \") + \"]\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    lists_repeat$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = b.provideFunction_(\"listsRepeat\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`),\n        d = b.valueToCode(a, \"ITEM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\";\n      a = b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      return [c + \"(\" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_length$$module$build$src$generators$javascript$lists = function (a, b) {\n      return [(b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n    },\n    lists_isEmpty$$module$build$src$generators$javascript$lists = function (a, b) {\n      return [\"!\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT];\n    },\n    lists_indexOf$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        d = b.valueToCode(a, \"FIND\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      b = (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\") + \".\" + c + \"(\" + d + \")\";\n      return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION] : [b, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_getIndex$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = a.getFieldValue(\"MODE\") || \"GET\",\n        d = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n      var e = b.valueToCode(a, \"VALUE\", \"RANDOM\" === d ? Order$$module$build$src$generators$javascript$javascript_generator.NONE : Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n      switch (d) {\n        case \"FIRST\":\n          if (\"GET\" === c) return [e + \"[0]\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".shift()\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"REMOVE\" === c) return e + \".shift();\\n\";\n          break;\n        case \"LAST\":\n          if (\"GET\" === c) return [e + \".slice(-1)[0]\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".pop()\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"REMOVE\" === c) return e + \".pop();\\n\";\n          break;\n        case \"FROM_START\":\n          a = b.getAdjusted(a, \"AT\");\n          if (\"GET\" === c) return [e + \"[\" + a + \"]\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n          if (\"GET_REMOVE\" === c) return [e + \".splice(\" + a + \", 1)[0]\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".splice(\" + a + \", 1);\\n\";\n          break;\n        case \"FROM_END\":\n          a = b.getAdjusted(a, \"AT\", 1, !0);\n          if (\"GET\" === c) return [e + \".slice(\" + a + \")[0]\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"GET_REMOVE\" === c) return [e + \".splice(\" + a + \", 1)[0]\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \".splice(\" + a + \", 1);\";\n          break;\n        case \"RANDOM\":\n          e = b.provideFunction_(\"listsGetRandomItem\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`) + \"(\" + e + \", \" + (\"GET\" !== c) + \")\";\n          if (\"GET\" === c || \"GET_REMOVE\" === c) return [e, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n          if (\"REMOVE\" === c) return e + \";\\n\";\n      }\n      throw Error(\"Unhandled combination (lists_getIndex).\");\n    },\n    lists_setIndex$$module$build$src$generators$javascript$lists = function (a, b) {\n      function c() {\n        if (d.match(/^\\w+$/)) return \"\";\n        const h = b.nameDB_.getDistinctName(\"tmpList\", $.NameType$$module$build$src$core$names.VARIABLE),\n          k = \"var \" + h + \" = \" + d + \";\\n\";\n        d = h;\n        return k;\n      }\n      let d = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n      const e = a.getFieldValue(\"MODE\") || \"GET\";\n      var f = a.getFieldValue(\"WHERE\") || \"FROM_START\";\n      const g = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"null\";\n      switch (f) {\n        case \"FIRST\":\n          if (\"SET\" === e) return d + \"[0] = \" + g + \";\\n\";\n          if (\"INSERT\" === e) return d + \".unshift(\" + g + \");\\n\";\n          break;\n        case \"LAST\":\n          if (\"SET\" === e) return c() + (d + \"[\" + d + \".length - 1] = \" + g + \";\\n\");\n          if (\"INSERT\" === e) return d + \".push(\" + g + \");\\n\";\n          break;\n        case \"FROM_START\":\n          a = b.getAdjusted(a, \"AT\");\n          if (\"SET\" === e) return d + \"[\" + a + \"] = \" + g + \";\\n\";\n          if (\"INSERT\" === e) return d + \".splice(\" + a + \", 0, \" + g + \");\\n\";\n          break;\n        case \"FROM_END\":\n          a = b.getAdjusted(a, \"AT\", 1, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n          f = c();\n          if (\"SET\" === e) return f + (d + \"[\" + d + \".length - \" + a + \"] = \" + g + \";\\n\");\n          if (\"INSERT\" === e) return f + (d + \".splice(\" + d + \".length - \" + a + \", 0, \" + g + \");\\n\");\n          break;\n        case \"RANDOM\":\n          a = c();\n          f = b.nameDB_.getDistinctName(\"tmpX\", $.NameType$$module$build$src$core$names.VARIABLE);\n          a += \"var \" + f + \" = Math.floor(Math.random() * \" + d + \".length);\\n\";\n          if (\"SET\" === e) return a + (d + \"[\" + f + \"] = \" + g + \";\\n\");\n          if (\"INSERT\" === e) return a + (d + \".splice(\" + f + \", 0, \" + g + \");\\n\");\n      }\n      throw Error(\"Unhandled combination (lists_setIndex).\");\n    },\n    lists_getSublist$$module$build$src$generators$javascript$lists = function (a, b) {\n      var c = {\n          FIRST: \"First\",\n          LAST: \"Last\",\n          FROM_START: \"FromStart\",\n          FROM_END: \"FromEnd\"\n        },\n        d = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n      const e = a.getFieldValue(\"WHERE1\"),\n        f = a.getFieldValue(\"WHERE2\");\n      if (\"FIRST\" === e && \"LAST\" === f) d += \".slice(0)\";else if (d.match(/^\\w+$/) || \"FROM_END\" !== e && \"FROM_START\" === f) {\n        switch (e) {\n          case \"FROM_START\":\n            c = b.getAdjusted(a, \"AT1\");\n            break;\n          case \"FROM_END\":\n            c = b.getAdjusted(a, \"AT1\", 1, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            c = d + \".length - \" + c;\n            break;\n          case \"FIRST\":\n            c = \"0\";\n            break;\n          default:\n            throw Error(\"Unhandled option (lists_getSublist).\");\n        }\n        switch (f) {\n          case \"FROM_START\":\n            b = b.getAdjusted(a, \"AT2\", 1);\n            break;\n          case \"FROM_END\":\n            b = b.getAdjusted(a, \"AT2\", 0, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            b = d + \".length - \" + b;\n            break;\n          case \"LAST\":\n            b = d + \".length\";\n            break;\n          default:\n            throw Error(\"Unhandled option (lists_getSublist).\");\n        }\n        d = d + \".slice(\" + c + \", \" + b + \")\";\n      } else {\n        const g = b.getAdjusted(a, \"AT1\");\n        a = b.getAdjusted(a, \"AT2\");\n        d = b.provideFunction_(\"subsequence\" + c[e] + c[f], `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(sequence${\"FROM_END\" === e || \"FROM_START\" === e ? \", at1\" : \"\"}${\"FROM_END\" === f || \"FROM_START\" === f ? \", at2\" : \"\"}) {\n  var start = ${getSubstringIndex$$module$build$src$generators$javascript$lists(\"sequence\", e, \"at1\")};\n  var end = ${getSubstringIndex$$module$build$src$generators$javascript$lists(\"sequence\", f, \"at2\")} + 1;\n  return sequence.slice(start, end);\n}\n`) + \"(\" + d + (\"FROM_END\" === e || \"FROM_START\" === e ? \", \" + g : \"\") + (\"FROM_END\" === f || \"FROM_START\" === f ? \", \" + a : \"\") + \")\";\n      }\n      return [d, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_sort$$module$build$src$generators$javascript$lists = function (a, b) {\n      const c = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL) || \"[]\",\n        d = \"1\" === a.getFieldValue(\"DIRECTION\") ? 1 : -1;\n      a = a.getFieldValue(\"TYPE\");\n      b = b.provideFunction_(\"listsGetSortCompare\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `);\n      return [c + \".slice().sort(\" + b + '(\"' + a + '\", ' + d + \"))\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_split$$module$build$src$generators$javascript$lists = function (a, b) {\n      let c = b.valueToCode(a, \"INPUT\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER);\n      b = b.valueToCode(a, \"DELIM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      a = a.getFieldValue(\"MODE\");\n      if (\"SPLIT\" === a) c || (c = \"''\"), a = \"split\";else if (\"JOIN\" === a) c || (c = \"[]\"), a = \"join\";else throw Error(\"Unknown mode: \" + a);\n      return [c + \".\" + a + \"(\" + b + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    lists_reverse$$module$build$src$generators$javascript$lists = function (a, b) {\n      return [(b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL) || \"[]\") + \".slice().reverse()\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    controls_if$$module$build$src$generators$javascript$logic = function (a, b) {\n      var c = 0;\n      let d = \"\";\n      b.STATEMENT_PREFIX && (d += b.injectId(b.STATEMENT_PREFIX, a));\n      do {\n        const e = b.valueToCode(a, \"IF\" + c, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"false\";\n        let f = b.statementToCode(a, \"DO\" + c);\n        b.STATEMENT_SUFFIX && (f = b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT) + f);\n        d += (0 < c ? \" else \" : \"\") + \"if (\" + e + \") {\\n\" + f + \"}\";\n        c++;\n      } while (a.getInput(\"IF\" + c));\n      if (a.getInput(\"ELSE\") || b.STATEMENT_SUFFIX) c = b.statementToCode(a, \"ELSE\"), b.STATEMENT_SUFFIX && (c = b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT) + c), d += \" else {\\n\" + c + \"}\";\n      return d + \"\\n\";\n    },\n    logic_compare$$module$build$src$generators$javascript$logic = function (a, b) {\n      const c = {\n          EQ: \"==\",\n          NEQ: \"!=\",\n          LT: \"<\",\n          LTE: \"<=\",\n          GT: \">\",\n          GTE: \">=\"\n        }[a.getFieldValue(\"OP\")],\n        d = \"==\" === c || \"!=\" === c ? Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY : Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL,\n        e = b.valueToCode(a, \"A\", d) || \"0\";\n      a = b.valueToCode(a, \"B\", d) || \"0\";\n      return [e + \" \" + c + \" \" + a, d];\n    },\n    logic_operation$$module$build$src$generators$javascript$logic = function (a, b) {\n      const c = \"AND\" === a.getFieldValue(\"OP\") ? \"&&\" : \"||\",\n        d = \"&&\" === c ? Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_AND : Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_OR;\n      let e = b.valueToCode(a, \"A\", d);\n      a = b.valueToCode(a, \"B\", d);\n      e || a ? (b = \"&&\" === c ? \"true\" : \"false\", e || (e = b), a || (a = b)) : a = e = \"false\";\n      return [e + \" \" + c + \" \" + a, d];\n    },\n    logic_negate$$module$build$src$generators$javascript$logic = function (a, b) {\n      const c = Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT;\n      return [\"!\" + (b.valueToCode(a, \"BOOL\", c) || \"true\"), c];\n    },\n    logic_boolean$$module$build$src$generators$javascript$logic = function (a, b) {\n      return [\"TRUE\" === a.getFieldValue(\"BOOL\") ? \"true\" : \"false\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    logic_null$$module$build$src$generators$javascript$logic = function (a, b) {\n      return [\"null\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    logic_ternary$$module$build$src$generators$javascript$logic = function (a, b) {\n      const c = b.valueToCode(a, \"IF\", Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL) || \"false\",\n        d = b.valueToCode(a, \"THEN\", Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL) || \"null\";\n      a = b.valueToCode(a, \"ELSE\", Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL) || \"null\";\n      return [c + \" ? \" + d + \" : \" + a, Order$$module$build$src$generators$javascript$javascript_generator.CONDITIONAL];\n    },\n    controls_repeat_ext$$module$build$src$generators$javascript$loops = function (a, b) {\n      let c;\n      c = a.getField(\"TIMES\") ? String(Number(a.getFieldValue(\"TIMES\"))) : b.valueToCode(a, \"TIMES\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\";\n      let d = b.statementToCode(a, \"DO\");\n      d = b.addLoopTrap(d, a);\n      a = \"\";\n      const e = b.nameDB_.getDistinctName(\"count\", $.NameType$$module$build$src$core$names.VARIABLE);\n      let f = c;\n      c.match(/^\\w+$/) || $.isNumber$$module$build$src$core$utils$string(c) || (f = b.nameDB_.getDistinctName(\"repeat_end\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + f + \" = \" + c + \";\\n\");\n      return a + (\"for (var \" + e + \" = 0; \" + e + \" < \" + f + \"; \" + e + \"++) {\\n\" + d + \"}\\n\");\n    },\n    controls_whileUntil$$module$build$src$generators$javascript$loops = function (a, b) {\n      const c = \"UNTIL\" === a.getFieldValue(\"MODE\");\n      let d = b.valueToCode(a, \"BOOL\", c ? Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT : Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"false\",\n        e = b.statementToCode(a, \"DO\");\n      e = b.addLoopTrap(e, a);\n      c && (d = \"!\" + d);\n      return \"while (\" + d + \") {\\n\" + e + \"}\\n\";\n    },\n    controls_for$$module$build$src$generators$javascript$loops = function (a, b) {\n      var c = b.getVariableName(a.getFieldValue(\"VAR\")),\n        d = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\",\n        e = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\";\n      const f = b.valueToCode(a, \"BY\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"1\";\n      let g = b.statementToCode(a, \"DO\");\n      g = b.addLoopTrap(g, a);\n      if ($.isNumber$$module$build$src$core$utils$string(d) && $.isNumber$$module$build$src$core$utils$string(e) && $.isNumber$$module$build$src$core$utils$string(f)) b = Number(d) <= Number(e), a = \"for (\" + c + \" = \" + d + \"; \" + c + (b ? \" <= \" : \" >= \") + e + \"; \" + c, c = Math.abs(Number(f)), a = 1 === c ? a + (b ? \"++\" : \"--\") : a + ((b ? \" += \" : \" -= \") + c), a += \") {\\n\" + g + \"}\\n\";else {\n        a = \"\";\n        let h = d;\n        d.match(/^\\w+$/) || $.isNumber$$module$build$src$core$utils$string(d) || (h = b.nameDB_.getDistinctName(c + \"_start\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + h + \" = \" + d + \";\\n\");\n        d = e;\n        e.match(/^\\w+$/) || $.isNumber$$module$build$src$core$utils$string(e) || (d = b.nameDB_.getDistinctName(c + \"_end\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + d + \" = \" + e + \";\\n\");\n        e = b.nameDB_.getDistinctName(c + \"_inc\", $.NameType$$module$build$src$core$names.VARIABLE);\n        a += \"var \" + e + \" = \";\n        a = $.isNumber$$module$build$src$core$utils$string(f) ? a + (Math.abs(Number(f)) + \";\\n\") : a + (\"Math.abs(\" + f + \");\\n\");\n        a += \"if (\" + h + \" > \" + d + \") {\\n\";\n        a += b.INDENT + e + \" = -\" + e + \";\\n\";\n        a = a + \"}\\nfor (\" + (c + \" = \" + h + \"; \" + e + \" >= 0 ? \" + c + \" <= \" + d + \" : \" + c + \" >= \" + d + \"; \" + c + \" += \" + e + \") {\\n\" + g + \"}\\n\");\n      }\n      return a;\n    },\n    controls_forEach$$module$build$src$generators$javascript$loops = function (a, b) {\n      const c = b.getVariableName(a.getFieldValue(\"VAR\"));\n      var d = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"[]\";\n      let e = b.statementToCode(a, \"DO\");\n      e = b.addLoopTrap(e, a);\n      a = \"\";\n      let f = d;\n      d.match(/^\\w+$/) || (f = b.nameDB_.getDistinctName(c + \"_list\", $.NameType$$module$build$src$core$names.VARIABLE), a += \"var \" + f + \" = \" + d + \";\\n\");\n      d = b.nameDB_.getDistinctName(c + \"_index\", $.NameType$$module$build$src$core$names.VARIABLE);\n      e = b.INDENT + c + \" = \" + f + \"[\" + d + \"];\\n\" + e;\n      return a + (\"for (var \" + d + \" in \" + f + \") {\\n\" + e + \"}\\n\");\n    },\n    controls_flow_statements$$module$build$src$generators$javascript$loops = function (a, b) {\n      let c = \"\";\n      b.STATEMENT_PREFIX && (c += b.injectId(b.STATEMENT_PREFIX, a));\n      b.STATEMENT_SUFFIX && (c += b.injectId(b.STATEMENT_SUFFIX, a));\n      if (b.STATEMENT_PREFIX) {\n        const d = a.getSurroundLoop();\n        d && !d.suppressPrefixSuffix && (c += b.injectId(b.STATEMENT_PREFIX, d));\n      }\n      switch (a.getFieldValue(\"FLOW\")) {\n        case \"BREAK\":\n          return c + \"break;\\n\";\n        case \"CONTINUE\":\n          return c + \"continue;\\n\";\n      }\n      throw Error(\"Unknown flow statement.\");\n    },\n    math_number$$module$build$src$generators$javascript$math = function (a, b) {\n      a = Number(a.getFieldValue(\"NUM\"));\n      return [String(a), 0 <= a ? Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC : Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION];\n    },\n    math_arithmetic$$module$build$src$generators$javascript$math = function (a, b) {\n      var c = {\n        ADD: [\" + \", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION],\n        MINUS: [\" - \", Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION],\n        MULTIPLY: [\" * \", Order$$module$build$src$generators$javascript$javascript_generator.MULTIPLICATION],\n        DIVIDE: [\" / \", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION],\n        POWER: [null, Order$$module$build$src$generators$javascript$javascript_generator.NONE]\n      }[a.getFieldValue(\"OP\")];\n      const d = c[0];\n      c = c[1];\n      const e = b.valueToCode(a, \"A\", c) || \"0\";\n      a = b.valueToCode(a, \"B\", c) || \"0\";\n      return d ? [e + d + a, c] : [\"Math.pow(\" + e + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_single$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = a.getFieldValue(\"OP\");\n      let d;\n      if (\"NEG\" === c) return a = b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION) || \"0\", \"-\" === a[0] && (a = \" \" + a), [\"-\" + a, Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION];\n      a = \"SIN\" === c || \"COS\" === c || \"TAN\" === c ? b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION) || \"0\" : b.valueToCode(a, \"NUM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      switch (c) {\n        case \"ABS\":\n          d = \"Math.abs(\" + a + \")\";\n          break;\n        case \"ROOT\":\n          d = \"Math.sqrt(\" + a + \")\";\n          break;\n        case \"LN\":\n          d = \"Math.log(\" + a + \")\";\n          break;\n        case \"EXP\":\n          d = \"Math.exp(\" + a + \")\";\n          break;\n        case \"POW10\":\n          d = \"Math.pow(10,\" + a + \")\";\n          break;\n        case \"ROUND\":\n          d = \"Math.round(\" + a + \")\";\n          break;\n        case \"ROUNDUP\":\n          d = \"Math.ceil(\" + a + \")\";\n          break;\n        case \"ROUNDDOWN\":\n          d = \"Math.floor(\" + a + \")\";\n          break;\n        case \"SIN\":\n          d = \"Math.sin(\" + a + \" / 180 * Math.PI)\";\n          break;\n        case \"COS\":\n          d = \"Math.cos(\" + a + \" / 180 * Math.PI)\";\n          break;\n        case \"TAN\":\n          d = \"Math.tan(\" + a + \" / 180 * Math.PI)\";\n      }\n      if (d) return [d, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n      switch (c) {\n        case \"LOG10\":\n          d = \"Math.log(\" + a + \") / Math.log(10)\";\n          break;\n        case \"ASIN\":\n          d = \"Math.asin(\" + a + \") / Math.PI * 180\";\n          break;\n        case \"ACOS\":\n          d = \"Math.acos(\" + a + \") / Math.PI * 180\";\n          break;\n        case \"ATAN\":\n          d = \"Math.atan(\" + a + \") / Math.PI * 180\";\n          break;\n        default:\n          throw Error(\"Unknown math operator: \" + c);\n      }\n      return [d, Order$$module$build$src$generators$javascript$javascript_generator.DIVISION];\n    },\n    math_constant$$module$build$src$generators$javascript$math = function (a, b) {\n      return {\n        PI: [\"Math.PI\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        E: [\"Math.E\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        GOLDEN_RATIO: [\"(1 + Math.sqrt(5)) / 2\", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION],\n        SQRT2: [\"Math.SQRT2\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        SQRT1_2: [\"Math.SQRT1_2\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER],\n        INFINITY: [\"Infinity\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC]\n      }[a.getFieldValue(\"CONSTANT\")];\n    },\n    math_number_property$$module$build$src$generators$javascript$math = function (a, b) {\n      var c = {\n        EVEN: [\" % 2 === 0\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        ODD: [\" % 2 === 1\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        WHOLE: [\" % 1 === 0\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        POSITIVE: [\" > 0\", Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL, Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL],\n        NEGATIVE: [\" < 0\", Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL, Order$$module$build$src$generators$javascript$javascript_generator.RELATIONAL],\n        DIVISIBLE_BY: [null, Order$$module$build$src$generators$javascript$javascript_generator.MODULUS, Order$$module$build$src$generators$javascript$javascript_generator.EQUALITY],\n        PRIME: [null, Order$$module$build$src$generators$javascript$javascript_generator.NONE, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL]\n      };\n      const d = a.getFieldValue(\"PROPERTY\"),\n        [e, f, g] = c[d];\n      c = b.valueToCode(a, \"NUMBER_TO_CHECK\", f) || \"0\";\n      \"PRIME\" === d ? a = b.provideFunction_(\"mathIsPrime\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`) + \"(\" + c + \")\" : \"DIVISIBLE_BY\" === d ? (a = b.valueToCode(a, \"DIVISOR\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS) || \"0\", a = c + \" % \" + a + \" === 0\") : a = c + e;\n      return [a, g];\n    },\n    math_change$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"DELTA\", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION) || \"0\";\n      a = b.getVariableName(a.getFieldValue(\"VAR\"));\n      return a + \" = (typeof \" + a + \" === 'number' ? \" + a + \" : 0) + \" + c + \";\\n\";\n    },\n    math_on_list$$module$build$src$generators$javascript$math = function (a, b) {\n      var c = a.getFieldValue(\"OP\");\n      switch (c) {\n        case \"SUM\":\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"[]\";\n          a += \".reduce(function(x, y) {return x + y;}, 0)\";\n          break;\n        case \"MIN\":\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = \"Math.min.apply(null, \" + a + \")\";\n          break;\n        case \"MAX\":\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = \"Math.max.apply(null, \" + a + \")\";\n          break;\n        case \"AVERAGE\":\n          c = b.provideFunction_(\"mathMean\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"MEDIAN\":\n          c = b.provideFunction_(\"mathMedian\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"MODE\":\n          c = b.provideFunction_(\"mathModes\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"STD_DEV\":\n          c = b.provideFunction_(\"mathStandardDeviation\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        case \"RANDOM\":\n          c = b.provideFunction_(\"mathRandomList\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`);\n          a = b.valueToCode(a, \"LIST\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"[]\";\n          a = c + \"(\" + a + \")\";\n          break;\n        default:\n          throw Error(\"Unknown operator: \" + c);\n      }\n      return [a, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_modulo$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"DIVIDEND\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS) || \"0\";\n      a = b.valueToCode(a, \"DIVISOR\", Order$$module$build$src$generators$javascript$javascript_generator.MODULUS) || \"0\";\n      return [c + \" % \" + a, Order$$module$build$src$generators$javascript$javascript_generator.MODULUS];\n    },\n    math_constrain$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\",\n        d = b.valueToCode(a, \"LOW\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      a = b.valueToCode(a, \"HIGH\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"Infinity\";\n      return [\"Math.min(Math.max(\" + c + \", \" + d + \"), \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_random_int$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      a = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      return [b.provideFunction_(\"mathRandomInt\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`) + \"(\" + c + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_random_float$$module$build$src$generators$javascript$math = function (a, b) {\n      return [\"Math.random()\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    math_atan2$$module$build$src$generators$javascript$math = function (a, b) {\n      const c = b.valueToCode(a, \"X\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\";\n      return [\"Math.atan2(\" + (b.valueToCode(a, \"Y\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"0\") + \", \" + c + \") / Math.PI * 180\", Order$$module$build$src$generators$javascript$javascript_generator.DIVISION];\n    },\n    procedures_defreturn$$module$build$src$generators$javascript$procedures = function (a, b) {\n      const c = b.getProcedureName(a.getFieldValue(\"NAME\"));\n      var d = \"\";\n      b.STATEMENT_PREFIX && (d += b.injectId(b.STATEMENT_PREFIX, a));\n      b.STATEMENT_SUFFIX && (d += b.injectId(b.STATEMENT_SUFFIX, a));\n      d && (d = b.prefixLines(d, b.INDENT));\n      let e = \"\";\n      b.INFINITE_LOOP_TRAP && (e = b.prefixLines(b.injectId(b.INFINITE_LOOP_TRAP, a), b.INDENT));\n      const f = b.statementToCode(a, \"STACK\");\n      let g = b.valueToCode(a, \"RETURN\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"\",\n        h = \"\";\n      f && g && (h = d);\n      g && (g = b.INDENT + \"return \" + g + \";\\n\");\n      const k = [],\n        l = a.getVars();\n      for (let m = 0; m < l.length; m++) k[m] = b.getVariableName(l[m]);\n      d = \"function \" + c + \"(\" + k.join(\", \") + \") {\\n\" + d + e + f + h + g + \"}\";\n      d = b.scrub_(a, d);\n      b.definitions_[\"%\" + c] = d;\n      return null;\n    },\n    procedures_callreturn$$module$build$src$generators$javascript$procedures = function (a, b) {\n      const c = b.getProcedureName(a.getFieldValue(\"NAME\")),\n        d = [],\n        e = a.getVars();\n      for (let f = 0; f < e.length; f++) d[f] = b.valueToCode(a, \"ARG\" + f, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\";\n      return [c + \"(\" + d.join(\", \") + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    procedures_callnoreturn$$module$build$src$generators$javascript$procedures = function (a, b) {\n      return b.forBlock.procedures_callreturn(a, b)[0] + \";\\n\";\n    },\n    procedures_ifreturn$$module$build$src$generators$javascript$procedures = function (a, b) {\n      let c = \"if (\" + (b.valueToCode(a, \"CONDITION\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"false\") + \") {\\n\";\n      b.STATEMENT_SUFFIX && (c += b.prefixLines(b.injectId(b.STATEMENT_SUFFIX, a), b.INDENT));\n      a.hasReturnValue_ ? (a = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"null\", c += b.INDENT + \"return \" + a + \";\\n\") : c += b.INDENT + \"return;\\n\";\n      return c + \"}\\n\";\n    },\n    text$$module$build$src$generators$javascript$text = function (a, b) {\n      return [b.quote_(a.getFieldValue(\"TEXT\")), Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    text_multiline$$module$build$src$generators$javascript$text = function (a, b) {\n      a = b.multiline_quote_(a.getFieldValue(\"TEXT\"));\n      b = -1 !== a.indexOf(\"+\") ? Order$$module$build$src$generators$javascript$javascript_generator.ADDITION : Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC;\n      return [a, b];\n    },\n    text_join$$module$build$src$generators$javascript$text = function (a, b) {\n      switch (a.itemCount_) {\n        case 0:\n          return [\"''\", Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n        case 1:\n          return a = b.valueToCode(a, \"ADD0\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\", forceString$$module$build$src$generators$javascript$text(a);\n        case 2:\n          var c = b.valueToCode(a, \"ADD0\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n          a = b.valueToCode(a, \"ADD1\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n          return [forceString$$module$build$src$generators$javascript$text(c)[0] + \" + \" + forceString$$module$build$src$generators$javascript$text(a)[0], Order$$module$build$src$generators$javascript$javascript_generator.ADDITION];\n        default:\n          c = Array(a.itemCount_);\n          for (let d = 0; d < a.itemCount_; d++) c[d] = b.valueToCode(a, \"ADD\" + d, Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n          return [\"[\" + c.join(\",\") + \"].join('')\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n      }\n    },\n    text_append$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = b.getVariableName(a.getFieldValue(\"VAR\"));\n      a = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return c + \" += \" + forceString$$module$build$src$generators$javascript$text(a)[0] + \";\\n\";\n    },\n    text_length$$module$build$src$generators$javascript$text = function (a, b) {\n      return [(b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER];\n    },\n    text_isEmpty$$module$build$src$generators$javascript$text = function (a, b) {\n      return [\"!\" + (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".length\", Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT];\n    },\n    text_indexOf$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = \"FIRST\" === a.getFieldValue(\"END\") ? \"indexOf\" : \"lastIndexOf\",\n        d = b.valueToCode(a, \"FIND\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      b = (b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".\" + c + \"(\" + d + \")\";\n      return a.workspace.options.oneBasedIndex ? [b + \" + 1\", Order$$module$build$src$generators$javascript$javascript_generator.ADDITION] : [b, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_charAt$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = a.getFieldValue(\"WHERE\") || \"FROM_START\",\n        d = b.valueToCode(a, \"VALUE\", \"RANDOM\" === c ? Order$$module$build$src$generators$javascript$javascript_generator.NONE : Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\";\n      switch (c) {\n        case \"FIRST\":\n          return [d + \".charAt(0)\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"LAST\":\n          return [d + \".slice(-1)\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"FROM_START\":\n          return a = b.getAdjusted(a, \"AT\"), [d + \".charAt(\" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"FROM_END\":\n          return a = b.getAdjusted(a, \"AT\", 1, !0), [d + \".slice(\" + a + \").charAt(0)\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n        case \"RANDOM\":\n          return [b.provideFunction_(\"textRandomLetter\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`) + \"(\" + d + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n      }\n      throw Error(\"Unhandled option (text_charAt).\");\n    },\n    text_getSubstring$$module$build$src$generators$javascript$text = function (a, b) {\n      var c = {\n        FIRST: \"First\",\n        LAST: \"Last\",\n        FROM_START: \"FromStart\",\n        FROM_END: \"FromEnd\"\n      };\n      const d = a.getFieldValue(\"WHERE1\"),\n        e = a.getFieldValue(\"WHERE2\");\n      var f = \"FROM_END\" !== d && \"LAST\" !== d && \"FROM_END\" !== e && \"LAST\" !== e,\n        g = b.valueToCode(a, \"STRING\", f ? Order$$module$build$src$generators$javascript$javascript_generator.MEMBER : Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      if (\"FIRST\" === d && \"LAST\" === e) return [g, Order$$module$build$src$generators$javascript$javascript_generator.NONE];\n      if (g.match(/^'?\\w+'?$/) || f) {\n        switch (d) {\n          case \"FROM_START\":\n            c = b.getAdjusted(a, \"AT1\");\n            break;\n          case \"FROM_END\":\n            c = b.getAdjusted(a, \"AT1\", 1, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            c = g + \".length - \" + c;\n            break;\n          case \"FIRST\":\n            c = \"0\";\n            break;\n          default:\n            throw Error(\"Unhandled option (text_getSubstring).\");\n        }\n        switch (e) {\n          case \"FROM_START\":\n            b = b.getAdjusted(a, \"AT2\", 1);\n            break;\n          case \"FROM_END\":\n            b = b.getAdjusted(a, \"AT2\", 0, !1, Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION);\n            b = g + \".length - \" + b;\n            break;\n          case \"LAST\":\n            b = g + \".length\";\n            break;\n          default:\n            throw Error(\"Unhandled option (text_getSubstring).\");\n        }\n        g = g + \".slice(\" + c + \", \" + b + \")\";\n      } else f = b.getAdjusted(a, \"AT1\"), a = b.getAdjusted(a, \"AT2\"), g = b.provideFunction_(\"subsequence\" + c[d] + c[e], `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(sequence${\"FROM_END\" === d || \"FROM_START\" === d ? \", at1\" : \"\"}${\"FROM_END\" === e || \"FROM_START\" === e ? \", at2\" : \"\"}) {\n  var start = ${getSubstringIndex$$module$build$src$generators$javascript$text(\"sequence\", d, \"at1\")};\n  var end = ${getSubstringIndex$$module$build$src$generators$javascript$text(\"sequence\", e, \"at2\")} + 1;\n  return sequence.slice(start, end);\n}\n`) + \"(\" + g + (\"FROM_END\" === d || \"FROM_START\" === d ? \", \" + f : \"\") + (\"FROM_END\" === e || \"FROM_START\" === e ? \", \" + a : \"\") + \")\";\n      return [g, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_changeCase$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = {\n        UPPERCASE: \".toUpperCase()\",\n        LOWERCASE: \".toLowerCase()\",\n        TITLECASE: null\n      }[a.getFieldValue(\"CASE\")];\n      a = b.valueToCode(a, \"TEXT\", c ? Order$$module$build$src$generators$javascript$javascript_generator.MEMBER : Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return [c ? a + c : b.provideFunction_(\"textToTitleCase\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`) + \"(\" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_trim$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = {\n        LEFT: \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n        RIGHT: \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n        BOTH: \".trim()\"\n      }[a.getFieldValue(\"MODE\")];\n      return [(b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + c, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_print$$module$build$src$generators$javascript$text = function (a, b) {\n      return \"window.alert(\" + (b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\") + \");\\n\";\n    },\n    text_prompt_ext$$module$build$src$generators$javascript$text = function (a, b) {\n      b = \"window.prompt(\" + (a.getField(\"TEXT\") ? b.quote_(a.getFieldValue(\"TEXT\")) : b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\") + \")\";\n      \"NUMBER\" === a.getFieldValue(\"TYPE\") && (b = \"Number(\" + b + \")\");\n      return [b, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_count$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      a = b.valueToCode(a, \"SUB\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return [b.provideFunction_(\"textCount\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`) + \"(\" + c + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_replace$$module$build$src$generators$javascript$text = function (a, b) {\n      const c = b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\",\n        d = b.valueToCode(a, \"FROM\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      a = b.valueToCode(a, \"TO\", Order$$module$build$src$generators$javascript$javascript_generator.NONE) || \"''\";\n      return [b.provideFunction_(\"textReplace\", `\nfunction ${b.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`) + \"(\" + c + \", \" + d + \", \" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    text_reverse$$module$build$src$generators$javascript$text = function (a, b) {\n      return [(b.valueToCode(a, \"TEXT\", Order$$module$build$src$generators$javascript$javascript_generator.MEMBER) || \"''\") + \".split('').reverse().join('')\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    variables_get$$module$build$src$generators$javascript$variables = function (a, b) {\n      return [b.getVariableName(a.getFieldValue(\"VAR\")), Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC];\n    },\n    variables_set$$module$build$src$generators$javascript$variables = function (a, b) {\n      const c = b.valueToCode(a, \"VALUE\", Order$$module$build$src$generators$javascript$javascript_generator.ASSIGNMENT) || \"0\";\n      return b.getVariableName(a.getFieldValue(\"VAR\")) + \" = \" + c + \";\\n\";\n    },\n    Order$$module$build$src$generators$javascript$javascript_generator;\n  (function (a) {\n    a[a.ATOMIC = 0] = \"ATOMIC\";\n    a[a.NEW = 1.1] = \"NEW\";\n    a[a.MEMBER = 1.2] = \"MEMBER\";\n    a[a.FUNCTION_CALL = 2] = \"FUNCTION_CALL\";\n    a[a.INCREMENT = 3] = \"INCREMENT\";\n    a[a.DECREMENT = 3] = \"DECREMENT\";\n    a[a.BITWISE_NOT = 4.1] = \"BITWISE_NOT\";\n    a[a.UNARY_PLUS = 4.2] = \"UNARY_PLUS\";\n    a[a.UNARY_NEGATION = 4.3] = \"UNARY_NEGATION\";\n    a[a.LOGICAL_NOT = 4.4] = \"LOGICAL_NOT\";\n    a[a.TYPEOF = 4.5] = \"TYPEOF\";\n    a[a.VOID = 4.6] = \"VOID\";\n    a[a.DELETE = 4.7] = \"DELETE\";\n    a[a.AWAIT = 4.8] = \"AWAIT\";\n    a[a.EXPONENTIATION = 5] = \"EXPONENTIATION\";\n    a[a.MULTIPLICATION = 5.1] = \"MULTIPLICATION\";\n    a[a.DIVISION = 5.2] = \"DIVISION\";\n    a[a.MODULUS = 5.3] = \"MODULUS\";\n    a[a.SUBTRACTION = 6.1] = \"SUBTRACTION\";\n    a[a.ADDITION = 6.2] = \"ADDITION\";\n    a[a.BITWISE_SHIFT = 7] = \"BITWISE_SHIFT\";\n    a[a.RELATIONAL = 8] = \"RELATIONAL\";\n    a[a.IN = 8] = \"IN\";\n    a[a.INSTANCEOF = 8] = \"INSTANCEOF\";\n    a[a.EQUALITY = 9] = \"EQUALITY\";\n    a[a.BITWISE_AND = 10] = \"BITWISE_AND\";\n    a[a.BITWISE_XOR = 11] = \"BITWISE_XOR\";\n    a[a.BITWISE_OR = 12] = \"BITWISE_OR\";\n    a[a.LOGICAL_AND = 13] = \"LOGICAL_AND\";\n    a[a.LOGICAL_OR = 14] = \"LOGICAL_OR\";\n    a[a.CONDITIONAL = 15] = \"CONDITIONAL\";\n    a[a.ASSIGNMENT = 16] = \"ASSIGNMENT\";\n    a[a.YIELD = 17] = \"YIELD\";\n    a[a.COMMA = 18] = \"COMMA\";\n    a[a.NONE = 99] = \"NONE\";\n  })(Order$$module$build$src$generators$javascript$javascript_generator || (Order$$module$build$src$generators$javascript$javascript_generator = {}));\n  var JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator = class extends $.CodeGenerator$$module$build$src$core$generator {\n      constructor() {\n        let a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"JavaScript\";\n        super(a);\n        this.ORDER_OVERRIDES = [[Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL, Order$$module$build$src$generators$javascript$javascript_generator.MEMBER], [Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL], [Order$$module$build$src$generators$javascript$javascript_generator.MEMBER, Order$$module$build$src$generators$javascript$javascript_generator.MEMBER], [Order$$module$build$src$generators$javascript$javascript_generator.MEMBER, Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL], [Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT, Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_NOT], [Order$$module$build$src$generators$javascript$javascript_generator.MULTIPLICATION, Order$$module$build$src$generators$javascript$javascript_generator.MULTIPLICATION], [Order$$module$build$src$generators$javascript$javascript_generator.ADDITION, Order$$module$build$src$generators$javascript$javascript_generator.ADDITION], [Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_AND, Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_AND], [Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_OR, Order$$module$build$src$generators$javascript$javascript_generator.LOGICAL_OR]];\n        this.isInitialized = !1;\n        for (const b in Order$$module$build$src$generators$javascript$javascript_generator) a = Order$$module$build$src$generators$javascript$javascript_generator[b], \"string\" !== typeof a && (this[\"ORDER_\" + b] = a);\n        this.addReservedWords(\"break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,new,return,super,switch,this,throw,try,typeof,var,void,while,with,yield,enum,implements,interface,let,package,private,protected,public,static,await,null,true,false,arguments,\" + Object.getOwnPropertyNames(globalThis).join(\",\"));\n      }\n      init(a) {\n        super.init(a);\n        this.nameDB_ ? this.nameDB_.reset() : this.nameDB_ = new $.Names$$module$build$src$core$names(this.RESERVED_WORDS_);\n        this.nameDB_.setVariableMap(a.getVariableMap());\n        this.nameDB_.populateVariables(a);\n        this.nameDB_.populateProcedures(a);\n        const b = [];\n        var c = $.allDeveloperVariables$$module$build$src$core$variables(a);\n        for (let d = 0; d < c.length; d++) b.push(this.nameDB_.getName(c[d], $.NameType$$module$build$src$core$names.DEVELOPER_VARIABLE));\n        a = $.allUsedVarModels$$module$build$src$core$variables(a);\n        for (c = 0; c < a.length; c++) b.push(this.nameDB_.getName(a[c].getId(), $.NameType$$module$build$src$core$names.VARIABLE));\n        b.length && (this.definitions_.variables = \"var \" + b.join(\", \") + \";\");\n        this.isInitialized = !0;\n      }\n      finish(a) {\n        const b = Object.values(this.definitions_);\n        super.finish(a);\n        this.isInitialized = !1;\n        this.nameDB_.reset();\n        return b.join(\"\\n\\n\") + \"\\n\\n\\n\" + a;\n      }\n      scrubNakedValue(a) {\n        return a + \";\\n\";\n      }\n      quote_(a) {\n        a = a.replace(/\\\\/g, \"\\\\\\\\\").replace(/\\n/g, \"\\\\\\n\").replace(/'/g, \"\\\\'\");\n        return \"'\" + a + \"'\";\n      }\n      multiline_quote_(a) {\n        return a.split(/\\n/g).map(this.quote_).join(\" + '\\\\n' +\\n\");\n      }\n      scrub_(a, b) {\n        let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n        let d = \"\";\n        if (!a.outputConnection || !a.outputConnection.targetConnection) {\n          var e = a.getCommentText();\n          e && (e = $.wrap$$module$build$src$core$utils$string(e, this.COMMENT_WRAP - 3), d += this.prefixLines(e + \"\\n\", \"// \"));\n          for (let f = 0; f < a.inputList.length; f++) a.inputList[f].type === $.inputTypes$$module$build$src$core$inputs$input_types.VALUE && (e = a.inputList[f].connection.targetBlock()) && (e = this.allNestedComments(e)) && (d += this.prefixLines(e, \"// \"));\n        }\n        a = a.nextConnection && a.nextConnection.targetBlock();\n        c = c ? \"\" : this.blockToCode(a);\n        return d + b + c;\n      }\n      getAdjusted(a, b) {\n        let c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        let d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n        let e = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Order$$module$build$src$generators$javascript$javascript_generator.NONE;\n        a.workspace.options.oneBasedIndex && c--;\n        const f = a.workspace.options.oneBasedIndex ? \"1\" : \"0\";\n        let g = e;\n        0 < c ? g = Order$$module$build$src$generators$javascript$javascript_generator.ADDITION : 0 > c ? g = Order$$module$build$src$generators$javascript$javascript_generator.SUBTRACTION : d && (g = Order$$module$build$src$generators$javascript$javascript_generator.UNARY_NEGATION);\n        a = this.valueToCode(a, b, g) || f;\n        if (0 === c && !d) return a;\n        if ($.isNumber$$module$build$src$core$utils$string(a)) return a = String(Number(a) + c), d && (a = String(-Number(a))), a;\n        0 < c ? a = `${a} + ${c}` : 0 > c && (a = `${a} - ${-c}`);\n        d && (a = c ? `-(${a})` : `-${a}`);\n        Math.floor(e) >= Math.floor(g) && (a = `(${a})`);\n        return a;\n      }\n    },\n    module$build$src$generators$javascript$javascript_generator = {};\n  module$build$src$generators$javascript$javascript_generator.JavascriptGenerator = JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator;\n  module$build$src$generators$javascript$javascript_generator.Order = Order$$module$build$src$generators$javascript$javascript_generator;\n  var module$build$src$generators$javascript$colour = {};\n  module$build$src$generators$javascript$colour.colour_blend = colour_blend$$module$build$src$generators$javascript$colour;\n  module$build$src$generators$javascript$colour.colour_picker = colour_picker$$module$build$src$generators$javascript$colour;\n  module$build$src$generators$javascript$colour.colour_random = colour_random$$module$build$src$generators$javascript$colour;\n  module$build$src$generators$javascript$colour.colour_rgb = colour_rgb$$module$build$src$generators$javascript$colour;\n  var getSubstringIndex$$module$build$src$generators$javascript$lists = function (a, b, c) {\n      return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n    },\n    module$build$src$generators$javascript$lists = {};\n  module$build$src$generators$javascript$lists.lists_create_empty = lists_create_empty$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_create_with = lists_create_with$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_getIndex = lists_getIndex$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_getSublist = lists_getSublist$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_indexOf = lists_indexOf$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_isEmpty = lists_isEmpty$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_length = lists_length$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_repeat = lists_repeat$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_reverse = lists_reverse$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_setIndex = lists_setIndex$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_sort = lists_sort$$module$build$src$generators$javascript$lists;\n  module$build$src$generators$javascript$lists.lists_split = lists_split$$module$build$src$generators$javascript$lists;\n  var controls_ifelse$$module$build$src$generators$javascript$logic = controls_if$$module$build$src$generators$javascript$logic,\n    module$build$src$generators$javascript$logic = {};\n  module$build$src$generators$javascript$logic.controls_if = controls_if$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.controls_ifelse = controls_if$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_boolean = logic_boolean$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_compare = logic_compare$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_negate = logic_negate$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_null = logic_null$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_operation = logic_operation$$module$build$src$generators$javascript$logic;\n  module$build$src$generators$javascript$logic.logic_ternary = logic_ternary$$module$build$src$generators$javascript$logic;\n  var controls_repeat$$module$build$src$generators$javascript$loops = controls_repeat_ext$$module$build$src$generators$javascript$loops,\n    module$build$src$generators$javascript$loops = {};\n  module$build$src$generators$javascript$loops.controls_flow_statements = controls_flow_statements$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_for = controls_for$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_forEach = controls_forEach$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_repeat = controls_repeat_ext$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_repeat_ext = controls_repeat_ext$$module$build$src$generators$javascript$loops;\n  module$build$src$generators$javascript$loops.controls_whileUntil = controls_whileUntil$$module$build$src$generators$javascript$loops;\n  var math_round$$module$build$src$generators$javascript$math = math_single$$module$build$src$generators$javascript$math,\n    math_trig$$module$build$src$generators$javascript$math = math_single$$module$build$src$generators$javascript$math,\n    module$build$src$generators$javascript$math = {};\n  module$build$src$generators$javascript$math.math_arithmetic = math_arithmetic$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_atan2 = math_atan2$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_change = math_change$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_constant = math_constant$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_constrain = math_constrain$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_modulo = math_modulo$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_number = math_number$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_number_property = math_number_property$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_on_list = math_on_list$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_random_float = math_random_float$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_random_int = math_random_int$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_round = math_single$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_single = math_single$$module$build$src$generators$javascript$math;\n  module$build$src$generators$javascript$math.math_trig = math_single$$module$build$src$generators$javascript$math;\n  var procedures_defnoreturn$$module$build$src$generators$javascript$procedures = procedures_defreturn$$module$build$src$generators$javascript$procedures,\n    module$build$src$generators$javascript$procedures = {};\n  module$build$src$generators$javascript$procedures.procedures_callnoreturn = procedures_callnoreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_callreturn = procedures_callreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_defnoreturn = procedures_defreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_defreturn = procedures_defreturn$$module$build$src$generators$javascript$procedures;\n  module$build$src$generators$javascript$procedures.procedures_ifreturn = procedures_ifreturn$$module$build$src$generators$javascript$procedures;\n  var strRegExp$$module$build$src$generators$javascript$text = /^\\s*'([^']|\\\\')*'\\s*$/,\n    forceString$$module$build$src$generators$javascript$text = function (a) {\n      return strRegExp$$module$build$src$generators$javascript$text.test(a) ? [a, Order$$module$build$src$generators$javascript$javascript_generator.ATOMIC] : [\"String(\" + a + \")\", Order$$module$build$src$generators$javascript$javascript_generator.FUNCTION_CALL];\n    },\n    getSubstringIndex$$module$build$src$generators$javascript$text = function (a, b, c) {\n      return \"FIRST\" === b ? \"0\" : \"FROM_END\" === b ? a + \".length - 1 - \" + c : \"LAST\" === b ? a + \".length - 1\" : c;\n    },\n    text_prompt$$module$build$src$generators$javascript$text = text_prompt_ext$$module$build$src$generators$javascript$text,\n    module$build$src$generators$javascript$text = {};\n  module$build$src$generators$javascript$text.text = text$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_append = text_append$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_changeCase = text_changeCase$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_charAt = text_charAt$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_count = text_count$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_getSubstring = text_getSubstring$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_indexOf = text_indexOf$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_isEmpty = text_isEmpty$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_join = text_join$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_length = text_length$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_multiline = text_multiline$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_print = text_print$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_prompt = text_prompt_ext$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_prompt_ext = text_prompt_ext$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_replace = text_replace$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_reverse = text_reverse$$module$build$src$generators$javascript$text;\n  module$build$src$generators$javascript$text.text_trim = text_trim$$module$build$src$generators$javascript$text;\n  var module$build$src$generators$javascript$variables = {};\n  module$build$src$generators$javascript$variables.variables_get = variables_get$$module$build$src$generators$javascript$variables;\n  module$build$src$generators$javascript$variables.variables_set = variables_set$$module$build$src$generators$javascript$variables;\n  var module$build$src$generators$javascript$variables_dynamic = {};\n  module$build$src$generators$javascript$variables_dynamic.variables_get_dynamic = variables_get$$module$build$src$generators$javascript$variables;\n  module$build$src$generators$javascript$variables_dynamic.variables_set_dynamic = variables_set$$module$build$src$generators$javascript$variables;\n  var javascriptGenerator$$module$build$src$generators$javascript = new JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator(),\n    generators$$module$build$src$generators$javascript = Object.assign({}, module$build$src$generators$javascript$colour, module$build$src$generators$javascript$lists, module$build$src$generators$javascript$logic, module$build$src$generators$javascript$loops, module$build$src$generators$javascript$math, module$build$src$generators$javascript$procedures, module$build$src$generators$javascript$text, module$build$src$generators$javascript$variables, module$build$src$generators$javascript$variables_dynamic);\n  for (const a in generators$$module$build$src$generators$javascript) javascriptGenerator$$module$build$src$generators$javascript.forBlock[a] = generators$$module$build$src$generators$javascript[a];\n  var module$build$src$generators$javascript = {};\n  module$build$src$generators$javascript.JavascriptGenerator = JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator;\n  module$build$src$generators$javascript.Order = Order$$module$build$src$generators$javascript$javascript_generator;\n  module$build$src$generators$javascript.javascriptGenerator = javascriptGenerator$$module$build$src$generators$javascript;\n  module$build$src$generators$javascript.__namespace__ = $;\n  return module$build$src$generators$javascript;\n});","map":{"version":3,"names":["colour_picker$$module$build$src$generators$javascript$colour","a","b","quote_","getFieldValue","Order$$module$build$src$generators$javascript$javascript_generator","ATOMIC","colour_random$$module$build$src$generators$javascript$colour","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","FUNCTION_CALL","colour_rgb$$module$build$src$generators$javascript$colour","c","valueToCode","NONE","d","colour_blend$$module$build$src$generators$javascript$colour","lists_create_empty$$module$build$src$generators$javascript$lists","lists_create_with$$module$build$src$generators$javascript$lists","Array","itemCount_","join","lists_repeat$$module$build$src$generators$javascript$lists","lists_length$$module$build$src$generators$javascript$lists","MEMBER","lists_isEmpty$$module$build$src$generators$javascript$lists","LOGICAL_NOT","lists_indexOf$$module$build$src$generators$javascript$lists","workspace","options","oneBasedIndex","ADDITION","lists_getIndex$$module$build$src$generators$javascript$lists","e","getAdjusted","Error","lists_setIndex$$module$build$src$generators$javascript$lists","match","h","nameDB_","getDistinctName","$","NameType$$module$build$src$core$names","VARIABLE","k","f","g","ASSIGNMENT","SUBTRACTION","lists_getSublist$$module$build$src$generators$javascript$lists","FIRST","LAST","FROM_START","FROM_END","getSubstringIndex$$module$build$src$generators$javascript$lists","lists_sort$$module$build$src$generators$javascript$lists","lists_split$$module$build$src$generators$javascript$lists","lists_reverse$$module$build$src$generators$javascript$lists","controls_if$$module$build$src$generators$javascript$logic","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare$$module$build$src$generators$javascript$logic","EQ","NEQ","LT","LTE","GT","GTE","EQUALITY","RELATIONAL","logic_operation$$module$build$src$generators$javascript$logic","LOGICAL_AND","LOGICAL_OR","logic_negate$$module$build$src$generators$javascript$logic","logic_boolean$$module$build$src$generators$javascript$logic","logic_null$$module$build$src$generators$javascript$logic","logic_ternary$$module$build$src$generators$javascript$logic","CONDITIONAL","controls_repeat_ext$$module$build$src$generators$javascript$loops","getField","String","Number","addLoopTrap","isNumber$$module$build$src$core$utils$string","controls_whileUntil$$module$build$src$generators$javascript$loops","controls_for$$module$build$src$generators$javascript$loops","getVariableName","Math","abs","controls_forEach$$module$build$src$generators$javascript$loops","controls_flow_statements$$module$build$src$generators$javascript$loops","getSurroundLoop","suppressPrefixSuffix","math_number$$module$build$src$generators$javascript$math","UNARY_NEGATION","math_arithmetic$$module$build$src$generators$javascript$math","ADD","MINUS","MULTIPLY","MULTIPLICATION","DIVIDE","DIVISION","POWER","math_single$$module$build$src$generators$javascript$math","math_constant$$module$build$src$generators$javascript$math","PI","E","GOLDEN_RATIO","SQRT2","SQRT1_2","INFINITY","math_number_property$$module$build$src$generators$javascript$math","EVEN","MODULUS","ODD","WHOLE","POSITIVE","NEGATIVE","DIVISIBLE_BY","PRIME","math_change$$module$build$src$generators$javascript$math","math_on_list$$module$build$src$generators$javascript$math","math_modulo$$module$build$src$generators$javascript$math","math_constrain$$module$build$src$generators$javascript$math","math_random_int$$module$build$src$generators$javascript$math","math_random_float$$module$build$src$generators$javascript$math","math_atan2$$module$build$src$generators$javascript$math","procedures_defreturn$$module$build$src$generators$javascript$procedures","getProcedureName","INFINITE_LOOP_TRAP","l","getVars","m","length","scrub_","definitions_","procedures_callreturn$$module$build$src$generators$javascript$procedures","procedures_callnoreturn$$module$build$src$generators$javascript$procedures","forBlock","procedures_callreturn","procedures_ifreturn$$module$build$src$generators$javascript$procedures","hasReturnValue_","text$$module$build$src$generators$javascript$text","text_multiline$$module$build$src$generators$javascript$text","multiline_quote_","indexOf","text_join$$module$build$src$generators$javascript$text","forceString$$module$build$src$generators$javascript$text","text_append$$module$build$src$generators$javascript$text","text_length$$module$build$src$generators$javascript$text","text_isEmpty$$module$build$src$generators$javascript$text","text_indexOf$$module$build$src$generators$javascript$text","text_charAt$$module$build$src$generators$javascript$text","text_getSubstring$$module$build$src$generators$javascript$text","getSubstringIndex$$module$build$src$generators$javascript$text","text_changeCase$$module$build$src$generators$javascript$text","UPPERCASE","LOWERCASE","TITLECASE","text_trim$$module$build$src$generators$javascript$text","LEFT","RIGHT","BOTH","text_print$$module$build$src$generators$javascript$text","text_prompt_ext$$module$build$src$generators$javascript$text","text_count$$module$build$src$generators$javascript$text","text_replace$$module$build$src$generators$javascript$text","text_reverse$$module$build$src$generators$javascript$text","variables_get$$module$build$src$generators$javascript$variables","variables_set$$module$build$src$generators$javascript$variables","NEW","INCREMENT","DECREMENT","BITWISE_NOT","UNARY_PLUS","TYPEOF","VOID","DELETE","AWAIT","EXPONENTIATION","BITWISE_SHIFT","IN","INSTANCEOF","BITWISE_AND","BITWISE_XOR","BITWISE_OR","YIELD","COMMA","JavascriptGenerator$$module$build$src$generators$javascript$javascript_generator","CodeGenerator$$module$build$src$core$generator","constructor","arguments","undefined","ORDER_OVERRIDES","isInitialized","addReservedWords","Object","getOwnPropertyNames","globalThis","init","reset","Names$$module$build$src$core$names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","allDeveloperVariables$$module$build$src$core$variables","push","getName","DEVELOPER_VARIABLE","allUsedVarModels$$module$build$src$core$variables","getId","variables","finish","values","scrubNakedValue","replace","split","map","outputConnection","targetConnection","getCommentText","wrap$$module$build$src$core$utils$string","COMMENT_WRAP","inputList","type","inputTypes$$module$build$src$core$inputs$input_types","VALUE","connection","targetBlock","allNestedComments","nextConnection","blockToCode","floor","module$build$src$generators$javascript$javascript_generator","JavascriptGenerator","Order","module$build$src$generators$javascript$colour","colour_blend","colour_picker","colour_random","colour_rgb","module$build$src$generators$javascript$lists","lists_create_empty","lists_create_with","lists_getIndex","lists_getSublist","lists_indexOf","lists_isEmpty","lists_length","lists_repeat","lists_reverse","lists_setIndex","lists_sort","lists_split","controls_ifelse$$module$build$src$generators$javascript$logic","module$build$src$generators$javascript$logic","controls_if","controls_ifelse","logic_boolean","logic_compare","logic_negate","logic_null","logic_operation","logic_ternary","controls_repeat$$module$build$src$generators$javascript$loops","module$build$src$generators$javascript$loops","controls_flow_statements","controls_for","controls_forEach","controls_repeat","controls_repeat_ext","controls_whileUntil","math_round$$module$build$src$generators$javascript$math","math_trig$$module$build$src$generators$javascript$math","module$build$src$generators$javascript$math","math_arithmetic","math_atan2","math_change","math_constant","math_constrain","math_modulo","math_number","math_number_property","math_on_list","math_random_float","math_random_int","math_round","math_single","math_trig","procedures_defnoreturn$$module$build$src$generators$javascript$procedures","module$build$src$generators$javascript$procedures","procedures_callnoreturn","procedures_defnoreturn","procedures_defreturn","procedures_ifreturn","strRegExp$$module$build$src$generators$javascript$text","test","text_prompt$$module$build$src$generators$javascript$text","module$build$src$generators$javascript$text","text","text_append","text_changeCase","text_charAt","text_count","text_getSubstring","text_indexOf","text_isEmpty","text_join","text_length","text_multiline","text_print","text_prompt","text_prompt_ext","text_replace","text_reverse","text_trim","module$build$src$generators$javascript$variables","variables_get","variables_set","module$build$src$generators$javascript$variables_dynamic","variables_get_dynamic","variables_set_dynamic","javascriptGenerator$$module$build$src$generators$javascript","generators$$module$build$src$generators$javascript","assign","module$build$src$generators$javascript","javascriptGenerator"],"sources":["C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\colour.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\lists.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\logic.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\loops.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\math.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\procedures.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\text.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\variables.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\javascript_generator.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript\\variables_dynamic.ts","C:\\Users\\ADMIN\\OneDrive\\Documents\\university\\grad\\project\\pi_app\\frontend\\node_modules\\blockly\\generators\\javascript.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for colour blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.colour\n\nimport type {Block} from '../../core/block.js';\nimport type {JavascriptGenerator} from './javascript_generator.js';\nimport {Order} from './javascript_generator.js';\n\nexport function colour_picker(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n}\n\nexport function colour_random(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Generate a random colour.\n  const functionName = generator.provideFunction_(\n    'colourRandom',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`,\n  );\n  const code = functionName + '()';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function colour_rgb(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const green = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const functionName = generator.provideFunction_(\n    'colourRgb',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`,\n  );\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function colour_blend(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Blend two colours together.\n  const c1 = generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\n  const c2 = generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\n  const functionName = generator.provideFunction_(\n    'colourBlend',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`,\n  );\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for list blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.lists\n\nimport type {Block} from '../../core/block.js';\nimport type {CreateWithBlock} from '../../blocks/lists.js';\nimport type {JavascriptGenerator} from './javascript_generator.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './javascript_generator.js';\n\nexport function lists_create_empty(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n}\n\nexport function lists_create_with(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Create a list with any number of elements of any type.\n  const createWithBlock = block as CreateWithBlock;\n  const elements = new Array(createWithBlock.itemCount_);\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n}\n\nexport function lists_repeat(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_(\n    'listsRepeat',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`,\n  );\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_length(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // String or array length.\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return [list + '.length', Order.MEMBER];\n}\n\nexport function lists_isEmpty(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return ['!' + list + '.length', Order.LOGICAL_NOT];\n}\n\nexport function lists_indexOf(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Find an item in the list.\n  const operator =\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_getIndex(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] | string {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.shift()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.shift();\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'GET') {\n        const code = list + '.slice(-1)[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop();\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '.slice(' + at + ')[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);';\n      }\n      break;\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_(\n        'listsGetRandomItem',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`,\n      );\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\n        return [code, Order.FUNCTION_CALL];\n      } else if (mode === 'REMOVE') {\n        return code + ';\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n}\n\nexport function lists_setIndex(block: Block, generator: JavascriptGenerator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar = generator.nameDB_!.getDistinctName(\n      'tmpList',\n      NameType.VARIABLE,\n    )!;\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.unshift(' + value + ');\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.push(' + value + ');\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(\n        block,\n        'AT',\n        1,\n        false,\n        Order.SUBTRACTION,\n      );\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code +=\n          list +\n          '.splice(' +\n          list +\n          '.length - ' +\n          at +\n          ', 0, ' +\n          value +\n          ');\\n';\n        return code;\n      }\n      break;\n    }\n    case 'RANDOM': {\n      let code = cacheList();\n      const xVar = generator.nameDB_!.getDistinctName(\n        'tmpX',\n        NameType.VARIABLE,\n      );\n      code +=\n        'var ' + xVar + ' = Math.floor(Math.random() * ' + list + '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n}\n\n/**\n * Returns an expression calculating the index into a list.\n * @param listName Name of the list, used to calculate length.\n * @param where The method of indexing, selected by dropdown in Blockly\n * @param opt_at The optional offset when indexing from start/end.\n * @returns Index expression.\n */\nconst getSubstringIndex = function (\n  listName: string,\n  where: string,\n  opt_at?: string,\n): string | undefined {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return listName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return listName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function lists_getSublist(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Get sublist.\n  // Dictionary of WHEREn field choices and their CamelCase equivalents.\n  const wherePascalCase = {\n    'FIRST': 'First',\n    'LAST': 'Last',\n    'FROM_START': 'FromStart',\n    'FROM_END': 'FromEnd',\n  };\n  type WhereOption = keyof typeof wherePascalCase;\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1') as WhereOption;\n  const where2 = block.getFieldValue('WHERE2') as WhereOption;\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list + '.slice(0)';\n  } else if (\n    list.match(/^\\w+$/) ||\n    (where1 !== 'FROM_END' && where2 === 'FROM_START')\n  ) {\n    // If the list is a variable or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = list + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n      where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\n    const at2Param =\n      where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n      'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\n      `\nfunction ${\n        generator.FUNCTION_NAME_PLACEHOLDER_\n      }(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`,\n    );\n    code =\n      functionName +\n      '(' +\n      list +\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n      // pass it.\n      (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\n      (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\n      ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_sort(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Block for sorting a list.\n  const list =\n    generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const getCompareFunctionName = generator.provideFunction_(\n    'listsGetSortCompare',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `,\n  );\n  return [\n    list +\n      '.slice().sort(' +\n      getCompareFunctionName +\n      '(\"' +\n      type +\n      '\", ' +\n      direction +\n      '))',\n    Order.FUNCTION_CALL,\n  ];\n}\n\nexport function lists_split(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.MEMBER);\n  const delimiter = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function lists_reverse(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Block for reversing a list.\n  const list =\n    generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || '[]';\n  const code = list + '.slice().reverse()';\n  return [code, Order.FUNCTION_CALL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for logic blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.logic\n\nimport type {Block} from '../../core/block.js';\nimport type {JavascriptGenerator} from './javascript_generator.js';\nimport {Order} from './javascript_generator.js';\n\nexport function controls_if(block: Block, generator: JavascriptGenerator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\n    let branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code +=\n      (n > 0 ? ' else ' : '') +\n      'if (' +\n      conditionCode +\n      ') {\\n' +\n      branchCode +\n      '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    let branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n}\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Comparison operator.\n  const OPERATORS = {\n    'EQ': '==',\n    'NEQ': '!=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>=',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const order =\n    operator === '==' || operator === '!=' ? Order.EQUALITY : Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n}\n\nexport function logic_operation(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Operations 'and', 'or'.\n  const operator = block.getFieldValue('OP') === 'AND' ? '&&' : '||';\n  const order = operator === '&&' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = operator === '&&' ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n}\n\nexport function logic_negate(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Negation.\n  const order = Order.LOGICAL_NOT;\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n}\n\nexport function logic_boolean(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Boolean values true and false.\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n}\n\nexport function logic_null(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Null data type.\n  return ['null', Order.ATOMIC];\n}\n\nexport function logic_ternary(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Ternary operator.\n  const value_if =\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\n  const value_then =\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\n  const value_else =\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Order.CONDITIONAL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for loop blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.loops\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {Block} from '../../core/block.js';\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\nimport type {JavascriptGenerator} from './javascript_generator.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './javascript_generator.js';\n\nexport function controls_repeat_ext(\n  block: Block,\n  generator: JavascriptGenerator,\n) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar = generator.nameDB_!.getDistinctName(\n    'count',\n    NameType.VARIABLE,\n  );\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar = generator.nameDB_!.getDistinctName(\n      'repeat_end',\n      NameType.VARIABLE,\n    );\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code +=\n    'for (var ' +\n    loopVar +\n    ' = 0; ' +\n    loopVar +\n    ' < ' +\n    endVar +\n    '; ' +\n    loopVar +\n    '++) {\\n' +\n    branch +\n    '}\\n';\n  return code;\n}\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(\n  block: Block,\n  generator: JavascriptGenerator,\n) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n    generator.valueToCode(\n      block,\n      'BOOL',\n      until ? Order.LOGICAL_NOT : Order.NONE,\n    ) || 'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n}\n\nexport function controls_for(block: Block, generator: JavascriptGenerator) {\n  // For loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n    generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\n  const increment = generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code;\n  if (\n    stringUtils.isNumber(argument0) &&\n    stringUtils.isNumber(argument1) &&\n    stringUtils.isNumber(increment)\n  ) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code =\n      'for (' +\n      variable0 +\n      ' = ' +\n      argument0 +\n      '; ' +\n      variable0 +\n      (up ? ' <= ' : ' >= ') +\n      argument1 +\n      '; ' +\n      variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar = generator.nameDB_!.getDistinctName(\n        variable0 + '_start',\n        NameType.VARIABLE,\n      );\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar = generator.nameDB_!.getDistinctName(\n        variable0 + '_end',\n        NameType.VARIABLE,\n      );\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar = generator.nameDB_!.getDistinctName(\n      variable0 + '_inc',\n      NameType.VARIABLE,\n    );\n    code += 'var ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(Number(increment)) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code +=\n      'for (' +\n      variable0 +\n      ' = ' +\n      startVar +\n      '; ' +\n      incVar +\n      ' >= 0 ? ' +\n      variable0 +\n      ' <= ' +\n      endVar +\n      ' : ' +\n      variable0 +\n      ' >= ' +\n      endVar +\n      '; ' +\n      variable0 +\n      ' += ' +\n      incVar +\n      ') {\\n' +\n      branch +\n      '}\\n';\n  }\n  return code;\n}\n\nexport function controls_forEach(block: Block, generator: JavascriptGenerator) {\n  // For each loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n    generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  let listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = generator.nameDB_!.getDistinctName(\n      variable0 + '_list',\n      NameType.VARIABLE,\n    );\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  const indexVar = generator.nameDB_!.getDistinctName(\n    variable0 + '_index',\n    NameType.VARIABLE,\n  );\n  branch =\n    generator.INDENT +\n    variable0 +\n    ' = ' +\n    listVar +\n    '[' +\n    indexVar +\n    '];\\n' +\n    branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n}\n\nexport function controls_flow_statements(\n  block: Block,\n  generator: JavascriptGenerator,\n) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for math blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.math\n\nimport type {Block} from '../../core/block.js';\nimport type {JavascriptGenerator} from './javascript_generator.js';\nimport {Order} from './javascript_generator.js';\n\nexport function math_number(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Numeric value.\n  const number = Number(block.getFieldValue('NUM'));\n  const order = number >= 0 ? Order.ATOMIC : Order.UNARY_NEGATION;\n  return [String(number), order];\n}\n\nexport function math_arithmetic(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Basic arithmetic operators, and power.\n  const OPERATORS: Record<string, [string | null, Order]> = {\n    'ADD': [' + ', Order.ADDITION],\n    'MINUS': [' - ', Order.SUBTRACTION],\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\n    'DIVIDE': [' / ', Order.DIVISION],\n    'POWER': [null, Order.NONE], // Handle power separately.\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in JavaScript requires a special case since it has no operator.\n  if (!operator) {\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Order.FUNCTION_CALL];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n}\n\nexport function math_single(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_NEGATION) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Order.UNARY_NEGATION];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM', Order.DIVISION) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, Order.FUNCTION_CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.DIVISION];\n}\n\nexport function math_constant(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS: Record<string, [string, Order]> = {\n    'PI': ['Math.PI', Order.MEMBER],\n    'E': ['Math.E', Order.MEMBER],\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.DIVISION],\n    'SQRT2': ['Math.SQRT2', Order.MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', Order.MEMBER],\n    'INFINITY': ['Infinity', Order.ATOMIC],\n  };\n  type ConstantOption = keyof typeof CONSTANTS;\n  return CONSTANTS[block.getFieldValue('CONSTANT') as ConstantOption];\n}\n\nexport function math_number_property(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\n    'EVEN': [' % 2 === 0', Order.MODULUS, Order.EQUALITY],\n    'ODD': [' % 2 === 1', Order.MODULUS, Order.EQUALITY],\n    'WHOLE': [' % 1 === 0', Order.MODULUS, Order.EQUALITY],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MODULUS, Order.EQUALITY],\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\n  };\n  type PropertyOption = keyof typeof PROPERTIES;\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck =\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_(\n      'mathIsPrime',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`,\n    );\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor =\n      generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\n    code = numberToCheck + ' % ' + divisor + ' === 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n}\n\nexport function math_change(block: Block, generator: JavascriptGenerator) {\n  // Add to a variable in place.\n  const argument0 =\n    generator.valueToCode(block, 'DELTA', Order.ADDITION) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return (\n    varName +\n    ' = (typeof ' +\n    varName +\n    \" === 'number' ? \" +\n    varName +\n    ' : 0) + ' +\n    argument0 +\n    ';\\n'\n  );\n}\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;}, 0)';\n      break;\n    case 'MIN':\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE': {\n      // mathMean([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_(\n        'mathMean',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      // mathMedian([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_(\n        'mathMedian',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = generator.provideFunction_(\n        'mathModes',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName = generator.provideFunction_(\n        'mathStandardDeviation',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_(\n        'mathRandomList',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function math_modulo(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Remainder computation.\n  const argument0 =\n    generator.valueToCode(block, 'DIVIDEND', Order.MODULUS) || '0';\n  const argument1 =\n    generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MODULUS];\n}\n\nexport function math_constrain(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'Infinity';\n  const code =\n    'Math.min(Math.max(' +\n    argument0 +\n    ', ' +\n    argument1 +\n    '), ' +\n    argument2 +\n    ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function math_random_int(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const functionName = generator.provideFunction_(\n    'mathRandomInt',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`,\n  );\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function math_random_float(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', Order.FUNCTION_CALL];\n}\n\nexport function math_atan2(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n    Order.DIVISION,\n  ];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.procedures\n\nimport type {Block} from '../../core/block.js';\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\nimport type {JavascriptGenerator} from './javascript_generator.js';\nimport {Order} from './javascript_generator.js';\n\nexport function procedures_defreturn(\n  block: Block,\n  generator: JavascriptGenerator,\n) {\n  // Define a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n      generator.INDENT,\n    );\n  }\n  const branch = generator.statementToCode(block, 'STACK');\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.getVariableName(variables[i]);\n  }\n  let code =\n    'function ' +\n    funcName +\n    '(' +\n    args.join(', ') +\n    ') {\\n' +\n    xfix1 +\n    loopTrap +\n    branch +\n    xfix2 +\n    returnValue +\n    '}';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\n  return null;\n}\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Call a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function procedures_callnoreturn(\n  block: Block,\n  generator: JavascriptGenerator,\n) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](\n    block,\n    generator,\n  ) as [string, Order];\n  return tuple[0] + ';\\n';\n}\n\nexport function procedures_ifreturn(\n  block: Block,\n  generator: JavascriptGenerator,\n) {\n  // Conditionally return value from a procedure.\n  const condition =\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\n      generator.INDENT,\n    );\n  }\n  if ((block as IfReturnBlock).hasReturnValue_) {\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\n    code += generator.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += generator.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for text blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.texts\n\nimport type {Block} from '../../core/block.js';\nimport type {JavascriptGenerator} from './javascript_generator.js';\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\nimport {Order} from './javascript_generator.js';\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'String(...)' function.\n * Leave string literals alone.\n * @param value Code evaluating to a value.\n * @returns Array containing code evaluating to a string\n *     and the order of the returned code.[string, number]\n */\nconst forceString = function (value: string): [string, Order] {\n  if (strRegExp.test(value)) {\n    return [value, Order.ATOMIC];\n  }\n  return ['String(' + value + ')', Order.FUNCTION_CALL];\n};\n\n/**\n * Returns an expression calculating the index into a string.\n * @param stringName Name of the string, used to calculate length.\n * @param where The method of indexing, selected by dropdown in Blockly\n * @param opt_at The optional offset when indexing from start/end.\n * @returns Index expression.\n */\nconst getSubstringIndex = function (\n  stringName: string,\n  where: string,\n  opt_at?: string,\n): string | undefined {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return stringName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return stringName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function text(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n}\n\nexport function text_multiline(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order = code.indexOf('+') !== -1 ? Order.ADDITION : Order.ATOMIC;\n  return [code, order];\n}\n\nexport function text_join(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Create a string made up of any number of elements of any type.\n  const joinBlock = block as JoinMutatorBlock;\n  switch (joinBlock.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element =\n        generator.valueToCode(joinBlock, 'ADD0', Order.NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 =\n        generator.valueToCode(joinBlock, 'ADD0', Order.NONE) || \"''\";\n      const element1 =\n        generator.valueToCode(joinBlock, 'ADD1', Order.NONE) || \"''\";\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\n      return [code, Order.ADDITION];\n    }\n    default: {\n      const elements = new Array(joinBlock.itemCount_);\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\n        elements[i] =\n          generator.valueToCode(joinBlock, 'ADD' + i, Order.NONE) || \"''\";\n      }\n      const code = '[' + elements.join(',') + \"].join('')\";\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n}\n\nexport function text_append(block: Block, generator: JavascriptGenerator) {\n  // Append to a variable in place.\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = varName + ' += ' + forceString(value)[0] + ';\\n';\n  return code;\n}\n\nexport function text_length(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // String or array length.\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  return [text + '.length', Order.MEMBER];\n}\n\nexport function text_isEmpty(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  return ['!' + text + '.length', Order.LOGICAL_NOT];\n}\n\nexport function text_indexOf(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Search the text for a substring.\n  const operator =\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  // Adjust index if using one-based indices.\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_charAt(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '.charAt(0)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'LAST': {\n      const code = text + '.slice(-1)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      const code = text + '.charAt(' + at + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      const code = text + '.slice(' + at + ').charAt(0)';\n      return [code, Order.FUNCTION_CALL];\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_(\n        'textRandomLetter',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`,\n      );\n      const code = functionName + '(' + text + ')';\n      return [code, Order.FUNCTION_CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n}\n\nexport function text_getSubstring(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Dictionary of WHEREn field choices and their CamelCase equivalents. */\n  const wherePascalCase = {\n    'FIRST': 'First',\n    'LAST': 'Last',\n    'FROM_START': 'FromStart',\n    'FROM_END': 'FromEnd',\n  };\n  type WhereOption = keyof typeof wherePascalCase;\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1') as WhereOption;\n  const where2 = block.getFieldValue('WHERE2') as WhereOption;\n  const requiresLengthCall =\n    where1 !== 'FROM_END' &&\n    where1 !== 'LAST' &&\n    where2 !== 'FROM_END' &&\n    where2 !== 'LAST';\n  const textOrder = requiresLengthCall ? Order.MEMBER : Order.NONE;\n  const text = generator.valueToCode(block, 'STRING', textOrder) || \"''\";\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, Order.NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = text + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n      where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\n    const at2Param =\n      where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n      'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\n      `\nfunction ${\n        generator.FUNCTION_NAME_PLACEHOLDER_\n      }(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`,\n    );\n    code =\n      functionName +\n      '(' +\n      text +\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n      // pass it.\n      (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\n      (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\n      ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_changeCase(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null,\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\n  const textOrder = operator ? Order.MEMBER : Order.NONE;\n  const text = generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into generator.\n    code = text + operator;\n  } else {\n    // Title case is not a native JavaScript function.  Define one.\n    const functionName = generator.provideFunction_(\n      'textToTitleCase',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`,\n    );\n    code = functionName + '(' + text + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_trim(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n    'BOTH': '.trim()',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  return [text + operator, Order.FUNCTION_CALL];\n}\n\nexport function text_print(block: Block, generator: JavascriptGenerator) {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'window.alert(' + msg + ');\\n';\n}\n\nexport function text_prompt_ext(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = 'window.prompt(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'Number(' + code + ')';\n  }\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_(\n    'textCount',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`,\n  );\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_replace(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  // The regex escaping code below is taken from the implementation of\n  // goog.string.regExpEscape.\n  const functionName = generator.provideFunction_(\n    'textReplace',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`,\n  );\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Order.FUNCTION_CALL];\n}\n\nexport function text_reverse(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + \".split('').reverse().join('')\";\n  return [code, Order.FUNCTION_CALL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variables\n\nimport type {Block} from '../../core/block.js';\nimport type {JavascriptGenerator} from './javascript_generator.js';\nimport {Order} from './javascript_generator.js';\n\nexport function variables_get(\n  block: Block,\n  generator: JavascriptGenerator,\n): [string, Order] {\n  // Variable getter.\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n}\n\nexport function variables_set(block: Block, generator: JavascriptGenerator) {\n  // Variable setter.\n  const argument0 =\n    generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + ';\\n';\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file JavaScript code generator class, including helper methods for\n * generating JavaScript for blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript\n\nimport * as Variables from '../../core/variables.js';\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {Names, NameType} from '../../core/names.js';\nimport type {Workspace} from '../../core/workspace.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\n\n/**\n * Order of operation ENUMs.\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\n */\n// prettier-ignore\nexport enum Order {\n  ATOMIC = 0,            // 0 \"\" ...\n  NEW = 1.1,             // new\n  MEMBER = 1.2,          // . []\n  FUNCTION_CALL = 2,     // ()\n  INCREMENT = 3,         // ++\n  DECREMENT = 3,         // --\n  BITWISE_NOT = 4.1,     // ~\n  UNARY_PLUS = 4.2,      // +\n  UNARY_NEGATION = 4.3,  // -\n  LOGICAL_NOT = 4.4,     // !\n  TYPEOF = 4.5,          // typeof\n  VOID = 4.6,            // void\n  DELETE = 4.7,          // delete\n  AWAIT = 4.8,           // await\n  EXPONENTIATION = 5.0,  // **\n  MULTIPLICATION = 5.1,  // *\n  DIVISION = 5.2,        // /\n  MODULUS = 5.3,         // %\n  SUBTRACTION = 6.1,     // -\n  ADDITION = 6.2,        // +\n  BITWISE_SHIFT = 7,     // << >> >>>\n  RELATIONAL = 8,        // < <= > >=\n  IN = 8,                // in\n  INSTANCEOF = 8,        // instanceof\n  EQUALITY = 9,          // == != === !==\n  BITWISE_AND = 10,      // &\n  BITWISE_XOR = 11,      // ^\n  BITWISE_OR = 12,       // |\n  LOGICAL_AND = 13,      // &&\n  LOGICAL_OR = 14,       // ||\n  CONDITIONAL = 15,      // ?:\n  ASSIGNMENT = 16,       // = += -= **= *= /= %= <<= >>= ...\n  YIELD = 17,            // yield\n  COMMA = 18,            // ,\n  NONE = 99,             // (...)\n}\n\n/**\n * JavaScript code generator class.\n */\nexport class JavascriptGenerator extends CodeGenerator {\n  /** List of outer-inner pairings that do NOT require parentheses. */\n  ORDER_OVERRIDES: [Order, Order][] = [\n    // (foo()).bar -> foo().bar\n    // (foo())[0] -> foo()[0]\n    [Order.FUNCTION_CALL, Order.MEMBER],\n    // (foo())() -> foo()()\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\n    // (foo.bar).baz -> foo.bar.baz\n    // (foo.bar)[0] -> foo.bar[0]\n    // (foo[0]).bar -> foo[0].bar\n    // (foo[0])[1] -> foo[0][1]\n    [Order.MEMBER, Order.MEMBER],\n    // (foo.bar)() -> foo.bar()\n    // (foo[0])() -> foo[0]()\n    [Order.MEMBER, Order.FUNCTION_CALL],\n\n    // !(!foo) -> !!foo\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\n    // a * (b * c) -> a * b * c\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\n    // a + (b + c) -> a + b + c\n    [Order.ADDITION, Order.ADDITION],\n    // a && (b && c) -> a && b && c\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\n    // a || (b || c) -> a || b || c\n    [Order.LOGICAL_OR, Order.LOGICAL_OR],\n  ];\n\n  /** @param name Name of the language the generator is for. */\n  constructor(name = 'JavaScript') {\n    super(name);\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      // Must assign Order[key] to a temporary to get the type guard to work;\n      // see https://github.com/microsoft/TypeScript/issues/10530.\n      const value = Order[key];\n      // Skip reverse-lookup entries in the enum.  Due to\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\n      // of TypeScript 5.5.2) actually narrows the type of value to\n      // never - but that still allows the following assignment to\n      // succeed.\n      if (typeof value === 'string') continue;\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    //\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\n    this.addReservedWords(\n      'break,case,catch,class,const,continue,debugger,default,delete,do,' +\n        'else,export,extends,finally,for,function,if,import,in,instanceof,' +\n        'new,return,super,switch,this,throw,try,typeof,var,void,' +\n        'while,with,yield,' +\n        'enum,' +\n        'implements,interface,let,package,private,protected,public,static,' +\n        'await,' +\n        'null,true,false,' +\n        // Magic variable.\n        'arguments,' +\n        // Everything in the current environment (835 items in Chrome,\n        // 104 in Node).\n        Object.getOwnPropertyNames(globalThis).join(','),\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   *\n   * @param workspace Workspace to generate code from.\n   */\n  init(workspace: Workspace) {\n    super.init(workspace);\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    const defvars = [];\n    // Add developer variables (not created or named by the user).\n    const devVarList = Variables.allDeveloperVariables(workspace);\n    for (let i = 0; i < devVarList.length; i++) {\n      defvars.push(\n        this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\n      );\n    }\n\n    // Add user variables, but only ones that are being used.\n    const variables = Variables.allUsedVarModels(workspace);\n    for (let i = 0; i < variables.length; i++) {\n      defvars.push(\n        this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE),\n      );\n    }\n\n    // Declare all of the variables.\n    if (defvars.length) {\n      this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\n    }\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with the variable definitions.\n   *\n   * @param code Generated code.\n   * @returns Completed code.\n   */\n  finish(code: string): string {\n    // Convert the definitions dictionary into a list.\n    const definitions = Object.values(this.definitions_);\n    // Call Blockly.CodeGenerator's finish.\n    super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_!.reset();\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything.  A trailing semicolon is needed to make this legal.\n   *\n   * @param line Line of generated code.\n   * @returns Legal line of code.\n   */\n  scrubNakedValue(line: string): string {\n    return line + ';\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped JavaScript string, complete with\n   * quotes.\n   *\n   * @param string Text to encode.\n   * @returns JavaScript string.\n   */\n  quote_(string: string): string {\n    // Can't use goog.string.quote since Google's style guide recommends\n    // JS string literals use single quotes.\n    string = string\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\n/g, '\\\\\\n')\n      .replace(/'/g, \"\\\\'\");\n    return \"'\" + string + \"'\";\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline JavaScript string, complete\n   * with quotes.\n   * @param string Text to encode.\n   * @returns JavaScript string.\n   */\n  multiline_quote_(string: string): string {\n    // Can't use goog.string.quote since Google's style guide recommends\n    // JS string literals use single quotes.\n    const lines = string.split(/\\n/g).map(this.quote_);\n    return lines.join(\" + '\\\\n' +\\n\");\n  }\n\n  /**\n   * Common tasks for generating JavaScript from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   *\n   * @param block The current block.\n   * @param code The JavaScript code created for this block.\n   * @param thisOnly True to generate code for only this statement.\n   * @returns JavaScript code with comments and subsequent blocks added.\n   * @protected\n   */\n  scrub_(block: Block, code: string, thisOnly = false): string {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment + '\\n', '// ');\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection!.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '// ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n      block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n\n  /**\n   * Generate code representing the specified value input, adjusted to take into\n   * account indexing (zero- or one-based) and optionally by a specified delta\n   * and/or by negation.\n   *\n   * @param block The block.\n   * @param atId The ID of the input block to get (and adjust) the value of.\n   * @param delta Value to add.\n   * @param negate Whether to negate the value.\n   * @param order The highest order acting on this value.\n   * @returns The adjusted value or code that evaluates to it.\n   */\n  getAdjusted(\n    block: Block,\n    atId: string,\n    delta = 0,\n    negate = false,\n    order = Order.NONE,\n  ): string {\n    if (block.workspace.options.oneBasedIndex) {\n      delta--;\n    }\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\n\n    let orderForInput = order;\n    if (delta > 0) {\n      orderForInput = Order.ADDITION;\n    } else if (delta < 0) {\n      orderForInput = Order.SUBTRACTION;\n    } else if (negate) {\n      orderForInput = Order.UNARY_NEGATION;\n    }\n\n    let at = this.valueToCode(block, atId, orderForInput) || defaultAtIndex;\n\n    // Easy case: no adjustments.\n    if (delta === 0 && !negate) {\n      return at;\n    }\n    // If the index is a naked number, adjust it right now.\n    if (stringUtils.isNumber(at)) {\n      at = String(Number(at) + delta);\n      if (negate) {\n        at = String(-Number(at));\n      }\n      return at;\n    }\n    // If the index is dynamic, adjust it in code.\n    if (delta > 0) {\n      at = `${at} + ${delta}`;\n    } else if (delta < 0) {\n      at = `${at} - ${-delta}`;\n    }\n    if (negate) {\n      at = delta ? `-(${at})` : `-${at}`;\n    }\n    if (Math.floor(order) >= Math.floor(orderForInput)) {\n      at = `(${at})`;\n    }\n    return at;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variablesDynamic\n\n// JavaScript is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Instantiate a JavascriptGenerator and populate it with the\n * complete set of block generator functions for JavaScript.  This is\n * the entrypoint for javascript_compressed.js.\n */\n\n// Former goog.module ID: Blockly.JavaScript.all\n\nimport {JavascriptGenerator} from './javascript/javascript_generator.js';\nimport * as colour from './javascript/colour.js';\nimport * as lists from './javascript/lists.js';\nimport * as logic from './javascript/logic.js';\nimport * as loops from './javascript/loops.js';\nimport * as math from './javascript/math.js';\nimport * as procedures from './javascript/procedures.js';\nimport * as text from './javascript/text.js';\nimport * as variables from './javascript/variables.js';\nimport * as variablesDynamic from './javascript/variables_dynamic.js';\n\nexport * from './javascript/javascript_generator.js';\n\n/**\n * JavaScript code generator instance.\n * @type {!JavascriptGenerator}\n */\nexport const javascriptGenerator = new JavascriptGenerator();\n\n// Install per-block-type generator functions:\nconst generators: typeof javascriptGenerator.forBlock = {\n  ...colour,\n  ...lists,\n  ...logic,\n  ...loops,\n  ...math,\n  ...procedures,\n  ...text,\n  ...variables,\n  ...variablesDynamic,\n};\nfor (const name in generators) {\n  javascriptGenerator.forBlock[name] = generators[name];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}