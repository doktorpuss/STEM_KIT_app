{"ast":null,"code":"import Blockly from'blockly/core';import'blockly/blocks';import{pythonGenerator}from'blockly/python';Blockly.Blocks['SEG7_start']={init:function(){this.appendDummyInput().appendField(\"Start 7-Segment Display\");this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(Blockly.Msg['LOGIC_HUE']);this.setTooltip(\"Start 7-segment display multiplexing\");}};Blockly.Blocks['SEG7_stop']={init:function(){this.appendDummyInput().appendField(\"Stop 7-Segment Display\");this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(Blockly.Msg['LOGIC_HUE']);this.setTooltip(\"Stop 7-segment display multiplexing\");}};Blockly.Blocks['SEG7_clear']={init:function(){this.appendDummyInput().appendField(\"Clear 7-Segment Display\");this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(Blockly.Msg['LOGIC_HUE']);this.setTooltip(\"Clear all segments\");}};Blockly.Blocks['SEG7_update']={init:function(){this.appendValueInput('VALUE').setCheck('Number').appendField(\"Update 7-Segment Display (value\");this.appendValueInput('on LED').setCheck('Number').appendField(\")\");this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(Blockly.Msg['LOGIC_HUE']);this.setTooltip(\"Update digit value (0-9)\");}};Blockly.Blocks['SEG7_dot']={init:function(){this.appendValueInput('LED').setCheck('Number').appendField(\"Set 7-Segment Display Dot\");this.appendValueInput('MODE').setCheck('Number');this.setPreviousStatement(true,null);this.setNextStatement(true,null);this.setColour(Blockly.Msg['LOGIC_HUE']);this.setTooltip(\"Set decimal point state\");}};pythonGenerator.forBlock['SEG7_start']=function(block){// Add import SEG7 to definitions\npythonGenerator.definitions_['import_SEG7']='import SEG7';return`SEG7.start()\\n`;};pythonGenerator.forBlock['SEG7_stop']=function(block){// Add import SEG7 to definitions\npythonGenerator.definitions_['import_SEG7']='import SEG7';return`SEG7.stop()\\n`;};pythonGenerator.forBlock['SEG7_clear']=function(block){// Add import SEG7 to definitions\npythonGenerator.definitions_['import_SEG7']='import SEG7';return`SEG7.clear()\\n`;};pythonGenerator.forBlock['SEG7_update']=function(block){// Add import SEG7 to definitions\npythonGenerator.definitions_['import_SEG7']='import SEG7';var value=pythonGenerator.valueToCode(block,'VALUE',pythonGenerator.ORDER_ATOMIC)||'0';var led=block.getFieldValue('LED');return`SEG7.update(${value}, ${led})\\n`;};pythonGenerator.forBlock['SEG7_dot']=function(block){// Add import SEG7 to definitions\npythonGenerator.definitions_['import_SEG7']='import SEG7';var led=block.getFieldValue('LED');var mode=block.getFieldValue('MODE');return`SEG7.dot_update(${led}, ${mode})\\n`;};","map":{"version":3,"names":["Blockly","pythonGenerator","Blocks","init","appendDummyInput","appendField","setPreviousStatement","setNextStatement","setColour","Msg","setTooltip","appendValueInput","setCheck","forBlock","block","definitions_","value","valueToCode","ORDER_ATOMIC","led","getFieldValue","mode"],"sources":["C:/Users/ADMIN/OneDrive/Documents/university/grad/project/STEM_KIT_app/frontend/src/blocks/SEG7_blocks.js"],"sourcesContent":["import Blockly from 'blockly/core';\r\nimport 'blockly/blocks';\r\nimport { pythonGenerator } from 'blockly/python';\r\n\r\nBlockly.Blocks['SEG7_start'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Start 7-Segment Display\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(Blockly.Msg['LOGIC_HUE']);\r\n    this.setTooltip(\"Start 7-segment display multiplexing\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['SEG7_stop'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Stop 7-Segment Display\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(Blockly.Msg['LOGIC_HUE']);\r\n    this.setTooltip(\"Stop 7-segment display multiplexing\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['SEG7_clear'] = {\r\n  init: function() {\r\n    this.appendDummyInput()\r\n        .appendField(\"Clear 7-Segment Display\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(Blockly.Msg['LOGIC_HUE']);\r\n    this.setTooltip(\"Clear all segments\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['SEG7_update'] = {\r\n  init: function() {\r\n    this.appendValueInput('VALUE')\r\n        .setCheck('Number')\r\n        .appendField(\"Update 7-Segment Display (value\");\r\n    this.appendValueInput('on LED')\r\n        .setCheck('Number')\r\n        .appendField(\")\");\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(Blockly.Msg['LOGIC_HUE']);\r\n    this.setTooltip(\"Update digit value (0-9)\");\r\n  }\r\n};\r\n\r\nBlockly.Blocks['SEG7_dot'] = {\r\n  init: function() {\r\n    this.appendValueInput('LED')\r\n        .setCheck('Number')\r\n        .appendField(\"Set 7-Segment Display Dot\")\r\n    this.appendValueInput('MODE')\r\n        .setCheck('Number')\r\n    this.setPreviousStatement(true, null);\r\n    this.setNextStatement(true, null);\r\n    this.setColour(Blockly.Msg['LOGIC_HUE']);\r\n    this.setTooltip(\"Set decimal point state\");\r\n  }\r\n};\r\n\r\npythonGenerator.forBlock['SEG7_start'] = function(block) {\r\n  // Add import SEG7 to definitions\r\n  pythonGenerator.definitions_['import_SEG7'] = 'import SEG7';\r\n  return `SEG7.start()\\n`;\r\n};\r\n\r\npythonGenerator.forBlock['SEG7_stop'] = function(block) {\r\n  // Add import SEG7 to definitions\r\n  pythonGenerator.definitions_['import_SEG7'] = 'import SEG7';\r\n  return `SEG7.stop()\\n`;\r\n};\r\n\r\npythonGenerator.forBlock['SEG7_clear'] = function(block) {\r\n  // Add import SEG7 to definitions\r\n  pythonGenerator.definitions_['import_SEG7'] = 'import SEG7';\r\n  return `SEG7.clear()\\n`;\r\n};\r\n\r\npythonGenerator.forBlock['SEG7_update'] = function(block) {\r\n  // Add import SEG7 to definitions\r\n  pythonGenerator.definitions_['import_SEG7'] = 'import SEG7';\r\n  var value = pythonGenerator.valueToCode(block, 'VALUE', pythonGenerator.ORDER_ATOMIC) || '0';\r\n  var led = block.getFieldValue('LED');\r\n  return `SEG7.update(${value}, ${led})\\n`;\r\n};\r\n\r\npythonGenerator.forBlock['SEG7_dot'] = function(block) {\r\n  // Add import SEG7 to definitions\r\n  pythonGenerator.definitions_['import_SEG7'] = 'import SEG7';\r\n  var led = block.getFieldValue('LED');\r\n  var mode = block.getFieldValue('MODE');\r\n  return `SEG7.dot_update(${led}, ${mode})\\n`;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}